// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mis_enqueue.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mis_enqueue::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mis_enqueue::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<34> mis_enqueue::ap_ST_fsm_state1 = "1";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state2 = "10";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state3 = "100";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state4 = "1000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state5 = "10000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state6 = "100000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state7 = "1000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state8 = "10000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state9 = "100000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state10 = "1000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state11 = "10000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state12 = "100000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<34> mis_enqueue::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<32> mis_enqueue::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool mis_enqueue::ap_const_boolean_1 = true;
const sc_lv<1> mis_enqueue::ap_const_lv1_0 = "0";
const sc_lv<32> mis_enqueue::ap_const_lv32_1F = "11111";
const sc_lv<32> mis_enqueue::ap_const_lv32_20 = "100000";
const sc_lv<1> mis_enqueue::ap_const_lv1_1 = "1";
const sc_lv<32> mis_enqueue::ap_const_lv32_12 = "10010";
const sc_lv<32> mis_enqueue::ap_const_lv32_21 = "100001";
const sc_lv<32> mis_enqueue::ap_const_lv32_7 = "111";
const sc_lv<32> mis_enqueue::ap_const_lv32_1 = "1";
const sc_lv<32> mis_enqueue::ap_const_lv32_8 = "1000";
const sc_lv<32> mis_enqueue::ap_const_lv32_2 = "10";
const sc_lv<32> mis_enqueue::ap_const_lv32_9 = "1001";
const sc_lv<32> mis_enqueue::ap_const_lv32_A = "1010";
const sc_lv<32> mis_enqueue::ap_const_lv32_11 = "10001";
const sc_lv<32> mis_enqueue::ap_const_lv32_18 = "11000";
const int mis_enqueue::C_M_AXI_L1_V_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int mis_enqueue::C_M_AXI_L1_V_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int mis_enqueue::C_M_AXI_L1_V_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int mis_enqueue::C_M_AXI_L1_V_CACHE_VALUE = "11";
const int mis_enqueue::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> mis_enqueue::ap_const_lv32_10 = "10000";
const bool mis_enqueue::ap_const_boolean_0 = false;
const sc_lv<32> mis_enqueue::ap_const_lv32_16 = "10110";
const sc_lv<32> mis_enqueue::ap_const_lv32_17 = "10111";
const sc_lv<64> mis_enqueue::ap_const_lv64_4 = "100";
const sc_lv<64> mis_enqueue::ap_const_lv64_5 = "101";
const sc_lv<64> mis_enqueue::ap_const_lv64_1 = "1";
const sc_lv<3> mis_enqueue::ap_const_lv3_0 = "000";
const sc_lv<2> mis_enqueue::ap_const_lv2_0 = "00";
const sc_lv<4> mis_enqueue::ap_const_lv4_0 = "0000";
const sc_lv<32> mis_enqueue::ap_const_lv32_3F = "111111";
const sc_lv<32> mis_enqueue::ap_const_lv32_44 = "1000100";
const sc_lv<32> mis_enqueue::ap_const_lv32_63 = "1100011";
const sc_lv<33> mis_enqueue::ap_const_lv33_7 = "111";
const sc_lv<32> mis_enqueue::ap_const_lv32_64 = "1100100";
const sc_lv<32> mis_enqueue::ap_const_lv32_83 = "10000011";
const sc_lv<4> mis_enqueue::ap_const_lv4_4 = "100";
const sc_lv<4> mis_enqueue::ap_const_lv4_1 = "1";
const sc_lv<32> mis_enqueue::ap_const_lv32_13 = "10011";
const sc_lv<32> mis_enqueue::ap_const_lv32_14 = "10100";
const sc_lv<32> mis_enqueue::ap_const_lv32_15 = "10101";

mis_enqueue::mis_enqueue(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mis_enqueue_l1_V_m_axi_U = new mis_enqueue_l1_V_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_L1_V_ID_WIDTH,C_M_AXI_L1_V_ADDR_WIDTH,C_M_AXI_L1_V_DATA_WIDTH,C_M_AXI_L1_V_AWUSER_WIDTH,C_M_AXI_L1_V_ARUSER_WIDTH,C_M_AXI_L1_V_WUSER_WIDTH,C_M_AXI_L1_V_RUSER_WIDTH,C_M_AXI_L1_V_BUSER_WIDTH,C_M_AXI_L1_V_TARGET_ADDR,C_M_AXI_L1_V_USER_VALUE,C_M_AXI_L1_V_PROT_VALUE,C_M_AXI_L1_V_CACHE_VALUE>("mis_enqueue_l1_V_m_axi_U");
    mis_enqueue_l1_V_m_axi_U->AWVALID(m_axi_l1_V_AWVALID);
    mis_enqueue_l1_V_m_axi_U->AWREADY(m_axi_l1_V_AWREADY);
    mis_enqueue_l1_V_m_axi_U->AWADDR(m_axi_l1_V_AWADDR);
    mis_enqueue_l1_V_m_axi_U->AWID(m_axi_l1_V_AWID);
    mis_enqueue_l1_V_m_axi_U->AWLEN(m_axi_l1_V_AWLEN);
    mis_enqueue_l1_V_m_axi_U->AWSIZE(m_axi_l1_V_AWSIZE);
    mis_enqueue_l1_V_m_axi_U->AWBURST(m_axi_l1_V_AWBURST);
    mis_enqueue_l1_V_m_axi_U->AWLOCK(m_axi_l1_V_AWLOCK);
    mis_enqueue_l1_V_m_axi_U->AWCACHE(m_axi_l1_V_AWCACHE);
    mis_enqueue_l1_V_m_axi_U->AWPROT(m_axi_l1_V_AWPROT);
    mis_enqueue_l1_V_m_axi_U->AWQOS(m_axi_l1_V_AWQOS);
    mis_enqueue_l1_V_m_axi_U->AWREGION(m_axi_l1_V_AWREGION);
    mis_enqueue_l1_V_m_axi_U->AWUSER(m_axi_l1_V_AWUSER);
    mis_enqueue_l1_V_m_axi_U->WVALID(m_axi_l1_V_WVALID);
    mis_enqueue_l1_V_m_axi_U->WREADY(m_axi_l1_V_WREADY);
    mis_enqueue_l1_V_m_axi_U->WDATA(m_axi_l1_V_WDATA);
    mis_enqueue_l1_V_m_axi_U->WSTRB(m_axi_l1_V_WSTRB);
    mis_enqueue_l1_V_m_axi_U->WLAST(m_axi_l1_V_WLAST);
    mis_enqueue_l1_V_m_axi_U->WID(m_axi_l1_V_WID);
    mis_enqueue_l1_V_m_axi_U->WUSER(m_axi_l1_V_WUSER);
    mis_enqueue_l1_V_m_axi_U->ARVALID(m_axi_l1_V_ARVALID);
    mis_enqueue_l1_V_m_axi_U->ARREADY(m_axi_l1_V_ARREADY);
    mis_enqueue_l1_V_m_axi_U->ARADDR(m_axi_l1_V_ARADDR);
    mis_enqueue_l1_V_m_axi_U->ARID(m_axi_l1_V_ARID);
    mis_enqueue_l1_V_m_axi_U->ARLEN(m_axi_l1_V_ARLEN);
    mis_enqueue_l1_V_m_axi_U->ARSIZE(m_axi_l1_V_ARSIZE);
    mis_enqueue_l1_V_m_axi_U->ARBURST(m_axi_l1_V_ARBURST);
    mis_enqueue_l1_V_m_axi_U->ARLOCK(m_axi_l1_V_ARLOCK);
    mis_enqueue_l1_V_m_axi_U->ARCACHE(m_axi_l1_V_ARCACHE);
    mis_enqueue_l1_V_m_axi_U->ARPROT(m_axi_l1_V_ARPROT);
    mis_enqueue_l1_V_m_axi_U->ARQOS(m_axi_l1_V_ARQOS);
    mis_enqueue_l1_V_m_axi_U->ARREGION(m_axi_l1_V_ARREGION);
    mis_enqueue_l1_V_m_axi_U->ARUSER(m_axi_l1_V_ARUSER);
    mis_enqueue_l1_V_m_axi_U->RVALID(m_axi_l1_V_RVALID);
    mis_enqueue_l1_V_m_axi_U->RREADY(m_axi_l1_V_RREADY);
    mis_enqueue_l1_V_m_axi_U->RDATA(m_axi_l1_V_RDATA);
    mis_enqueue_l1_V_m_axi_U->RLAST(m_axi_l1_V_RLAST);
    mis_enqueue_l1_V_m_axi_U->RID(m_axi_l1_V_RID);
    mis_enqueue_l1_V_m_axi_U->RUSER(m_axi_l1_V_RUSER);
    mis_enqueue_l1_V_m_axi_U->RRESP(m_axi_l1_V_RRESP);
    mis_enqueue_l1_V_m_axi_U->BVALID(m_axi_l1_V_BVALID);
    mis_enqueue_l1_V_m_axi_U->BREADY(m_axi_l1_V_BREADY);
    mis_enqueue_l1_V_m_axi_U->BRESP(m_axi_l1_V_BRESP);
    mis_enqueue_l1_V_m_axi_U->BID(m_axi_l1_V_BID);
    mis_enqueue_l1_V_m_axi_U->BUSER(m_axi_l1_V_BUSER);
    mis_enqueue_l1_V_m_axi_U->ACLK(ap_clk);
    mis_enqueue_l1_V_m_axi_U->ARESET(ap_rst_n_inv);
    mis_enqueue_l1_V_m_axi_U->ACLK_EN(ap_var_for_const0);
    mis_enqueue_l1_V_m_axi_U->I_ARVALID(l1_V_ARVALID);
    mis_enqueue_l1_V_m_axi_U->I_ARREADY(l1_V_ARREADY);
    mis_enqueue_l1_V_m_axi_U->I_ARADDR(l1_V_ARADDR);
    mis_enqueue_l1_V_m_axi_U->I_ARID(ap_var_for_const1);
    mis_enqueue_l1_V_m_axi_U->I_ARLEN(ap_var_for_const2);
    mis_enqueue_l1_V_m_axi_U->I_ARSIZE(ap_var_for_const3);
    mis_enqueue_l1_V_m_axi_U->I_ARLOCK(ap_var_for_const4);
    mis_enqueue_l1_V_m_axi_U->I_ARCACHE(ap_var_for_const5);
    mis_enqueue_l1_V_m_axi_U->I_ARQOS(ap_var_for_const5);
    mis_enqueue_l1_V_m_axi_U->I_ARPROT(ap_var_for_const3);
    mis_enqueue_l1_V_m_axi_U->I_ARUSER(ap_var_for_const1);
    mis_enqueue_l1_V_m_axi_U->I_ARBURST(ap_var_for_const4);
    mis_enqueue_l1_V_m_axi_U->I_ARREGION(ap_var_for_const5);
    mis_enqueue_l1_V_m_axi_U->I_RVALID(l1_V_RVALID);
    mis_enqueue_l1_V_m_axi_U->I_RREADY(l1_V_RREADY);
    mis_enqueue_l1_V_m_axi_U->I_RDATA(l1_V_RDATA);
    mis_enqueue_l1_V_m_axi_U->I_RID(l1_V_RID);
    mis_enqueue_l1_V_m_axi_U->I_RUSER(l1_V_RUSER);
    mis_enqueue_l1_V_m_axi_U->I_RRESP(l1_V_RRESP);
    mis_enqueue_l1_V_m_axi_U->I_RLAST(l1_V_RLAST);
    mis_enqueue_l1_V_m_axi_U->I_AWVALID(ap_var_for_const6);
    mis_enqueue_l1_V_m_axi_U->I_AWREADY(l1_V_AWREADY);
    mis_enqueue_l1_V_m_axi_U->I_AWADDR(ap_var_for_const7);
    mis_enqueue_l1_V_m_axi_U->I_AWID(ap_var_for_const1);
    mis_enqueue_l1_V_m_axi_U->I_AWLEN(ap_var_for_const7);
    mis_enqueue_l1_V_m_axi_U->I_AWSIZE(ap_var_for_const3);
    mis_enqueue_l1_V_m_axi_U->I_AWLOCK(ap_var_for_const4);
    mis_enqueue_l1_V_m_axi_U->I_AWCACHE(ap_var_for_const5);
    mis_enqueue_l1_V_m_axi_U->I_AWQOS(ap_var_for_const5);
    mis_enqueue_l1_V_m_axi_U->I_AWPROT(ap_var_for_const3);
    mis_enqueue_l1_V_m_axi_U->I_AWUSER(ap_var_for_const1);
    mis_enqueue_l1_V_m_axi_U->I_AWBURST(ap_var_for_const4);
    mis_enqueue_l1_V_m_axi_U->I_AWREGION(ap_var_for_const5);
    mis_enqueue_l1_V_m_axi_U->I_WVALID(ap_var_for_const6);
    mis_enqueue_l1_V_m_axi_U->I_WREADY(l1_V_WREADY);
    mis_enqueue_l1_V_m_axi_U->I_WDATA(ap_var_for_const7);
    mis_enqueue_l1_V_m_axi_U->I_WID(ap_var_for_const1);
    mis_enqueue_l1_V_m_axi_U->I_WUSER(ap_var_for_const1);
    mis_enqueue_l1_V_m_axi_U->I_WLAST(ap_var_for_const6);
    mis_enqueue_l1_V_m_axi_U->I_WSTRB(ap_var_for_const5);
    mis_enqueue_l1_V_m_axi_U->I_BVALID(l1_V_BVALID);
    mis_enqueue_l1_V_m_axi_U->I_BREADY(ap_var_for_const6);
    mis_enqueue_l1_V_m_axi_U->I_BRESP(l1_V_BRESP);
    mis_enqueue_l1_V_m_axi_U->I_BID(l1_V_BID);
    mis_enqueue_l1_V_m_axi_U->I_BUSER(l1_V_BUSER);
    mis_enqueue_mul_3bkb_U1 = new mis_enqueue_mul_3bkb<1,5,32,32,64>("mis_enqueue_mul_3bkb_U1");
    mis_enqueue_mul_3bkb_U1->clk(ap_clk);
    mis_enqueue_mul_3bkb_U1->reset(ap_rst_n_inv);
    mis_enqueue_mul_3bkb_U1->din0(grp_fu_337_p0);
    mis_enqueue_mul_3bkb_U1->din1(grp_fu_337_p1);
    mis_enqueue_mul_3bkb_U1->ce(grp_fu_337_ce);
    mis_enqueue_mul_3bkb_U1->dout(grp_fu_337_p2);
    regslice_both_task_out_V_U = new regslice_both<136>("regslice_both_task_out_V_U");
    regslice_both_task_out_V_U->ap_clk(ap_clk);
    regslice_both_task_out_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_task_out_V_U->data_in(task_out_V_TDATA_int);
    regslice_both_task_out_V_U->vld_in(task_out_V_TVALID_int);
    regslice_both_task_out_V_U->ack_in(task_out_V_TREADY_int);
    regslice_both_task_out_V_U->data_out(task_out_V_TDATA);
    regslice_both_task_out_V_U->vld_out(regslice_both_task_out_V_U_vld_out);
    regslice_both_task_out_V_U->ack_out(task_out_V_TREADY);
    regslice_both_task_out_V_U->apdone_blk(regslice_both_task_out_V_U_apdone_blk);
    regslice_both_undo_log_entry_V_U = new regslice_both<64>("regslice_both_undo_log_entry_V_U");
    regslice_both_undo_log_entry_V_U->ap_clk(ap_clk);
    regslice_both_undo_log_entry_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_undo_log_entry_V_U->data_in(undo_log_entry_V_TDATA);
    regslice_both_undo_log_entry_V_U->vld_in(undo_log_entry_V_TVALID);
    regslice_both_undo_log_entry_V_U->ack_in(regslice_both_undo_log_entry_V_U_ack_in);
    regslice_both_undo_log_entry_V_U->data_out(undo_log_entry_V_TDATA_int);
    regslice_both_undo_log_entry_V_U->vld_out(undo_log_entry_V_TVALID_int);
    regslice_both_undo_log_entry_V_U->ack_out(ap_var_for_const6);
    regslice_both_undo_log_entry_V_U->apdone_blk(regslice_both_undo_log_entry_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln544_1_fu_388_p2);
    sensitive << ( ret_V_2_reg_550 );
    sensitive << ( sext_ln544_3_fu_385_p1 );

    SC_METHOD(thread_add_ln544_fu_379_p2);
    sensitive << ( sext_ln544_1_fu_371_p1 );
    sensitive << ( sext_ln544_2_fu_375_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state10);
    sensitive << ( initialized_V_load_reg_450 );
    sensitive << ( l1_V_RVALID );

    SC_METHOD(thread_ap_block_state19_io);
    sensitive << ( ap_predicate_op120_write_state19 );
    sensitive << ( task_out_V_TREADY_int );

    SC_METHOD(thread_ap_block_state1_io);
    sensitive << ( initialized_V );
    sensitive << ( l1_V_ARREADY );

    SC_METHOD(thread_ap_block_state33_io);
    sensitive << ( icmp_ln887_1_reg_527 );
    sensitive << ( task_out_V_TREADY_int );

    SC_METHOD(thread_ap_block_state34_io);
    sensitive << ( icmp_ln887_2_reg_541 );
    sensitive << ( task_out_V_TREADY_int );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( regslice_both_task_out_V_U_apdone_blk );
    sensitive << ( ap_block_state34_io );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_predicate_op120_write_state19);
    sensitive << ( icmp_ln887_fu_319_p2 );
    sensitive << ( icmp_ln887_2_fu_345_p2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( regslice_both_task_out_V_U_apdone_blk );
    sensitive << ( ap_block_state34_io );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_child_ts_V_fu_342_p1);
    sensitive << ( task_in );

    SC_METHOD(thread_empty_8_fu_293_p2);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( l1_V_RVALID );
    sensitive << ( zext_ln119_1_fu_287_p1 );
    sensitive << ( empty_fu_290_p1 );

    SC_METHOD(thread_empty_9_fu_299_p2);
    sensitive << ( start_n_V_reg_484 );

    SC_METHOD(thread_empty_fu_290_p1);
    sensitive << ( start_n_V_reg_484 );

    SC_METHOD(thread_grp_fu_337_ce);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_block_state19_io );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );

    SC_METHOD(thread_grp_fu_337_p0);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( lhs_V_2_reg_519 );

    SC_METHOD(thread_grp_fu_337_p1);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( grp_fu_337_p10 );

    SC_METHOD(thread_grp_fu_337_p10);
    sensitive << ( total_v_V );

    SC_METHOD(thread_i_V_fu_278_p4);
    sensitive << ( task_in );

    SC_METHOD(thread_icmp_ln887_1_fu_324_p2);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( icmp_ln887_fu_319_p2 );
    sensitive << ( n_V_reg_502 );
    sensitive << ( ap_block_state19_io );
    sensitive << ( t_V_reg_163 );

    SC_METHOD(thread_icmp_ln887_2_fu_345_p2);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( icmp_ln887_fu_319_p2 );
    sensitive << ( n_V_reg_502 );
    sensitive << ( ngh_cnt_V_reg_513 );
    sensitive << ( ap_block_state19_io );

    SC_METHOD(thread_icmp_ln887_fu_319_p2);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( zext_ln119_1_reg_508 );
    sensitive << ( ap_block_state19_io );
    sensitive << ( sext_ln887_fu_315_p1 );

    SC_METHOD(thread_initialized_V_load_load_fu_173_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( initialized_V );

    SC_METHOD(thread_l1_V_ARADDR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( initialized_V );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( l1_V_ARREADY );
    sensitive << ( ap_block_state1_io );
    sensitive << ( l1_V_addr_3_reg_478 );
    sensitive << ( l1_V_addr_4_reg_560 );

    SC_METHOD(thread_l1_V_ARVALID);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( initialized_V );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( l1_V_ARREADY );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_l1_V_RREADY);
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( initialized_V_load_reg_450 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( l1_V_RVALID );
    sensitive << ( task_out_V_TREADY_int );

    SC_METHOD(thread_l1_V_blk_n_AR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_l1_V_ARREADY );
    sensitive << ( initialized_V );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_l1_V_blk_n_R);
    sensitive << ( m_axi_l1_V_RVALID );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( initialized_V_load_reg_450 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_lhs_V_2_fu_311_p1);
    sensitive << ( i_V_fu_278_p4 );

    SC_METHOD(thread_lhs_V_fu_235_p1);
    sensitive << ( base_degree_V );

    SC_METHOD(thread_ngh_cnt_V_1_fu_435_p2);
    sensitive << ( t_V_reg_163 );

    SC_METHOD(thread_ngh_cnt_V_fu_304_p3);
    sensitive << ( start_n_V_reg_484 );
    sensitive << ( empty_8_fu_293_p2 );
    sensitive << ( empty_9_fu_299_p2 );

    SC_METHOD(thread_p_Result_s_fu_402_p5);
    sensitive << ( l1_V_RDATA );
    sensitive << ( p_Val2_s_fu_86 );

    SC_METHOD(thread_ret_V_1_fu_272_p2);
    sensitive << ( zext_ln119_fu_268_p1 );

    SC_METHOD(thread_ret_V_fu_243_p2);
    sensitive << ( lhs_V_fu_235_p1 );
    sensitive << ( rhs_V_fu_239_p1 );

    SC_METHOD(thread_rhs_V_fu_239_p1);
    sensitive << ( vid_V_fu_222_p4 );

    SC_METHOD(thread_sext_ln177_1_fu_362_p1);
    sensitive << ( tmp_1_fu_352_p5 );

    SC_METHOD(thread_sext_ln177_fu_425_p1);
    sensitive << ( tmp_fu_414_p5 );

    SC_METHOD(thread_sext_ln544_1_fu_371_p1);
    sensitive << ( base_neighbor_V );

    SC_METHOD(thread_sext_ln544_2_fu_375_p1);
    sensitive << ( t_V_reg_163 );

    SC_METHOD(thread_sext_ln544_3_fu_385_p1);
    sensitive << ( add_ln544_reg_555 );

    SC_METHOD(thread_sext_ln544_fu_249_p1);
    sensitive << ( ret_V_fu_243_p2 );

    SC_METHOD(thread_sext_ln887_fu_315_p1);
    sensitive << ( t_V_reg_163 );

    SC_METHOD(thread_start_n_V_fu_259_p4);
    sensitive << ( task_in );

    SC_METHOD(thread_task_out_V_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( icmp_ln887_1_reg_527 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( icmp_ln887_fu_319_p2 );
    sensitive << ( icmp_ln887_2_fu_345_p2 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( icmp_ln887_2_reg_541 );
    sensitive << ( task_out_V_TREADY_int );

    SC_METHOD(thread_task_out_V_TDATA_int);
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( l1_V_RVALID );
    sensitive << ( ap_predicate_op120_write_state19 );
    sensitive << ( sext_ln177_1_fu_362_p1 );
    sensitive << ( sext_ln177_fu_425_p1 );

    SC_METHOD(thread_task_out_V_TVALID);
    sensitive << ( regslice_both_task_out_V_U_vld_out );

    SC_METHOD(thread_task_out_V_TVALID_int);
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( l1_V_RVALID );
    sensitive << ( ap_predicate_op120_write_state19 );
    sensitive << ( ap_block_state19_io );
    sensitive << ( task_out_V_TREADY_int );

    SC_METHOD(thread_tmp_1_fu_352_p5);
    sensitive << ( i_V_reg_497 );
    sensitive << ( ngh_cnt_V_reg_513 );
    sensitive << ( trunc_ln176_fu_349_p1 );

    SC_METHOD(thread_tmp_fu_414_p5);
    sensitive << ( l1_V_RDATA );
    sensitive << ( child_ts_V_reg_536 );
    sensitive << ( p_Result_s_fu_402_p5 );

    SC_METHOD(thread_trunc_ln176_fu_349_p1);
    sensitive << ( task_in );

    SC_METHOD(thread_undo_log_entry_V_TREADY);
    sensitive << ( undo_log_entry_V_TVALID );
    sensitive << ( regslice_both_undo_log_entry_V_U_ack_in );

    SC_METHOD(thread_vid_V_fu_222_p4);
    sensitive << ( task_in );

    SC_METHOD(thread_zext_ln119_1_fu_287_p1);
    sensitive << ( ret_V_1_reg_492 );

    SC_METHOD(thread_zext_ln119_fu_268_p1);
    sensitive << ( start_n_V_fu_259_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( initialized_V );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( icmp_ln887_fu_319_p2 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( initialized_V_load_load_fu_173_p1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( initialized_V_load_reg_450 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( l1_V_ARREADY );
    sensitive << ( l1_V_RVALID );
    sensitive << ( ap_block_state1_io );
    sensitive << ( icmp_ln887_1_fu_324_p2 );
    sensitive << ( ap_block_state19_io );
    sensitive << ( ap_block_state33_io );
    sensitive << ( regslice_both_task_out_V_U_apdone_blk );
    sensitive << ( ap_block_state34_io );
    sensitive << ( task_out_V_TREADY_int );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    ap_CS_fsm = "0000000000000000000000000000000001";
    initialized_V = "0";
    base_neighbor_V = "00000000000000000000000000000000";
    base_degree_V = "00000000000000000000000000000000";
    total_v_V = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mis_enqueue_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, task_in, "(port)task_in");
    sc_trace(mVcdFile, task_out_V_TDATA, "(port)task_out_V_TDATA");
    sc_trace(mVcdFile, task_out_V_TVALID, "(port)task_out_V_TVALID");
    sc_trace(mVcdFile, task_out_V_TREADY, "(port)task_out_V_TREADY");
    sc_trace(mVcdFile, m_axi_l1_V_AWVALID, "(port)m_axi_l1_V_AWVALID");
    sc_trace(mVcdFile, m_axi_l1_V_AWREADY, "(port)m_axi_l1_V_AWREADY");
    sc_trace(mVcdFile, m_axi_l1_V_AWADDR, "(port)m_axi_l1_V_AWADDR");
    sc_trace(mVcdFile, m_axi_l1_V_AWID, "(port)m_axi_l1_V_AWID");
    sc_trace(mVcdFile, m_axi_l1_V_AWLEN, "(port)m_axi_l1_V_AWLEN");
    sc_trace(mVcdFile, m_axi_l1_V_AWSIZE, "(port)m_axi_l1_V_AWSIZE");
    sc_trace(mVcdFile, m_axi_l1_V_AWBURST, "(port)m_axi_l1_V_AWBURST");
    sc_trace(mVcdFile, m_axi_l1_V_AWLOCK, "(port)m_axi_l1_V_AWLOCK");
    sc_trace(mVcdFile, m_axi_l1_V_AWCACHE, "(port)m_axi_l1_V_AWCACHE");
    sc_trace(mVcdFile, m_axi_l1_V_AWPROT, "(port)m_axi_l1_V_AWPROT");
    sc_trace(mVcdFile, m_axi_l1_V_AWQOS, "(port)m_axi_l1_V_AWQOS");
    sc_trace(mVcdFile, m_axi_l1_V_AWREGION, "(port)m_axi_l1_V_AWREGION");
    sc_trace(mVcdFile, m_axi_l1_V_AWUSER, "(port)m_axi_l1_V_AWUSER");
    sc_trace(mVcdFile, m_axi_l1_V_WVALID, "(port)m_axi_l1_V_WVALID");
    sc_trace(mVcdFile, m_axi_l1_V_WREADY, "(port)m_axi_l1_V_WREADY");
    sc_trace(mVcdFile, m_axi_l1_V_WDATA, "(port)m_axi_l1_V_WDATA");
    sc_trace(mVcdFile, m_axi_l1_V_WSTRB, "(port)m_axi_l1_V_WSTRB");
    sc_trace(mVcdFile, m_axi_l1_V_WLAST, "(port)m_axi_l1_V_WLAST");
    sc_trace(mVcdFile, m_axi_l1_V_WID, "(port)m_axi_l1_V_WID");
    sc_trace(mVcdFile, m_axi_l1_V_WUSER, "(port)m_axi_l1_V_WUSER");
    sc_trace(mVcdFile, m_axi_l1_V_ARVALID, "(port)m_axi_l1_V_ARVALID");
    sc_trace(mVcdFile, m_axi_l1_V_ARREADY, "(port)m_axi_l1_V_ARREADY");
    sc_trace(mVcdFile, m_axi_l1_V_ARADDR, "(port)m_axi_l1_V_ARADDR");
    sc_trace(mVcdFile, m_axi_l1_V_ARID, "(port)m_axi_l1_V_ARID");
    sc_trace(mVcdFile, m_axi_l1_V_ARLEN, "(port)m_axi_l1_V_ARLEN");
    sc_trace(mVcdFile, m_axi_l1_V_ARSIZE, "(port)m_axi_l1_V_ARSIZE");
    sc_trace(mVcdFile, m_axi_l1_V_ARBURST, "(port)m_axi_l1_V_ARBURST");
    sc_trace(mVcdFile, m_axi_l1_V_ARLOCK, "(port)m_axi_l1_V_ARLOCK");
    sc_trace(mVcdFile, m_axi_l1_V_ARCACHE, "(port)m_axi_l1_V_ARCACHE");
    sc_trace(mVcdFile, m_axi_l1_V_ARPROT, "(port)m_axi_l1_V_ARPROT");
    sc_trace(mVcdFile, m_axi_l1_V_ARQOS, "(port)m_axi_l1_V_ARQOS");
    sc_trace(mVcdFile, m_axi_l1_V_ARREGION, "(port)m_axi_l1_V_ARREGION");
    sc_trace(mVcdFile, m_axi_l1_V_ARUSER, "(port)m_axi_l1_V_ARUSER");
    sc_trace(mVcdFile, m_axi_l1_V_RVALID, "(port)m_axi_l1_V_RVALID");
    sc_trace(mVcdFile, m_axi_l1_V_RREADY, "(port)m_axi_l1_V_RREADY");
    sc_trace(mVcdFile, m_axi_l1_V_RDATA, "(port)m_axi_l1_V_RDATA");
    sc_trace(mVcdFile, m_axi_l1_V_RLAST, "(port)m_axi_l1_V_RLAST");
    sc_trace(mVcdFile, m_axi_l1_V_RID, "(port)m_axi_l1_V_RID");
    sc_trace(mVcdFile, m_axi_l1_V_RUSER, "(port)m_axi_l1_V_RUSER");
    sc_trace(mVcdFile, m_axi_l1_V_RRESP, "(port)m_axi_l1_V_RRESP");
    sc_trace(mVcdFile, m_axi_l1_V_BVALID, "(port)m_axi_l1_V_BVALID");
    sc_trace(mVcdFile, m_axi_l1_V_BREADY, "(port)m_axi_l1_V_BREADY");
    sc_trace(mVcdFile, m_axi_l1_V_BRESP, "(port)m_axi_l1_V_BRESP");
    sc_trace(mVcdFile, m_axi_l1_V_BID, "(port)m_axi_l1_V_BID");
    sc_trace(mVcdFile, m_axi_l1_V_BUSER, "(port)m_axi_l1_V_BUSER");
    sc_trace(mVcdFile, undo_log_entry_V_TDATA, "(port)undo_log_entry_V_TDATA");
    sc_trace(mVcdFile, undo_log_entry_V_TVALID, "(port)undo_log_entry_V_TVALID");
    sc_trace(mVcdFile, undo_log_entry_V_TREADY, "(port)undo_log_entry_V_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, initialized_V, "initialized_V");
    sc_trace(mVcdFile, base_neighbor_V, "base_neighbor_V");
    sc_trace(mVcdFile, base_degree_V, "base_degree_V");
    sc_trace(mVcdFile, total_v_V, "total_v_V");
    sc_trace(mVcdFile, task_out_V_TDATA_blk_n, "task_out_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, icmp_ln887_1_reg_527, "icmp_ln887_1_reg_527");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, icmp_ln887_fu_319_p2, "icmp_ln887_fu_319_p2");
    sc_trace(mVcdFile, icmp_ln887_2_fu_345_p2, "icmp_ln887_2_fu_345_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, icmp_ln887_2_reg_541, "icmp_ln887_2_reg_541");
    sc_trace(mVcdFile, l1_V_blk_n_AR, "l1_V_blk_n_AR");
    sc_trace(mVcdFile, initialized_V_load_load_fu_173_p1, "initialized_V_load_load_fu_173_p1");
    sc_trace(mVcdFile, l1_V_blk_n_R, "l1_V_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, initialized_V_load_reg_450, "initialized_V_load_reg_450");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, l1_V_AWREADY, "l1_V_AWREADY");
    sc_trace(mVcdFile, l1_V_WREADY, "l1_V_WREADY");
    sc_trace(mVcdFile, l1_V_ARVALID, "l1_V_ARVALID");
    sc_trace(mVcdFile, l1_V_ARREADY, "l1_V_ARREADY");
    sc_trace(mVcdFile, l1_V_ARADDR, "l1_V_ARADDR");
    sc_trace(mVcdFile, l1_V_RVALID, "l1_V_RVALID");
    sc_trace(mVcdFile, l1_V_RREADY, "l1_V_RREADY");
    sc_trace(mVcdFile, l1_V_RDATA, "l1_V_RDATA");
    sc_trace(mVcdFile, l1_V_RLAST, "l1_V_RLAST");
    sc_trace(mVcdFile, l1_V_RID, "l1_V_RID");
    sc_trace(mVcdFile, l1_V_RUSER, "l1_V_RUSER");
    sc_trace(mVcdFile, l1_V_RRESP, "l1_V_RRESP");
    sc_trace(mVcdFile, l1_V_BVALID, "l1_V_BVALID");
    sc_trace(mVcdFile, l1_V_BRESP, "l1_V_BRESP");
    sc_trace(mVcdFile, l1_V_BID, "l1_V_BID");
    sc_trace(mVcdFile, l1_V_BUSER, "l1_V_BUSER");
    sc_trace(mVcdFile, ap_block_state1_io, "ap_block_state1_io");
    sc_trace(mVcdFile, l1_V_addr_3_reg_478, "l1_V_addr_3_reg_478");
    sc_trace(mVcdFile, ap_block_state10, "ap_block_state10");
    sc_trace(mVcdFile, start_n_V_fu_259_p4, "start_n_V_fu_259_p4");
    sc_trace(mVcdFile, start_n_V_reg_484, "start_n_V_reg_484");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ret_V_1_fu_272_p2, "ret_V_1_fu_272_p2");
    sc_trace(mVcdFile, ret_V_1_reg_492, "ret_V_1_reg_492");
    sc_trace(mVcdFile, i_V_fu_278_p4, "i_V_fu_278_p4");
    sc_trace(mVcdFile, i_V_reg_497, "i_V_reg_497");
    sc_trace(mVcdFile, n_V_reg_502, "n_V_reg_502");
    sc_trace(mVcdFile, zext_ln119_1_fu_287_p1, "zext_ln119_1_fu_287_p1");
    sc_trace(mVcdFile, zext_ln119_1_reg_508, "zext_ln119_1_reg_508");
    sc_trace(mVcdFile, ngh_cnt_V_fu_304_p3, "ngh_cnt_V_fu_304_p3");
    sc_trace(mVcdFile, ngh_cnt_V_reg_513, "ngh_cnt_V_reg_513");
    sc_trace(mVcdFile, lhs_V_2_fu_311_p1, "lhs_V_2_fu_311_p1");
    sc_trace(mVcdFile, lhs_V_2_reg_519, "lhs_V_2_reg_519");
    sc_trace(mVcdFile, icmp_ln887_1_fu_324_p2, "icmp_ln887_1_fu_324_p2");
    sc_trace(mVcdFile, ap_predicate_op120_write_state19, "ap_predicate_op120_write_state19");
    sc_trace(mVcdFile, ap_block_state19_io, "ap_block_state19_io");
    sc_trace(mVcdFile, child_ts_V_fu_342_p1, "child_ts_V_fu_342_p1");
    sc_trace(mVcdFile, child_ts_V_reg_536, "child_ts_V_reg_536");
    sc_trace(mVcdFile, sext_ln177_1_fu_362_p1, "sext_ln177_1_fu_362_p1");
    sc_trace(mVcdFile, grp_fu_337_p2, "grp_fu_337_p2");
    sc_trace(mVcdFile, ret_V_2_reg_550, "ret_V_2_reg_550");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, add_ln544_fu_379_p2, "add_ln544_fu_379_p2");
    sc_trace(mVcdFile, add_ln544_reg_555, "add_ln544_reg_555");
    sc_trace(mVcdFile, l1_V_addr_4_reg_560, "l1_V_addr_4_reg_560");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, sext_ln177_fu_425_p1, "sext_ln177_fu_425_p1");
    sc_trace(mVcdFile, ngh_cnt_V_1_fu_435_p2, "ngh_cnt_V_1_fu_435_p2");
    sc_trace(mVcdFile, ap_block_state33_io, "ap_block_state33_io");
    sc_trace(mVcdFile, t_V_reg_163, "t_V_reg_163");
    sc_trace(mVcdFile, sext_ln544_fu_249_p1, "sext_ln544_fu_249_p1");
    sc_trace(mVcdFile, add_ln544_1_fu_388_p2, "add_ln544_1_fu_388_p2");
    sc_trace(mVcdFile, p_Val2_s_fu_86, "p_Val2_s_fu_86");
    sc_trace(mVcdFile, p_Result_s_fu_402_p5, "p_Result_s_fu_402_p5");
    sc_trace(mVcdFile, vid_V_fu_222_p4, "vid_V_fu_222_p4");
    sc_trace(mVcdFile, lhs_V_fu_235_p1, "lhs_V_fu_235_p1");
    sc_trace(mVcdFile, rhs_V_fu_239_p1, "rhs_V_fu_239_p1");
    sc_trace(mVcdFile, ret_V_fu_243_p2, "ret_V_fu_243_p2");
    sc_trace(mVcdFile, zext_ln119_fu_268_p1, "zext_ln119_fu_268_p1");
    sc_trace(mVcdFile, empty_fu_290_p1, "empty_fu_290_p1");
    sc_trace(mVcdFile, empty_8_fu_293_p2, "empty_8_fu_293_p2");
    sc_trace(mVcdFile, empty_9_fu_299_p2, "empty_9_fu_299_p2");
    sc_trace(mVcdFile, sext_ln887_fu_315_p1, "sext_ln887_fu_315_p1");
    sc_trace(mVcdFile, grp_fu_337_p0, "grp_fu_337_p0");
    sc_trace(mVcdFile, grp_fu_337_p1, "grp_fu_337_p1");
    sc_trace(mVcdFile, trunc_ln176_fu_349_p1, "trunc_ln176_fu_349_p1");
    sc_trace(mVcdFile, tmp_1_fu_352_p5, "tmp_1_fu_352_p5");
    sc_trace(mVcdFile, sext_ln544_1_fu_371_p1, "sext_ln544_1_fu_371_p1");
    sc_trace(mVcdFile, sext_ln544_2_fu_375_p1, "sext_ln544_2_fu_375_p1");
    sc_trace(mVcdFile, sext_ln544_3_fu_385_p1, "sext_ln544_3_fu_385_p1");
    sc_trace(mVcdFile, tmp_fu_414_p5, "tmp_fu_414_p5");
    sc_trace(mVcdFile, grp_fu_337_ce, "grp_fu_337_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, regslice_both_task_out_V_U_apdone_blk, "regslice_both_task_out_V_U_apdone_blk");
    sc_trace(mVcdFile, ap_block_state34_io, "ap_block_state34_io");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, task_out_V_TDATA_int, "task_out_V_TDATA_int");
    sc_trace(mVcdFile, task_out_V_TVALID_int, "task_out_V_TVALID_int");
    sc_trace(mVcdFile, task_out_V_TREADY_int, "task_out_V_TREADY_int");
    sc_trace(mVcdFile, regslice_both_task_out_V_U_vld_out, "regslice_both_task_out_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_undo_log_entry_V_U_apdone_blk, "regslice_both_undo_log_entry_V_U_apdone_blk");
    sc_trace(mVcdFile, undo_log_entry_V_TDATA_int, "undo_log_entry_V_TDATA_int");
    sc_trace(mVcdFile, undo_log_entry_V_TVALID_int, "undo_log_entry_V_TVALID_int");
    sc_trace(mVcdFile, regslice_both_undo_log_entry_V_U_ack_in, "regslice_both_undo_log_entry_V_U_ack_in");
    sc_trace(mVcdFile, grp_fu_337_p10, "grp_fu_337_p10");
#endif

    }
    mHdltvinHandle.open("mis_enqueue.hdltvin.dat");
    mHdltvoutHandle.open("mis_enqueue.hdltvout.dat");
}

mis_enqueue::~mis_enqueue() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete mis_enqueue_l1_V_m_axi_U;
    delete mis_enqueue_mul_3bkb_U1;
    delete regslice_both_task_out_V_U;
    delete regslice_both_undo_log_entry_V_U;
}

void mis_enqueue::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void mis_enqueue::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void mis_enqueue::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv32_0;
}

void mis_enqueue::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void mis_enqueue::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_1;
}

void mis_enqueue::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void mis_enqueue::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void mis_enqueue::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void mis_enqueue::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && 
         esl_seteq<1,1,1>(ap_block_state33_io.read(), ap_const_boolean_0))) {
        t_V_reg_163 = ngh_cnt_V_1_fu_435_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
                esl_seteq<1,1,1>(l1_V_RVALID.read(), ap_const_logic_1))) {
        t_V_reg_163 = start_n_V_reg_484.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        add_ln544_reg_555 = add_ln544_fu_379_p2.read();
        ret_V_2_reg_550 = grp_fu_337_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(l1_V_RVALID.read(), ap_const_logic_1))) {
        base_degree_V = l1_V_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(l1_V_RVALID.read(), ap_const_logic_1))) {
        base_neighbor_V = l1_V_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(ap_block_state19_io.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_fu_319_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_1_fu_324_p2.read()))) {
        child_ts_V_reg_536 = child_ts_V_fu_342_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(l1_V_RVALID.read(), ap_const_logic_1))) {
        i_V_reg_497 = task_in.read().range(131, 100);
        lhs_V_2_reg_519 = lhs_V_2_fu_311_p1.read();
        n_V_reg_502 = l1_V_RDATA.read();
        ngh_cnt_V_reg_513 = ngh_cnt_V_fu_304_p3.read();
        zext_ln119_1_reg_508 = zext_ln119_1_fu_287_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(ap_block_state19_io.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_fu_319_p2.read()))) {
        icmp_ln887_1_reg_527 = icmp_ln887_1_fu_324_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_fu_319_p2.read()) && esl_seteq<1,1,1>(ap_block_state19_io.read(), ap_const_boolean_0))) {
        icmp_ln887_2_reg_541 = icmp_ln887_2_fu_345_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, initialized_V.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        initialized_V = ap_const_lv1_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        initialized_V_load_reg_450 = initialized_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, initialized_V_load_reg_450.read()) && esl_seteq<1,1,1>(ap_const_logic_0, l1_V_RVALID.read())))) {
        l1_V_addr_3_reg_478 =  (sc_lv<32>) (sext_ln544_fu_249_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        l1_V_addr_4_reg_560 =  (sc_lv<32>) (add_ln544_1_fu_388_p2.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, l1_V_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, task_out_V_TREADY_int.read())))) {
        p_Val2_s_fu_86 = p_Result_s_fu_402_p5.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        ret_V_1_reg_492 = ret_V_1_fu_272_p2.read();
        start_n_V_reg_484 = task_in.read().range(99, 68);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, initialized_V_load_reg_450.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, initialized_V_load_reg_450.read()) && esl_seteq<1,1,1>(ap_const_logic_0, l1_V_RVALID.read())))) {
        total_v_V = l1_V_RDATA.read();
    }
}

void mis_enqueue::thread_add_ln544_1_fu_388_p2() {
    add_ln544_1_fu_388_p2 = (!ret_V_2_reg_550.read().is_01() || !sext_ln544_3_fu_385_p1.read().is_01())? sc_lv<64>(): (sc_biguint<64>(ret_V_2_reg_550.read()) + sc_bigint<64>(sext_ln544_3_fu_385_p1.read()));
}

void mis_enqueue::thread_add_ln544_fu_379_p2() {
    add_ln544_fu_379_p2 = (!sext_ln544_1_fu_371_p1.read().is_01() || !sext_ln544_2_fu_375_p1.read().is_01())? sc_lv<33>(): (sc_bigint<33>(sext_ln544_1_fu_371_p1.read()) + sc_bigint<33>(sext_ln544_2_fu_375_p1.read()));
}

void mis_enqueue::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void mis_enqueue::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void mis_enqueue::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void mis_enqueue::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void mis_enqueue::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void mis_enqueue::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void mis_enqueue::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void mis_enqueue::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void mis_enqueue::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void mis_enqueue::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void mis_enqueue::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void mis_enqueue::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void mis_enqueue::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void mis_enqueue::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void mis_enqueue::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void mis_enqueue::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void mis_enqueue::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void mis_enqueue::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void mis_enqueue::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void mis_enqueue::thread_ap_block_state10() {
    ap_block_state10 = (esl_seteq<1,1,1>(ap_const_lv1_0, initialized_V_load_reg_450.read()) && esl_seteq<1,1,1>(ap_const_logic_0, l1_V_RVALID.read()));
}

void mis_enqueue::thread_ap_block_state19_io() {
    ap_block_state19_io = (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op120_write_state19.read()) && esl_seteq<1,1,1>(ap_const_logic_0, task_out_V_TREADY_int.read()));
}

void mis_enqueue::thread_ap_block_state1_io() {
    ap_block_state1_io = (esl_seteq<1,1,1>(ap_const_lv1_0, initialized_V.read()) && esl_seteq<1,1,1>(ap_const_logic_0, l1_V_ARREADY.read()));
}

void mis_enqueue::thread_ap_block_state33_io() {
    ap_block_state33_io = (esl_seteq<1,1,1>(icmp_ln887_1_reg_527.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, task_out_V_TREADY_int.read()));
}

void mis_enqueue::thread_ap_block_state34_io() {
    ap_block_state34_io = (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_2_reg_541.read()) && esl_seteq<1,1,1>(ap_const_logic_0, task_out_V_TREADY_int.read()));
}

void mis_enqueue::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_task_out_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state34_io.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void mis_enqueue::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mis_enqueue::thread_ap_predicate_op120_write_state19() {
    ap_predicate_op120_write_state19 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_fu_319_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_2_fu_345_p2.read()));
}

void mis_enqueue::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_task_out_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state34_io.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mis_enqueue::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void mis_enqueue::thread_child_ts_V_fu_342_p1() {
    child_ts_V_fu_342_p1 = task_in.read().range(32-1, 0);
}

void mis_enqueue::thread_empty_8_fu_293_p2() {
    empty_8_fu_293_p2 = (!zext_ln119_1_fu_287_p1.read().is_01() || !empty_fu_290_p1.read().is_01())? sc_lv<1>(): (sc_bigint<34>(zext_ln119_1_fu_287_p1.read()) > sc_bigint<34>(empty_fu_290_p1.read()));
}

void mis_enqueue::thread_empty_9_fu_299_p2() {
    empty_9_fu_299_p2 = (!start_n_V_reg_484.read().is_01() || !ap_const_lv32_7.is_01())? sc_lv<32>(): (sc_bigint<32>(start_n_V_reg_484.read()) + sc_biguint<32>(ap_const_lv32_7));
}

void mis_enqueue::thread_empty_fu_290_p1() {
    empty_fu_290_p1 = esl_sext<34,32>(start_n_V_reg_484.read());
}

void mis_enqueue::thread_grp_fu_337_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
          esl_seteq<1,1,1>(ap_block_state19_io.read(), ap_const_boolean_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        grp_fu_337_ce = ap_const_logic_1;
    } else {
        grp_fu_337_ce = ap_const_logic_0;
    }
}

void mis_enqueue::thread_grp_fu_337_p0() {
    grp_fu_337_p0 =  (sc_lv<32>) (lhs_V_2_reg_519.read());
}

void mis_enqueue::thread_grp_fu_337_p1() {
    grp_fu_337_p1 =  (sc_lv<32>) (grp_fu_337_p10.read());
}

void mis_enqueue::thread_grp_fu_337_p10() {
    grp_fu_337_p10 = esl_zext<64,32>(total_v_V.read());
}

void mis_enqueue::thread_i_V_fu_278_p4() {
    i_V_fu_278_p4 = task_in.read().range(131, 100);
}

void mis_enqueue::thread_icmp_ln887_1_fu_324_p2() {
    icmp_ln887_1_fu_324_p2 = (!t_V_reg_163.read().is_01() || !n_V_reg_502.read().is_01())? sc_lv<1>(): (sc_bigint<32>(t_V_reg_163.read()) < sc_bigint<32>(n_V_reg_502.read()));
}

void mis_enqueue::thread_icmp_ln887_2_fu_345_p2() {
    icmp_ln887_2_fu_345_p2 = (!ngh_cnt_V_reg_513.read().is_01() || !n_V_reg_502.read().is_01())? sc_lv<1>(): (sc_bigint<32>(ngh_cnt_V_reg_513.read()) < sc_bigint<32>(n_V_reg_502.read()));
}

void mis_enqueue::thread_icmp_ln887_fu_319_p2() {
    icmp_ln887_fu_319_p2 = (!sext_ln887_fu_315_p1.read().is_01() || !zext_ln119_1_reg_508.read().is_01())? sc_lv<1>(): (sc_bigint<34>(sext_ln887_fu_315_p1.read()) < sc_bigint<34>(zext_ln119_1_reg_508.read()));
}

void mis_enqueue::thread_initialized_V_load_load_fu_173_p1() {
    initialized_V_load_load_fu_173_p1 = initialized_V.read();
}

void mis_enqueue::thread_l1_V_ARADDR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
         esl_seteq<1,1,1>(l1_V_ARREADY.read(), ap_const_logic_1))) {
        l1_V_ARADDR = l1_V_addr_4_reg_560.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                esl_seteq<1,1,1>(l1_V_ARREADY.read(), ap_const_logic_1))) {
        l1_V_ARADDR = l1_V_addr_3_reg_478.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(l1_V_ARREADY.read(), ap_const_logic_1))) {
        l1_V_ARADDR =  (sc_lv<32>) (ap_const_lv64_1);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(l1_V_ARREADY.read(), ap_const_logic_1))) {
        l1_V_ARADDR =  (sc_lv<32>) (ap_const_lv64_5);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, initialized_V.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        l1_V_ARADDR =  (sc_lv<32>) (ap_const_lv64_4);
    } else {
        l1_V_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void mis_enqueue::thread_l1_V_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, initialized_V.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(l1_V_ARREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(l1_V_ARREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(l1_V_ARREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
          esl_seteq<1,1,1>(l1_V_ARREADY.read(), ap_const_logic_1)))) {
        l1_V_ARVALID = ap_const_logic_1;
    } else {
        l1_V_ARVALID = ap_const_logic_0;
    }
}

void mis_enqueue::thread_l1_V_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(l1_V_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(l1_V_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(l1_V_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, initialized_V_load_reg_450.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_0, initialized_V_load_reg_450.read()) && esl_seteq<1,1,1>(ap_const_logic_0, l1_V_RVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, l1_V_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, task_out_V_TREADY_int.read()))))) {
        l1_V_RREADY = ap_const_logic_1;
    } else {
        l1_V_RREADY = ap_const_logic_0;
    }
}

void mis_enqueue::thread_l1_V_blk_n_AR() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, initialized_V.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        l1_V_blk_n_AR = m_axi_l1_V_ARREADY.read();
    } else {
        l1_V_blk_n_AR = ap_const_logic_1;
    }
}

void mis_enqueue::thread_l1_V_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, initialized_V_load_reg_450.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()))) {
        l1_V_blk_n_R = m_axi_l1_V_RVALID.read();
    } else {
        l1_V_blk_n_R = ap_const_logic_1;
    }
}

void mis_enqueue::thread_lhs_V_2_fu_311_p1() {
    lhs_V_2_fu_311_p1 = esl_zext<64,32>(i_V_fu_278_p4.read());
}

void mis_enqueue::thread_lhs_V_fu_235_p1() {
    lhs_V_fu_235_p1 = esl_sext<34,32>(base_degree_V.read());
}

void mis_enqueue::thread_ngh_cnt_V_1_fu_435_p2() {
    ngh_cnt_V_1_fu_435_p2 = (!t_V_reg_163.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(t_V_reg_163.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void mis_enqueue::thread_ngh_cnt_V_fu_304_p3() {
    ngh_cnt_V_fu_304_p3 = (!empty_8_fu_293_p2.read()[0].is_01())? sc_lv<32>(): ((empty_8_fu_293_p2.read()[0].to_bool())? empty_9_fu_299_p2.read(): start_n_V_reg_484.read());
}

void mis_enqueue::thread_p_Result_s_fu_402_p5() {
    p_Result_s_fu_402_p5 = esl_partset<64,64,32,32,32>(p_Val2_s_fu_86.read(), l1_V_RDATA.read(), ap_const_lv32_0, ap_const_lv32_1F);
}

void mis_enqueue::thread_ret_V_1_fu_272_p2() {
    ret_V_1_fu_272_p2 = (!zext_ln119_fu_268_p1.read().is_01() || !ap_const_lv33_7.is_01())? sc_lv<33>(): (sc_biguint<33>(zext_ln119_fu_268_p1.read()) + sc_biguint<33>(ap_const_lv33_7));
}

void mis_enqueue::thread_ret_V_fu_243_p2() {
    ret_V_fu_243_p2 = (!lhs_V_fu_235_p1.read().is_01() || !rhs_V_fu_239_p1.read().is_01())? sc_lv<34>(): (sc_bigint<34>(lhs_V_fu_235_p1.read()) + sc_biguint<34>(rhs_V_fu_239_p1.read()));
}

void mis_enqueue::thread_rhs_V_fu_239_p1() {
    rhs_V_fu_239_p1 = esl_zext<34,32>(vid_V_fu_222_p4.read());
}

void mis_enqueue::thread_sext_ln177_1_fu_362_p1() {
    sext_ln177_1_fu_362_p1 = esl_sext<136,132>(tmp_1_fu_352_p5.read());
}

void mis_enqueue::thread_sext_ln177_fu_425_p1() {
    sext_ln177_fu_425_p1 = esl_sext<136,132>(tmp_fu_414_p5.read());
}

void mis_enqueue::thread_sext_ln544_1_fu_371_p1() {
    sext_ln544_1_fu_371_p1 = esl_sext<33,32>(base_neighbor_V.read());
}

void mis_enqueue::thread_sext_ln544_2_fu_375_p1() {
    sext_ln544_2_fu_375_p1 = esl_sext<33,32>(t_V_reg_163.read());
}

void mis_enqueue::thread_sext_ln544_3_fu_385_p1() {
    sext_ln544_3_fu_385_p1 = esl_sext<64,33>(add_ln544_reg_555.read());
}

void mis_enqueue::thread_sext_ln544_fu_249_p1() {
    sext_ln544_fu_249_p1 = esl_sext<64,34>(ret_V_fu_243_p2.read());
}

void mis_enqueue::thread_sext_ln887_fu_315_p1() {
    sext_ln887_fu_315_p1 = esl_sext<34,32>(t_V_reg_163.read());
}

void mis_enqueue::thread_start_n_V_fu_259_p4() {
    start_n_V_fu_259_p4 = task_in.read().range(99, 68);
}

void mis_enqueue::thread_task_out_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && 
          esl_seteq<1,1,1>(icmp_ln887_1_reg_527.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_fu_319_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_2_fu_345_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_2_reg_541.read())))) {
        task_out_V_TDATA_blk_n = task_out_V_TREADY_int.read();
    } else {
        task_out_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void mis_enqueue::thread_task_out_V_TDATA_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && 
         esl_seteq<1,1,1>(l1_V_RVALID.read(), ap_const_logic_1))) {
        task_out_V_TDATA_int = sext_ln177_fu_425_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
                esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op120_write_state19.read()))) {
        task_out_V_TDATA_int = sext_ln177_1_fu_362_p1.read();
    } else {
        task_out_V_TDATA_int =  (sc_lv<136>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void mis_enqueue::thread_task_out_V_TVALID() {
    task_out_V_TVALID = regslice_both_task_out_V_U_vld_out.read();
}

void mis_enqueue::thread_task_out_V_TVALID_int() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op120_write_state19.read()) && 
          esl_seteq<1,1,1>(ap_block_state19_io.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, l1_V_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, task_out_V_TREADY_int.read()))))) {
        task_out_V_TVALID_int = ap_const_logic_1;
    } else {
        task_out_V_TVALID_int = ap_const_logic_0;
    }
}

void mis_enqueue::thread_tmp_1_fu_352_p5() {
    tmp_1_fu_352_p5 = esl_concat<68,64>(esl_concat<64,4>(esl_concat<32,32>(i_V_reg_497.read(), ngh_cnt_V_reg_513.read()), ap_const_lv4_4), trunc_ln176_fu_349_p1.read());
}

void mis_enqueue::thread_tmp_fu_414_p5() {
    tmp_fu_414_p5 = esl_concat<100,32>(esl_concat<68,32>(esl_concat<64,4>(p_Result_s_fu_402_p5.read(), ap_const_lv4_1), l1_V_RDATA.read()), child_ts_V_reg_536.read());
}

void mis_enqueue::thread_trunc_ln176_fu_349_p1() {
    trunc_ln176_fu_349_p1 = task_in.read().range(64-1, 0);
}

void mis_enqueue::thread_undo_log_entry_V_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, undo_log_entry_V_TVALID.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_undo_log_entry_V_U_ack_in.read()))) {
        undo_log_entry_V_TREADY = ap_const_logic_1;
    } else {
        undo_log_entry_V_TREADY = ap_const_logic_0;
    }
}

void mis_enqueue::thread_vid_V_fu_222_p4() {
    vid_V_fu_222_p4 = task_in.read().range(63, 32);
}

void mis_enqueue::thread_zext_ln119_1_fu_287_p1() {
    zext_ln119_1_fu_287_p1 = esl_zext<34,33>(ret_V_1_reg_492.read());
}

void mis_enqueue::thread_zext_ln119_fu_268_p1() {
    zext_ln119_fu_268_p1 = esl_zext<33,32>(start_n_V_fu_259_p4.read());
}

void mis_enqueue::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())) && esl_seteq<1,1,1>(ap_const_lv1_1, initialized_V_load_load_fu_173_p1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, initialized_V.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(l1_V_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(l1_V_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(l1_V_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(l1_V_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, initialized_V_load_reg_450.read()) && esl_seteq<1,1,1>(ap_const_logic_0, l1_V_RVALID.read())))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(l1_V_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(l1_V_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_state18;
            }
            break;
        case 262144 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_fu_319_p2.read()) && esl_seteq<1,1,1>(ap_block_state19_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state34;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(ap_block_state19_io.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_fu_319_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_1_fu_324_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state33;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(ap_block_state19_io.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_fu_319_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_1_fu_324_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else {
                ap_NS_fsm = ap_ST_fsm_state19;
            }
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && esl_seteq<1,1,1>(l1_V_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_state25;
            }
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, l1_V_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, task_out_V_TREADY_int.read())))) {
                ap_NS_fsm = ap_ST_fsm_state33;
            } else {
                ap_NS_fsm = ap_ST_fsm_state32;
            }
            break;
        case 4294967296 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && esl_seteq<1,1,1>(ap_block_state33_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_state33;
            }
            break;
        case 8589934592 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_task_out_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state34_io.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state34;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<34>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void mis_enqueue::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"task_in\" :  \"" << task_in.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"task_out_V_TDATA\" :  \"" << task_out_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"task_out_V_TVALID\" :  \"" << task_out_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"task_out_V_TREADY\" :  \"" << task_out_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWVALID\" :  \"" << m_axi_l1_V_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_AWREADY\" :  \"" << m_axi_l1_V_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWADDR\" :  \"" << m_axi_l1_V_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWID\" :  \"" << m_axi_l1_V_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWLEN\" :  \"" << m_axi_l1_V_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWSIZE\" :  \"" << m_axi_l1_V_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWBURST\" :  \"" << m_axi_l1_V_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWLOCK\" :  \"" << m_axi_l1_V_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWCACHE\" :  \"" << m_axi_l1_V_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWPROT\" :  \"" << m_axi_l1_V_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWQOS\" :  \"" << m_axi_l1_V_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWREGION\" :  \"" << m_axi_l1_V_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWUSER\" :  \"" << m_axi_l1_V_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_WVALID\" :  \"" << m_axi_l1_V_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_WREADY\" :  \"" << m_axi_l1_V_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_WDATA\" :  \"" << m_axi_l1_V_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_WSTRB\" :  \"" << m_axi_l1_V_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_WLAST\" :  \"" << m_axi_l1_V_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_WID\" :  \"" << m_axi_l1_V_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_WUSER\" :  \"" << m_axi_l1_V_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARVALID\" :  \"" << m_axi_l1_V_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_ARREADY\" :  \"" << m_axi_l1_V_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARADDR\" :  \"" << m_axi_l1_V_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARID\" :  \"" << m_axi_l1_V_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARLEN\" :  \"" << m_axi_l1_V_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARSIZE\" :  \"" << m_axi_l1_V_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARBURST\" :  \"" << m_axi_l1_V_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARLOCK\" :  \"" << m_axi_l1_V_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARCACHE\" :  \"" << m_axi_l1_V_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARPROT\" :  \"" << m_axi_l1_V_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARQOS\" :  \"" << m_axi_l1_V_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARREGION\" :  \"" << m_axi_l1_V_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARUSER\" :  \"" << m_axi_l1_V_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_RVALID\" :  \"" << m_axi_l1_V_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_RREADY\" :  \"" << m_axi_l1_V_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_RDATA\" :  \"" << m_axi_l1_V_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_RLAST\" :  \"" << m_axi_l1_V_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_RID\" :  \"" << m_axi_l1_V_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_RUSER\" :  \"" << m_axi_l1_V_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_RRESP\" :  \"" << m_axi_l1_V_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_BVALID\" :  \"" << m_axi_l1_V_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_BREADY\" :  \"" << m_axi_l1_V_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_BRESP\" :  \"" << m_axi_l1_V_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_BID\" :  \"" << m_axi_l1_V_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_BUSER\" :  \"" << m_axi_l1_V_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"undo_log_entry_V_TDATA\" :  \"" << undo_log_entry_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"undo_log_entry_V_TVALID\" :  \"" << undo_log_entry_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"undo_log_entry_V_TREADY\" :  \"" << undo_log_entry_V_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

