-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mis_hls is
generic (
    C_M_AXI_L1_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_L1_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_L1_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_L1_V_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_L1_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_L1_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_L1_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_L1_V_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_L1_V_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_L1_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_L1_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_L1_V_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    task_in : IN STD_LOGIC_VECTOR (131 downto 0);
    task_out_V_TDATA : OUT STD_LOGIC_VECTOR (135 downto 0);
    task_out_V_TVALID : OUT STD_LOGIC;
    task_out_V_TREADY : IN STD_LOGIC;
    m_axi_l1_V_AWVALID : OUT STD_LOGIC;
    m_axi_l1_V_AWREADY : IN STD_LOGIC;
    m_axi_l1_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_ADDR_WIDTH-1 downto 0);
    m_axi_l1_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_ID_WIDTH-1 downto 0);
    m_axi_l1_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_l1_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_l1_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_l1_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_AWUSER_WIDTH-1 downto 0);
    m_axi_l1_V_WVALID : OUT STD_LOGIC;
    m_axi_l1_V_WREADY : IN STD_LOGIC;
    m_axi_l1_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_DATA_WIDTH-1 downto 0);
    m_axi_l1_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_DATA_WIDTH/8-1 downto 0);
    m_axi_l1_V_WLAST : OUT STD_LOGIC;
    m_axi_l1_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_ID_WIDTH-1 downto 0);
    m_axi_l1_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_WUSER_WIDTH-1 downto 0);
    m_axi_l1_V_ARVALID : OUT STD_LOGIC;
    m_axi_l1_V_ARREADY : IN STD_LOGIC;
    m_axi_l1_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_ADDR_WIDTH-1 downto 0);
    m_axi_l1_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_ID_WIDTH-1 downto 0);
    m_axi_l1_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_l1_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_l1_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_l1_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_ARUSER_WIDTH-1 downto 0);
    m_axi_l1_V_RVALID : IN STD_LOGIC;
    m_axi_l1_V_RREADY : OUT STD_LOGIC;
    m_axi_l1_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_L1_V_DATA_WIDTH-1 downto 0);
    m_axi_l1_V_RLAST : IN STD_LOGIC;
    m_axi_l1_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_L1_V_ID_WIDTH-1 downto 0);
    m_axi_l1_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_L1_V_RUSER_WIDTH-1 downto 0);
    m_axi_l1_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_V_BVALID : IN STD_LOGIC;
    m_axi_l1_V_BREADY : OUT STD_LOGIC;
    m_axi_l1_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_L1_V_ID_WIDTH-1 downto 0);
    m_axi_l1_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_L1_V_BUSER_WIDTH-1 downto 0);
    undo_log_entry_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    undo_log_entry_V_TVALID : OUT STD_LOGIC;
    undo_log_entry_V_TREADY : IN STD_LOGIC );
end;


architecture behav of mis_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mis_hls,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=4,HLS_SYN_FF=1900,HLS_SYN_LUT=2025,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (66 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (66 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (66 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (66 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (66 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (66 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (66 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (66 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (66 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (66 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv33_7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000111";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv36_4 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000100";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal initialized_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal base_flags_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal total_v_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal base_neighbor_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal base_degree_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal task_out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln887_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_1_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln887_1_reg_980 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_2_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln879_reg_956 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_2_reg_989 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal icmp_ln887_4_reg_1130 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal icmp_ln887_3_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_5_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal icmp_ln879_4_reg_1069 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_5_reg_1144 : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_V_blk_n_AR : STD_LOGIC;
    signal initialized_V_load_load_fu_351_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal l1_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal l1_V_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal l1_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal icmp_ln879_1_reg_1003 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln883_reg_1020 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal icmp_ln879_2_reg_1029 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_reg_1050 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal undo_log_entry_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal l1_V_AWVALID : STD_LOGIC;
    signal l1_V_AWREADY : STD_LOGIC;
    signal l1_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal l1_V_WVALID : STD_LOGIC;
    signal l1_V_WREADY : STD_LOGIC;
    signal l1_V_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal l1_V_ARVALID : STD_LOGIC;
    signal l1_V_ARREADY : STD_LOGIC;
    signal l1_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal l1_V_RVALID : STD_LOGIC;
    signal l1_V_RREADY : STD_LOGIC;
    signal l1_V_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal l1_V_RLAST : STD_LOGIC;
    signal l1_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal l1_V_BVALID : STD_LOGIC;
    signal l1_V_BREADY : STD_LOGIC;
    signal l1_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal l1_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_320_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_345 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln879_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_block_state1_io : BOOLEAN;
    signal initialized_V_load_reg_901 : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_V_addr_read_reg_939 : STD_LOGIC_VECTOR (31 downto 0);
    signal l1_V_addr_3_read_reg_944 : STD_LOGIC_VECTOR (31 downto 0);
    signal task_in_ttype_V_load_fu_421_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal task_in_ttype_V_load_reg_949 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_fu_440_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_reg_966 : STD_LOGIC_VECTOR (32 downto 0);
    signal v_V_fu_446_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_V_reg_971 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op146_write_state13 : BOOLEAN;
    signal ap_predicate_op154_write_state13 : BOOLEAN;
    signal ap_block_state13_io : BOOLEAN;
    signal sext_ln177_fu_494_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal sext_ln177_1_fu_533_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal grp_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state14_io : BOOLEAN;
    signal icmp_ln879_1_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op159_write_state15 : BOOLEAN;
    signal ap_block_state15_io : BOOLEAN;
    signal l1_V_addr_4_reg_1007 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_flag_V_reg_1014 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln883_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_2_fu_591_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state26_io : BOOLEAN;
    signal icmp_ln879_2_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op192_writeresp_state31 : BOOLEAN;
    signal ap_block_state31 : BOOLEAN;
    signal grp_fu_336_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal vid_V_reg_1033 : STD_LOGIC_VECTOR (31 downto 0);
    signal l1_V_addr_5_reg_1038 : STD_LOGIC_VECTOR (31 downto 0);
    signal cur_flag_V_reg_1045 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln879_3_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal trunc_ln1503_1_fu_635_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln1503_1_reg_1054 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3_fu_653_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state42_io : BOOLEAN;
    signal sext_ln177_2_fu_676_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal icmp_ln879_4_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op230_writeresp_state47 : BOOLEAN;
    signal ap_block_state47 : BOOLEAN;
    signal l1_V_addr_6_reg_1079 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_fu_714_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_reg_1085 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ret_V_4_fu_741_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_4_reg_1100 : STD_LOGIC_VECTOR (32 downto 0);
    signal n_V_reg_1105 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln177_1_fu_747_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln177_1_reg_1111 : STD_LOGIC_VECTOR (33 downto 0);
    signal ngh_cnt_V_fu_766_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ngh_cnt_V_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_731_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_5_reg_1122 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln887_4_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op284_write_state56 : BOOLEAN;
    signal ap_block_state56_io : BOOLEAN;
    signal add_ln544_fu_800_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln544_reg_1134 : STD_LOGIC_VECTOR (32 downto 0);
    signal child_ts_V_1_fu_806_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal child_ts_V_1_reg_1139 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln177_4_fu_826_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal l1_V_addr_7_reg_1153 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal sext_ln177_3_fu_871_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal ngh_cnt_V_1_fu_881_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state66_io : BOOLEAN;
    signal base_flags_V_loc_0_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal total_v_V_loc_0_reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_child_object_V_phi_fu_303_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal child_object_V_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_1_reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln544_fu_557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_1_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_2_fu_704_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln544_1_fu_834_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_134 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_470_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_1_fu_138 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_2_fu_848_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_329_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln115_fu_436_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln887_fu_452_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_fu_482_p5 : STD_LOGIC_VECTOR (131 downto 0);
    signal p_Result_1_fu_509_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln176_fu_520_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_523_p4 : STD_LOGIC_VECTOR (131 downto 0);
    signal lhs_V_fu_543_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal rhs_V_fu_547_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal ret_V_1_fu_551_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal trunc_ln1503_fu_572_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_9_fu_576_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln1503_fu_585_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal lhs_V_1_fu_606_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal rhs_V_1_fu_610_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal ret_V_2_fu_614_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_s_fu_639_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln1503_1_fu_648_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln176_1_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_667_p4 : STD_LOGIC_VECTOR (131 downto 0);
    signal lhs_V_2_fu_690_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal rhs_V_2_fu_694_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal ret_V_3_fu_698_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_731_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_731_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln177_fu_737_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln177_fu_737_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal empty_fu_750_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_750_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal empty_9_fu_760_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_8_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_9_fu_760_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ngh_cnt_V_fu_766_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln887_fu_774_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln544_3_fu_792_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln544_4_fu_796_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln176_2_fu_813_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_816_p5 : STD_LOGIC_VECTOR (131 downto 0);
    signal sext_ln544_5_fu_831_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_860_p5 : STD_LOGIC_VECTOR (131 downto 0);
    signal grp_fu_731_ce : STD_LOGIC;
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal regslice_both_task_out_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_undo_log_entry_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state67 : BOOLEAN;
    signal ap_predicate_op306_write_state67 : BOOLEAN;
    signal ap_block_state67_io : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (66 downto 0);
    signal ap_block_state43_io : BOOLEAN;
    signal task_out_V_TDATA_int : STD_LOGIC_VECTOR (135 downto 0);
    signal task_out_V_TVALID_int : STD_LOGIC;
    signal task_out_V_TREADY_int : STD_LOGIC;
    signal regslice_both_task_out_V_U_vld_out : STD_LOGIC;
    signal undo_log_entry_V_TDATA_int : STD_LOGIC_VECTOR (63 downto 0);
    signal undo_log_entry_V_TVALID_int : STD_LOGIC;
    signal undo_log_entry_V_TREADY_int : STD_LOGIC;
    signal regslice_both_undo_log_entry_V_U_vld_out : STD_LOGIC;
    signal grp_fu_731_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_731_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component mis_hls_mul_32ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component mis_hls_l1_V_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    mis_hls_l1_V_m_axi_U : component mis_hls_l1_V_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_L1_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_L1_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_L1_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_L1_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_L1_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_L1_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_L1_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_L1_V_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_L1_V_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_L1_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_L1_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_L1_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_l1_V_AWVALID,
        AWREADY => m_axi_l1_V_AWREADY,
        AWADDR => m_axi_l1_V_AWADDR,
        AWID => m_axi_l1_V_AWID,
        AWLEN => m_axi_l1_V_AWLEN,
        AWSIZE => m_axi_l1_V_AWSIZE,
        AWBURST => m_axi_l1_V_AWBURST,
        AWLOCK => m_axi_l1_V_AWLOCK,
        AWCACHE => m_axi_l1_V_AWCACHE,
        AWPROT => m_axi_l1_V_AWPROT,
        AWQOS => m_axi_l1_V_AWQOS,
        AWREGION => m_axi_l1_V_AWREGION,
        AWUSER => m_axi_l1_V_AWUSER,
        WVALID => m_axi_l1_V_WVALID,
        WREADY => m_axi_l1_V_WREADY,
        WDATA => m_axi_l1_V_WDATA,
        WSTRB => m_axi_l1_V_WSTRB,
        WLAST => m_axi_l1_V_WLAST,
        WID => m_axi_l1_V_WID,
        WUSER => m_axi_l1_V_WUSER,
        ARVALID => m_axi_l1_V_ARVALID,
        ARREADY => m_axi_l1_V_ARREADY,
        ARADDR => m_axi_l1_V_ARADDR,
        ARID => m_axi_l1_V_ARID,
        ARLEN => m_axi_l1_V_ARLEN,
        ARSIZE => m_axi_l1_V_ARSIZE,
        ARBURST => m_axi_l1_V_ARBURST,
        ARLOCK => m_axi_l1_V_ARLOCK,
        ARCACHE => m_axi_l1_V_ARCACHE,
        ARPROT => m_axi_l1_V_ARPROT,
        ARQOS => m_axi_l1_V_ARQOS,
        ARREGION => m_axi_l1_V_ARREGION,
        ARUSER => m_axi_l1_V_ARUSER,
        RVALID => m_axi_l1_V_RVALID,
        RREADY => m_axi_l1_V_RREADY,
        RDATA => m_axi_l1_V_RDATA,
        RLAST => m_axi_l1_V_RLAST,
        RID => m_axi_l1_V_RID,
        RUSER => m_axi_l1_V_RUSER,
        RRESP => m_axi_l1_V_RRESP,
        BVALID => m_axi_l1_V_BVALID,
        BREADY => m_axi_l1_V_BREADY,
        BRESP => m_axi_l1_V_BRESP,
        BID => m_axi_l1_V_BID,
        BUSER => m_axi_l1_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => l1_V_ARVALID,
        I_ARREADY => l1_V_ARREADY,
        I_ARADDR => l1_V_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => l1_V_RVALID,
        I_RREADY => l1_V_RREADY,
        I_RDATA => l1_V_RDATA,
        I_RID => l1_V_RID,
        I_RUSER => l1_V_RUSER,
        I_RRESP => l1_V_RRESP,
        I_RLAST => l1_V_RLAST,
        I_AWVALID => l1_V_AWVALID,
        I_AWREADY => l1_V_AWREADY,
        I_AWADDR => l1_V_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => l1_V_WVALID,
        I_WREADY => l1_V_WREADY,
        I_WDATA => l1_V_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => l1_V_BVALID,
        I_BREADY => l1_V_BREADY,
        I_BRESP => l1_V_BRESP,
        I_BID => l1_V_BID,
        I_BUSER => l1_V_BUSER);

    mis_hls_mul_32ns_bkb_U1 : component mis_hls_mul_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_731_p0,
        din1 => grp_fu_731_p1,
        ce => grp_fu_731_ce,
        dout => grp_fu_731_p2);

    regslice_both_task_out_V_U : component regslice_both
    generic map (
        DataWidth => 136)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => task_out_V_TDATA_int,
        vld_in => task_out_V_TVALID_int,
        ack_in => task_out_V_TREADY_int,
        data_out => task_out_V_TDATA,
        vld_out => regslice_both_task_out_V_U_vld_out,
        ack_out => task_out_V_TREADY,
        apdone_blk => regslice_both_task_out_V_U_apdone_blk);

    regslice_both_undo_log_entry_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => undo_log_entry_V_TDATA_int,
        vld_in => undo_log_entry_V_TVALID_int,
        ack_in => undo_log_entry_V_TREADY_int,
        data_out => undo_log_entry_V_TDATA,
        vld_out => regslice_both_undo_log_entry_V_U_vld_out,
        ack_out => undo_log_entry_V_TREADY,
        apdone_blk => regslice_both_undo_log_entry_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    base_flags_V_loc_0_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (initialized_V_load_reg_901 = ap_const_lv1_0))) then 
                base_flags_V_loc_0_reg_280 <= l1_V_addr_read_reg_939;
            elsif ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (initialized_V_load_load_fu_351_p1 = ap_const_lv1_1))) then 
                base_flags_V_loc_0_reg_280 <= base_flags_V;
            end if; 
        end if;
    end process;

    child_object_V_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state14_io) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                child_object_V_reg_300 <= grp_fu_329_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln879_fu_430_p2 = ap_const_lv1_1))) then 
                child_object_V_reg_300 <= task_in(99 downto 68);
            end if; 
        end if;
    end process;

    t_V_1_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state66_io) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                t_V_1_reg_310 <= ngh_cnt_V_1_fu_881_p2;
            elsif (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                t_V_1_reg_310 <= reg_345;
            end if; 
        end if;
    end process;

    total_v_V_loc_0_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (initialized_V_load_reg_901 = ap_const_lv1_0))) then 
                total_v_V_loc_0_reg_290 <= l1_V_addr_3_read_reg_944;
            elsif ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (initialized_V_load_load_fu_351_p1 = ap_const_lv1_1))) then 
                total_v_V_loc_0_reg_290 <= total_v_V;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state56_io) and (ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln887_4_fu_783_p2 = ap_const_lv1_1) and (icmp_ln887_3_fu_778_p2 = ap_const_lv1_1))) then
                add_ln544_reg_1134 <= add_ln544_fu_800_p2;
                child_ts_V_1_reg_1139 <= child_ts_V_1_fu_806_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                base_degree_V <= l1_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                base_flags_V <= l1_V_RDATA;
                l1_V_addr_read_reg_939 <= l1_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                base_neighbor_V <= l1_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                cur_flag_V_reg_1045 <= l1_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                current_flag_V_reg_1014 <= l1_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                i_V_reg_1085 <= task_in(131 downto 100);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state15_io) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                icmp_ln879_1_reg_1003 <= icmp_ln879_1_fu_538_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op192_writeresp_state31 = ap_const_boolean_1) and (l1_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                icmp_ln879_2_reg_1029 <= icmp_ln879_2_fu_601_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                icmp_ln879_3_reg_1050 <= icmp_ln879_3_fu_630_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op230_writeresp_state47 = ap_const_boolean_1) and (l1_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                icmp_ln879_4_reg_1069 <= icmp_ln879_4_fu_681_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                icmp_ln879_reg_956 <= icmp_ln879_fu_430_p2;
                task_in_ttype_V_load_reg_949 <= task_in(67 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                icmp_ln883_reg_1020 <= icmp_ln883_fu_567_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln887_fu_456_p2 = ap_const_lv1_1))) then
                icmp_ln887_1_reg_980 <= icmp_ln887_1_fu_461_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln887_fu_456_p2 = ap_const_lv1_0))) then
                icmp_ln887_2_reg_989 <= icmp_ln887_2_fu_504_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state56_io) and (ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln887_3_fu_778_p2 = ap_const_lv1_1))) then
                icmp_ln887_4_reg_1130 <= icmp_ln887_4_fu_783_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state56_io) and (ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln887_3_fu_778_p2 = ap_const_lv1_0))) then
                icmp_ln887_5_reg_1144 <= icmp_ln887_5_fu_809_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (initialized_V = ap_const_lv1_0))) then
                initialized_V <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                initialized_V_load_reg_901 <= initialized_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                l1_V_addr_3_read_reg_944 <= l1_V_RDATA;
                total_v_V <= l1_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state15_io) and (ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln879_1_fu_538_p2 = ap_const_lv1_1))) then
                l1_V_addr_4_reg_1007 <= sext_ln544_fu_557_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op192_writeresp_state31 = ap_const_boolean_1) and (l1_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln879_2_fu_601_p2 = ap_const_lv1_1))) then
                l1_V_addr_5_reg_1038 <= sext_ln544_1_fu_620_p1(32 - 1 downto 0);
                vid_V_reg_1033 <= task_in(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op230_writeresp_state47 = ap_const_boolean_1) and (l1_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln879_4_fu_681_p2 = ap_const_lv1_1))) then
                l1_V_addr_6_reg_1079 <= sext_ln544_2_fu_704_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                l1_V_addr_7_reg_1153 <= add_ln544_1_fu_834_p2(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                n_V_reg_1105 <= l1_V_RDATA;
                ngh_cnt_V_reg_1116 <= ngh_cnt_V_fu_766_p3;
                ret_V_5_reg_1122 <= grp_fu_731_p2;
                    zext_ln177_1_reg_1111(32 downto 0) <= zext_ln177_1_fu_747_p1(32 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((l1_V_RVALID = ap_const_logic_0) or (task_out_V_TREADY_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                p_Val2_1_fu_138 <= p_Result_2_fu_848_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln887_1_fu_461_p2 = ap_const_lv1_1) and (icmp_ln887_fu_456_p2 = ap_const_lv1_1))) then
                p_Val2_s_fu_134 <= p_Result_s_fu_470_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state54) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln879_fu_430_p2 = ap_const_lv1_1)))) then
                reg_345 <= task_in(99 downto 68);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                ret_V_4_reg_1100 <= ret_V_4_fu_741_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln879_fu_430_p2 = ap_const_lv1_1))) then
                ret_V_reg_966 <= ret_V_fu_440_p2;
                v_V_reg_971 <= v_V_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln879_3_fu_630_p2 = ap_const_lv1_1))) then
                trunc_ln1503_1_reg_1054 <= trunc_ln1503_1_fu_635_p1;
            end if;
        end if;
    end process;
    zext_ln177_1_reg_1111(33) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, initialized_V, ap_CS_fsm_state13, icmp_ln887_fu_456_p2, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state56, icmp_ln887_3_fu_778_p2, ap_CS_fsm_state67, initialized_V_load_load_fu_351_p1, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state55, ap_CS_fsm_state58, ap_CS_fsm_state27, l1_V_AWREADY, l1_V_ARREADY, l1_V_RVALID, l1_V_BVALID, ap_CS_fsm_state12, icmp_ln879_fu_430_p2, ap_block_state1_io, ap_block_state13_io, ap_block_state14_io, icmp_ln879_1_fu_538_p2, ap_block_state15_io, icmp_ln883_fu_567_p2, ap_CS_fsm_state24, ap_block_state26_io, icmp_ln879_2_fu_601_p2, ap_predicate_op192_writeresp_state31, icmp_ln879_3_fu_630_p2, ap_CS_fsm_state40, ap_block_state42_io, icmp_ln879_4_fu_681_p2, ap_predicate_op230_writeresp_state47, icmp_ln887_4_fu_783_p2, ap_block_state56_io, ap_block_state66_io, regslice_both_task_out_V_U_apdone_blk, regslice_both_undo_log_entry_V_U_apdone_blk, ap_block_state67_io, ap_block_state43_io, task_out_V_TREADY_int, undo_log_entry_V_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (initialized_V_load_load_fu_351_p1 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (initialized_V = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln879_fu_430_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln887_fu_456_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln887_fu_456_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_boolean_0 = ap_block_state14_io) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_boolean_0 = ap_block_state15_io) and (ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln879_1_fu_538_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                elsif (((ap_const_boolean_0 = ap_block_state15_io) and (ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln879_1_fu_538_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln883_fu_567_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                if (((l1_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_boolean_0 = ap_block_state26_io) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (undo_log_entry_V_TREADY_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if ((not(((ap_predicate_op192_writeresp_state31 = ap_const_boolean_1) and (l1_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln879_2_fu_601_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                elsif ((not(((ap_predicate_op192_writeresp_state31 = ap_const_boolean_1) and (l1_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln879_2_fu_601_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                if (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln879_3_fu_630_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                if (((l1_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((ap_const_boolean_0 = ap_block_state42_io) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (ap_const_boolean_0 = ap_block_state43_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if ((not(((ap_predicate_op230_writeresp_state47 = ap_const_boolean_1) and (l1_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln879_4_fu_681_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                elsif ((not(((ap_predicate_op230_writeresp_state47 = ap_const_boolean_1) and (l1_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln879_4_fu_681_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                if (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                if (((ap_const_boolean_0 = ap_block_state56_io) and (ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln887_3_fu_778_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                elsif (((ap_const_boolean_0 = ap_block_state56_io) and (ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln887_3_fu_778_p2 = ap_const_lv1_1) and (icmp_ln887_4_fu_783_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                elsif (((ap_const_boolean_0 = ap_block_state56_io) and (ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln887_4_fu_783_p2 = ap_const_lv1_1) and (icmp_ln887_3_fu_778_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                if ((not(((l1_V_RVALID = ap_const_logic_0) or (task_out_V_TREADY_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                if (((ap_const_boolean_0 = ap_block_state66_io) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                if ((not(((ap_const_boolean_1 = ap_block_state67_io) or (regslice_both_undo_log_entry_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_task_out_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln1503_1_fu_648_p2 <= std_logic_vector(unsigned(trunc_ln1503_1_reg_1054) + unsigned(tmp_s_fu_639_p4));
    add_ln1503_fu_585_p2 <= std_logic_vector(unsigned(trunc_ln1503_fu_572_p1) + unsigned(tmp_9_fu_576_p4));
    add_ln544_1_fu_834_p2 <= std_logic_vector(unsigned(ret_V_5_reg_1122) + unsigned(sext_ln544_5_fu_831_p1));
    add_ln544_fu_800_p2 <= std_logic_vector(signed(sext_ln544_3_fu_792_p1) + signed(sext_ln544_4_fu_796_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state13_io_assign_proc : process(ap_predicate_op146_write_state13, ap_predicate_op154_write_state13, task_out_V_TREADY_int)
    begin
                ap_block_state13_io <= (((ap_predicate_op154_write_state13 = ap_const_boolean_1) and (task_out_V_TREADY_int = ap_const_logic_0)) or ((ap_predicate_op146_write_state13 = ap_const_boolean_1) and (task_out_V_TREADY_int = ap_const_logic_0)));
    end process;


    ap_block_state14_io_assign_proc : process(icmp_ln887_1_reg_980, task_out_V_TREADY_int)
    begin
                ap_block_state14_io <= ((task_out_V_TREADY_int = ap_const_logic_0) and (icmp_ln887_1_reg_980 = ap_const_lv1_1));
    end process;


    ap_block_state15_io_assign_proc : process(ap_predicate_op159_write_state15, task_out_V_TREADY_int)
    begin
                ap_block_state15_io <= ((ap_predicate_op159_write_state15 = ap_const_boolean_1) and (task_out_V_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state1_io_assign_proc : process(initialized_V, l1_V_ARREADY)
    begin
                ap_block_state1_io <= ((l1_V_ARREADY = ap_const_logic_0) and (initialized_V = ap_const_lv1_0));
    end process;


    ap_block_state26_io_assign_proc : process(l1_V_WREADY, undo_log_entry_V_TREADY_int)
    begin
                ap_block_state26_io <= ((l1_V_WREADY = ap_const_logic_0) or (undo_log_entry_V_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state31_assign_proc : process(l1_V_BVALID, ap_predicate_op192_writeresp_state31)
    begin
                ap_block_state31 <= ((ap_predicate_op192_writeresp_state31 = ap_const_boolean_1) and (l1_V_BVALID = ap_const_logic_0));
    end process;


    ap_block_state42_io_assign_proc : process(l1_V_WREADY, task_out_V_TREADY_int, undo_log_entry_V_TREADY_int)
    begin
                ap_block_state42_io <= ((l1_V_WREADY = ap_const_logic_0) or (undo_log_entry_V_TREADY_int = ap_const_logic_0) or (task_out_V_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state43_io_assign_proc : process(task_out_V_TREADY_int, undo_log_entry_V_TREADY_int)
    begin
                ap_block_state43_io <= ((undo_log_entry_V_TREADY_int = ap_const_logic_0) or (task_out_V_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state47_assign_proc : process(l1_V_BVALID, ap_predicate_op230_writeresp_state47)
    begin
                ap_block_state47 <= ((ap_predicate_op230_writeresp_state47 = ap_const_boolean_1) and (l1_V_BVALID = ap_const_logic_0));
    end process;


    ap_block_state56_io_assign_proc : process(ap_predicate_op284_write_state56, task_out_V_TREADY_int)
    begin
                ap_block_state56_io <= ((ap_predicate_op284_write_state56 = ap_const_boolean_1) and (task_out_V_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state66_io_assign_proc : process(icmp_ln887_4_reg_1130, task_out_V_TREADY_int)
    begin
                ap_block_state66_io <= ((task_out_V_TREADY_int = ap_const_logic_0) and (icmp_ln887_4_reg_1130 = ap_const_lv1_1));
    end process;


    ap_block_state67_assign_proc : process(regslice_both_task_out_V_U_apdone_blk, regslice_both_undo_log_entry_V_U_apdone_blk)
    begin
                ap_block_state67 <= ((regslice_both_undo_log_entry_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_task_out_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_block_state67_io_assign_proc : process(ap_predicate_op306_write_state67, task_out_V_TREADY_int)
    begin
                ap_block_state67_io <= ((ap_predicate_op306_write_state67 = ap_const_boolean_1) and (task_out_V_TREADY_int = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state67, regslice_both_task_out_V_U_apdone_blk, regslice_both_undo_log_entry_V_U_apdone_blk, ap_block_state67_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state67_io) or (regslice_both_undo_log_entry_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_task_out_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_child_object_V_phi_fu_303_p4 <= child_object_V_reg_300;

    ap_predicate_op146_write_state13_assign_proc : process(icmp_ln887_fu_456_p2, icmp_ln887_1_fu_461_p2)
    begin
                ap_predicate_op146_write_state13 <= ((icmp_ln887_1_fu_461_p2 = ap_const_lv1_1) and (icmp_ln887_fu_456_p2 = ap_const_lv1_1));
    end process;


    ap_predicate_op154_write_state13_assign_proc : process(icmp_ln887_fu_456_p2, icmp_ln887_2_fu_504_p2)
    begin
                ap_predicate_op154_write_state13 <= ((icmp_ln887_2_fu_504_p2 = ap_const_lv1_1) and (icmp_ln887_fu_456_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op159_write_state15_assign_proc : process(icmp_ln879_reg_956, icmp_ln887_2_reg_989)
    begin
                ap_predicate_op159_write_state15 <= ((icmp_ln887_2_reg_989 = ap_const_lv1_1) and (icmp_ln879_reg_956 = ap_const_lv1_1));
    end process;


    ap_predicate_op192_writeresp_state31_assign_proc : process(icmp_ln879_1_reg_1003, icmp_ln883_reg_1020)
    begin
                ap_predicate_op192_writeresp_state31 <= ((icmp_ln879_1_reg_1003 = ap_const_lv1_1) and (icmp_ln883_reg_1020 = ap_const_lv1_0));
    end process;


    ap_predicate_op230_writeresp_state47_assign_proc : process(icmp_ln879_2_reg_1029, icmp_ln879_3_reg_1050)
    begin
                ap_predicate_op230_writeresp_state47 <= ((icmp_ln879_3_reg_1050 = ap_const_lv1_1) and (icmp_ln879_2_reg_1029 = ap_const_lv1_1));
    end process;


    ap_predicate_op284_write_state56_assign_proc : process(icmp_ln887_3_fu_778_p2, icmp_ln887_5_fu_809_p2)
    begin
                ap_predicate_op284_write_state56 <= ((icmp_ln887_5_fu_809_p2 = ap_const_lv1_1) and (icmp_ln887_3_fu_778_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op306_write_state67_assign_proc : process(icmp_ln879_4_reg_1069, icmp_ln887_5_reg_1144)
    begin
                ap_predicate_op306_write_state67 <= ((icmp_ln887_5_reg_1144 = ap_const_lv1_1) and (icmp_ln879_4_reg_1069 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state67, regslice_both_task_out_V_U_apdone_blk, regslice_both_undo_log_entry_V_U_apdone_blk, ap_block_state67_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state67_io) or (regslice_both_undo_log_entry_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_task_out_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    child_ts_V_1_fu_806_p1 <= task_in(32 - 1 downto 0);
    empty_8_fu_754_p2 <= "1" when (signed(zext_ln177_1_fu_747_p1) > signed(empty_fu_750_p1)) else "0";
    empty_9_fu_760_p0 <= reg_345;
    empty_9_fu_760_p2 <= std_logic_vector(signed(empty_9_fu_760_p0) + signed(ap_const_lv32_7));
    empty_fu_750_p0 <= reg_345;
        empty_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_fu_750_p0),34));

    grp_fu_320_p4 <= task_in(99 downto 68);

    grp_fu_329_p0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, ap_phi_mux_child_object_V_phi_fu_303_p4, child_object_V_reg_300)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_329_p0 <= child_object_V_reg_300;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_329_p0 <= ap_phi_mux_child_object_V_phi_fu_303_p4;
        else 
            grp_fu_329_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_329_p2 <= std_logic_vector(unsigned(grp_fu_329_p0) + unsigned(ap_const_lv32_1));
    grp_fu_336_p4 <= task_in(63 downto 32);

    grp_fu_731_ce_assign_proc : process(ap_CS_fsm_state55, l1_V_RVALID, ap_CS_fsm_state54, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or ((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state55)))) then 
            grp_fu_731_ce <= ap_const_logic_1;
        else 
            grp_fu_731_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_731_p0 <= grp_fu_731_p00(32 - 1 downto 0);
    grp_fu_731_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(total_v_V_loc_0_reg_290),64));
    grp_fu_731_p1 <= grp_fu_731_p10(32 - 1 downto 0);
    grp_fu_731_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_V_fu_714_p4),64));
    i_V_fu_714_p4 <= task_in(131 downto 100);
    icmp_ln879_1_fu_538_p2 <= "1" when (task_in_ttype_V_load_reg_949 = ap_const_lv4_1) else "0";
    icmp_ln879_2_fu_601_p2 <= "1" when (task_in_ttype_V_load_reg_949 = ap_const_lv4_2) else "0";
    icmp_ln879_3_fu_630_p2 <= "1" when (cur_flag_V_reg_1045 = ap_const_lv32_0) else "0";
    icmp_ln879_4_fu_681_p2 <= "1" when (task_in_ttype_V_load_reg_949 = ap_const_lv4_4) else "0";
    icmp_ln879_fu_430_p2 <= "1" when (task_in_ttype_V_load_fu_421_p4 = ap_const_lv4_0) else "0";
    icmp_ln883_fu_567_p2 <= "1" when (current_flag_V_reg_1014 = ap_const_lv32_2) else "0";
    icmp_ln887_1_fu_461_p2 <= "1" when (unsigned(child_object_V_reg_300) < unsigned(total_v_V_loc_0_reg_290)) else "0";
    icmp_ln887_2_fu_504_p2 <= "1" when (unsigned(v_V_reg_971) < unsigned(total_v_V_loc_0_reg_290)) else "0";
    icmp_ln887_3_fu_778_p2 <= "1" when (signed(sext_ln887_fu_774_p1) < signed(zext_ln177_1_reg_1111)) else "0";
    icmp_ln887_4_fu_783_p2 <= "1" when (signed(t_V_1_reg_310) < signed(n_V_reg_1105)) else "0";
    icmp_ln887_5_fu_809_p2 <= "1" when (signed(ngh_cnt_V_reg_1116) < signed(n_V_reg_1105)) else "0";
    icmp_ln887_fu_456_p2 <= "1" when (unsigned(zext_ln887_fu_452_p1) < unsigned(ret_V_reg_966)) else "0";
    initialized_V_load_load_fu_351_p1 <= initialized_V;

    l1_V_ARADDR_assign_proc : process(ap_start, ap_CS_fsm_state1, initialized_V, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state16, ap_CS_fsm_state32, ap_CS_fsm_state48, ap_CS_fsm_state58, l1_V_ARREADY, ap_block_state1_io, l1_V_addr_4_reg_1007, l1_V_addr_5_reg_1038, l1_V_addr_6_reg_1079, l1_V_addr_7_reg_1153)
    begin
        if (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            l1_V_ARADDR <= l1_V_addr_7_reg_1153;
        elsif (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            l1_V_ARADDR <= l1_V_addr_6_reg_1079;
        elsif (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            l1_V_ARADDR <= l1_V_addr_5_reg_1038;
        elsif (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            l1_V_ARADDR <= l1_V_addr_4_reg_1007;
        elsif (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            l1_V_ARADDR <= ap_const_lv64_1(32 - 1 downto 0);
        elsif (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            l1_V_ARADDR <= ap_const_lv64_5(32 - 1 downto 0);
        elsif (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            l1_V_ARADDR <= ap_const_lv64_4(32 - 1 downto 0);
        elsif ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (initialized_V = ap_const_lv1_0))) then 
            l1_V_ARADDR <= ap_const_lv64_3(32 - 1 downto 0);
        else 
            l1_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    l1_V_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, initialized_V, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state16, ap_CS_fsm_state32, ap_CS_fsm_state48, ap_CS_fsm_state58, l1_V_ARREADY, ap_block_state1_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (initialized_V = ap_const_lv1_0)) or ((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            l1_V_ARVALID <= ap_const_logic_1;
        else 
            l1_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    l1_V_AWADDR_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state41, l1_V_AWREADY, l1_V_addr_4_reg_1007, l1_V_addr_5_reg_1038)
    begin
        if ((l1_V_AWREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                l1_V_AWADDR <= l1_V_addr_5_reg_1038;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                l1_V_AWADDR <= l1_V_addr_4_reg_1007;
            else 
                l1_V_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            l1_V_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    l1_V_AWVALID_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state41, l1_V_AWREADY)
    begin
        if ((((l1_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((l1_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            l1_V_AWVALID <= ap_const_logic_1;
        else 
            l1_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    l1_V_BREADY_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state47, l1_V_BVALID, ap_predicate_op192_writeresp_state31, ap_predicate_op230_writeresp_state47)
    begin
        if (((not(((ap_predicate_op230_writeresp_state47 = ap_const_boolean_1) and (l1_V_BVALID = ap_const_logic_0))) and (ap_predicate_op230_writeresp_state47 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state47)) or (not(((ap_predicate_op192_writeresp_state31 = ap_const_boolean_1) and (l1_V_BVALID = ap_const_logic_0))) and (ap_predicate_op192_writeresp_state31 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state31)))) then 
            l1_V_BREADY <= ap_const_logic_1;
        else 
            l1_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    l1_V_RREADY_assign_proc : process(ap_CS_fsm_state65, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state39, ap_CS_fsm_state55, l1_V_RVALID, task_out_V_TREADY_int)
    begin
        if ((((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state55)) or ((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((l1_V_RVALID = ap_const_logic_0) or (task_out_V_TREADY_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state65)))) then 
            l1_V_RREADY <= ap_const_logic_1;
        else 
            l1_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    l1_V_WDATA_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            l1_V_WDATA <= ap_const_lv32_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            l1_V_WDATA <= ap_const_lv32_2;
        else 
            l1_V_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    l1_V_WVALID_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state26, ap_block_state26_io, ap_block_state42_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state26_io) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_const_boolean_0 = ap_block_state42_io) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
            l1_V_WVALID <= ap_const_logic_1;
        else 
            l1_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    l1_V_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_l1_V_ARREADY, initialized_V, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state16, ap_CS_fsm_state32, ap_CS_fsm_state48, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (initialized_V = ap_const_lv1_0)))) then 
            l1_V_blk_n_AR <= m_axi_l1_V_ARREADY;
        else 
            l1_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    l1_V_blk_n_AW_assign_proc : process(m_axi_l1_V_AWREADY, ap_CS_fsm_state25, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            l1_V_blk_n_AW <= m_axi_l1_V_AWREADY;
        else 
            l1_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    l1_V_blk_n_B_assign_proc : process(m_axi_l1_V_BVALID, ap_CS_fsm_state31, icmp_ln879_1_reg_1003, icmp_ln883_reg_1020, ap_CS_fsm_state47, icmp_ln879_2_reg_1029, icmp_ln879_3_reg_1050)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln879_3_reg_1050 = ap_const_lv1_1) and (icmp_ln879_2_reg_1029 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln879_1_reg_1003 = ap_const_lv1_1) and (icmp_ln883_reg_1020 = ap_const_lv1_0)))) then 
            l1_V_blk_n_B <= m_axi_l1_V_BVALID;
        else 
            l1_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    l1_V_blk_n_R_assign_proc : process(m_axi_l1_V_RVALID, ap_CS_fsm_state65, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state39, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            l1_V_blk_n_R <= m_axi_l1_V_RVALID;
        else 
            l1_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    l1_V_blk_n_W_assign_proc : process(m_axi_l1_V_WREADY, ap_CS_fsm_state42, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            l1_V_blk_n_W <= m_axi_l1_V_WREADY;
        else 
            l1_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

        lhs_V_1_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(base_flags_V_loc_0_reg_280),34));

        lhs_V_2_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(base_degree_V),34));

        lhs_V_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(base_flags_V_loc_0_reg_280),34));

    ngh_cnt_V_1_fu_881_p2 <= std_logic_vector(signed(t_V_1_reg_310) + signed(ap_const_lv32_1));
    ngh_cnt_V_fu_766_p2 <= reg_345;
    ngh_cnt_V_fu_766_p3 <= 
        empty_9_fu_760_p2 when (empty_8_fu_754_p2(0) = '1') else 
        ngh_cnt_V_fu_766_p2;
    p_Result_1_fu_509_p5 <= (ap_const_lv64_0(63 downto 32) & v_V_reg_971);
    p_Result_2_fu_848_p5 <= (p_Val2_1_fu_138(63 downto 32) & l1_V_RDATA);
    p_Result_s_fu_470_p5 <= (p_Val2_s_fu_134(63 downto 32) & child_object_V_reg_300);
    ret_V_1_fu_551_p2 <= std_logic_vector(signed(lhs_V_fu_543_p1) + signed(rhs_V_fu_547_p1));
    ret_V_2_fu_614_p2 <= std_logic_vector(signed(lhs_V_1_fu_606_p1) + signed(rhs_V_1_fu_610_p1));
    ret_V_3_fu_698_p2 <= std_logic_vector(signed(lhs_V_2_fu_690_p1) + signed(rhs_V_2_fu_694_p1));
    ret_V_4_fu_741_p2 <= std_logic_vector(unsigned(zext_ln177_fu_737_p1) + unsigned(ap_const_lv33_7));
    ret_V_fu_440_p2 <= std_logic_vector(unsigned(zext_ln115_fu_436_p1) + unsigned(ap_const_lv33_7));
    rhs_V_1_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_336_p4),34));
    rhs_V_2_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_336_p4),34));
    rhs_V_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_320_p4),34));
        sext_ln177_1_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_523_p4),136));

        sext_ln177_2_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_667_p4),136));

        sext_ln177_3_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_860_p5),136));

        sext_ln177_4_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_816_p5),136));

        sext_ln177_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_482_p5),136));

        sext_ln544_1_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_2_fu_614_p2),64));

        sext_ln544_2_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_3_fu_698_p2),64));

        sext_ln544_3_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(base_neighbor_V),33));

        sext_ln544_4_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t_V_1_reg_310),33));

        sext_ln544_5_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln544_reg_1134),64));

        sext_ln544_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_1_fu_551_p2),64));

        sext_ln887_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t_V_1_reg_310),34));

    task_in_ttype_V_load_fu_421_p4 <= task_in(67 downto 64);

    task_out_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state13, icmp_ln887_fu_456_p2, icmp_ln887_1_fu_461_p2, ap_CS_fsm_state14, icmp_ln887_1_reg_980, icmp_ln887_2_fu_504_p2, ap_CS_fsm_state15, icmp_ln879_reg_956, icmp_ln887_2_reg_989, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state65, ap_CS_fsm_state66, icmp_ln887_4_reg_1130, ap_CS_fsm_state56, icmp_ln887_3_fu_778_p2, icmp_ln887_5_fu_809_p2, ap_CS_fsm_state67, icmp_ln879_4_reg_1069, icmp_ln887_5_reg_1144, task_out_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or ((ap_const_logic_1 = ap_CS_fsm_state67) and (icmp_ln887_5_reg_1144 = ap_const_lv1_1) and (icmp_ln879_4_reg_1069 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln887_5_fu_809_p2 = ap_const_lv1_1) and (icmp_ln887_3_fu_778_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state66) and (icmp_ln887_4_reg_1130 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln887_2_reg_989 = ap_const_lv1_1) and (icmp_ln879_reg_956 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln887_1_reg_980 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln887_2_fu_504_p2 = ap_const_lv1_1) and (icmp_ln887_fu_456_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln887_1_fu_461_p2 = ap_const_lv1_1) and (icmp_ln887_fu_456_p2 = ap_const_lv1_1)))) then 
            task_out_V_TDATA_blk_n <= task_out_V_TREADY_int;
        else 
            task_out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    task_out_V_TDATA_int_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state42, ap_CS_fsm_state65, ap_CS_fsm_state56, l1_V_RVALID, ap_predicate_op146_write_state13, ap_predicate_op154_write_state13, sext_ln177_fu_494_p1, sext_ln177_1_fu_533_p1, sext_ln177_2_fu_676_p1, ap_predicate_op284_write_state56, sext_ln177_4_fu_826_p1, sext_ln177_3_fu_871_p1)
    begin
        if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            task_out_V_TDATA_int <= sext_ln177_3_fu_871_p1;
        elsif (((ap_predicate_op284_write_state56 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            task_out_V_TDATA_int <= sext_ln177_4_fu_826_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            task_out_V_TDATA_int <= sext_ln177_2_fu_676_p1;
        elsif (((ap_predicate_op154_write_state13 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            task_out_V_TDATA_int <= sext_ln177_1_fu_533_p1;
        elsif (((ap_predicate_op146_write_state13 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            task_out_V_TDATA_int <= sext_ln177_fu_494_p1;
        else 
            task_out_V_TDATA_int <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    task_out_V_TVALID <= regslice_both_task_out_V_U_vld_out;

    task_out_V_TVALID_int_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state42, ap_CS_fsm_state65, ap_CS_fsm_state56, l1_V_RVALID, ap_predicate_op146_write_state13, ap_predicate_op154_write_state13, ap_block_state13_io, ap_block_state42_io, ap_predicate_op284_write_state56, ap_block_state56_io, task_out_V_TREADY_int)
    begin
        if ((((ap_predicate_op284_write_state56 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state56_io) and (ap_const_logic_1 = ap_CS_fsm_state56)) or (not(((l1_V_RVALID = ap_const_logic_0) or (task_out_V_TREADY_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state65)) or ((ap_const_boolean_0 = ap_block_state42_io) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_predicate_op154_write_state13 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_predicate_op146_write_state13 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            task_out_V_TVALID_int <= ap_const_logic_1;
        else 
            task_out_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_523_p4 <= ((p_Result_1_fu_509_p5 & ap_const_lv4_0) & trunc_ln176_fu_520_p1);
    tmp_2_fu_591_p4 <= ((current_flag_V_reg_1014 & add_ln1503_fu_585_p2) & ap_const_lv2_0);
    tmp_3_fu_653_p4 <= ((ap_const_lv32_0 & add_ln1503_1_fu_648_p2) & ap_const_lv2_0);
    tmp_4_fu_667_p4 <= ((vid_V_reg_1033 & ap_const_lv36_4) & trunc_ln176_1_fu_664_p1);
    tmp_5_fu_860_p5 <= (((p_Result_2_fu_848_p5 & ap_const_lv4_1) & l1_V_RDATA) & child_ts_V_1_reg_1139);
    tmp_6_fu_816_p5 <= (((i_V_reg_1085 & ngh_cnt_V_reg_1116) & ap_const_lv4_4) & trunc_ln176_2_fu_813_p1);
    tmp_9_fu_576_p4 <= task_in(97 downto 68);
    tmp_fu_482_p5 <= (((p_Result_s_fu_470_p5 & ap_const_lv4_2) & child_object_V_reg_300) & grp_fu_329_p2);
    tmp_s_fu_639_p4 <= task_in(61 downto 32);
    trunc_ln1503_1_fu_635_p1 <= base_flags_V_loc_0_reg_280(30 - 1 downto 0);
    trunc_ln1503_fu_572_p1 <= base_flags_V_loc_0_reg_280(30 - 1 downto 0);
    trunc_ln176_1_fu_664_p1 <= task_in(64 - 1 downto 0);
    trunc_ln176_2_fu_813_p1 <= task_in(64 - 1 downto 0);
    trunc_ln176_fu_520_p1 <= task_in(64 - 1 downto 0);

    undo_log_entry_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state26, ap_CS_fsm_state27, undo_log_entry_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            undo_log_entry_V_TDATA_blk_n <= undo_log_entry_V_TREADY_int;
        else 
            undo_log_entry_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    undo_log_entry_V_TDATA_int_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state26, tmp_2_fu_591_p4, tmp_3_fu_653_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            undo_log_entry_V_TDATA_int <= tmp_3_fu_653_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            undo_log_entry_V_TDATA_int <= tmp_2_fu_591_p4;
        else 
            undo_log_entry_V_TDATA_int <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    undo_log_entry_V_TVALID <= regslice_both_undo_log_entry_V_U_vld_out;

    undo_log_entry_V_TVALID_int_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state26, ap_block_state26_io, ap_block_state42_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state26_io) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_const_boolean_0 = ap_block_state42_io) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
            undo_log_entry_V_TVALID_int <= ap_const_logic_1;
        else 
            undo_log_entry_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    v_V_fu_446_p2 <= std_logic_vector(unsigned(grp_fu_320_p4) + unsigned(ap_const_lv32_7));
    zext_ln115_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_320_p4),33));
    zext_ln177_1_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_4_reg_1100),34));
    zext_ln177_fu_737_p0 <= grp_fu_320_p4;
    zext_ln177_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln177_fu_737_p0),33));
    zext_ln887_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(child_object_V_reg_300),33));
end behav;
