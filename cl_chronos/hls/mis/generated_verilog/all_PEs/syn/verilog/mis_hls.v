// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mis_hls,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=4,HLS_SYN_FF=1900,HLS_SYN_LUT=2025,HLS_VERSION=2019_2}" *)

module mis_hls (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        task_in,
        task_out_V_TDATA,
        task_out_V_TVALID,
        task_out_V_TREADY,
        m_axi_l1_V_AWVALID,
        m_axi_l1_V_AWREADY,
        m_axi_l1_V_AWADDR,
        m_axi_l1_V_AWID,
        m_axi_l1_V_AWLEN,
        m_axi_l1_V_AWSIZE,
        m_axi_l1_V_AWBURST,
        m_axi_l1_V_AWLOCK,
        m_axi_l1_V_AWCACHE,
        m_axi_l1_V_AWPROT,
        m_axi_l1_V_AWQOS,
        m_axi_l1_V_AWREGION,
        m_axi_l1_V_AWUSER,
        m_axi_l1_V_WVALID,
        m_axi_l1_V_WREADY,
        m_axi_l1_V_WDATA,
        m_axi_l1_V_WSTRB,
        m_axi_l1_V_WLAST,
        m_axi_l1_V_WID,
        m_axi_l1_V_WUSER,
        m_axi_l1_V_ARVALID,
        m_axi_l1_V_ARREADY,
        m_axi_l1_V_ARADDR,
        m_axi_l1_V_ARID,
        m_axi_l1_V_ARLEN,
        m_axi_l1_V_ARSIZE,
        m_axi_l1_V_ARBURST,
        m_axi_l1_V_ARLOCK,
        m_axi_l1_V_ARCACHE,
        m_axi_l1_V_ARPROT,
        m_axi_l1_V_ARQOS,
        m_axi_l1_V_ARREGION,
        m_axi_l1_V_ARUSER,
        m_axi_l1_V_RVALID,
        m_axi_l1_V_RREADY,
        m_axi_l1_V_RDATA,
        m_axi_l1_V_RLAST,
        m_axi_l1_V_RID,
        m_axi_l1_V_RUSER,
        m_axi_l1_V_RRESP,
        m_axi_l1_V_BVALID,
        m_axi_l1_V_BREADY,
        m_axi_l1_V_BRESP,
        m_axi_l1_V_BID,
        m_axi_l1_V_BUSER,
        undo_log_entry_V_TDATA,
        undo_log_entry_V_TVALID,
        undo_log_entry_V_TREADY
);

parameter    ap_ST_fsm_state1 = 67'd1;
parameter    ap_ST_fsm_state2 = 67'd2;
parameter    ap_ST_fsm_state3 = 67'd4;
parameter    ap_ST_fsm_state4 = 67'd8;
parameter    ap_ST_fsm_state5 = 67'd16;
parameter    ap_ST_fsm_state6 = 67'd32;
parameter    ap_ST_fsm_state7 = 67'd64;
parameter    ap_ST_fsm_state8 = 67'd128;
parameter    ap_ST_fsm_state9 = 67'd256;
parameter    ap_ST_fsm_state10 = 67'd512;
parameter    ap_ST_fsm_state11 = 67'd1024;
parameter    ap_ST_fsm_state12 = 67'd2048;
parameter    ap_ST_fsm_state13 = 67'd4096;
parameter    ap_ST_fsm_state14 = 67'd8192;
parameter    ap_ST_fsm_state15 = 67'd16384;
parameter    ap_ST_fsm_state16 = 67'd32768;
parameter    ap_ST_fsm_state17 = 67'd65536;
parameter    ap_ST_fsm_state18 = 67'd131072;
parameter    ap_ST_fsm_state19 = 67'd262144;
parameter    ap_ST_fsm_state20 = 67'd524288;
parameter    ap_ST_fsm_state21 = 67'd1048576;
parameter    ap_ST_fsm_state22 = 67'd2097152;
parameter    ap_ST_fsm_state23 = 67'd4194304;
parameter    ap_ST_fsm_state24 = 67'd8388608;
parameter    ap_ST_fsm_state25 = 67'd16777216;
parameter    ap_ST_fsm_state26 = 67'd33554432;
parameter    ap_ST_fsm_state27 = 67'd67108864;
parameter    ap_ST_fsm_state28 = 67'd134217728;
parameter    ap_ST_fsm_state29 = 67'd268435456;
parameter    ap_ST_fsm_state30 = 67'd536870912;
parameter    ap_ST_fsm_state31 = 67'd1073741824;
parameter    ap_ST_fsm_state32 = 67'd2147483648;
parameter    ap_ST_fsm_state33 = 67'd4294967296;
parameter    ap_ST_fsm_state34 = 67'd8589934592;
parameter    ap_ST_fsm_state35 = 67'd17179869184;
parameter    ap_ST_fsm_state36 = 67'd34359738368;
parameter    ap_ST_fsm_state37 = 67'd68719476736;
parameter    ap_ST_fsm_state38 = 67'd137438953472;
parameter    ap_ST_fsm_state39 = 67'd274877906944;
parameter    ap_ST_fsm_state40 = 67'd549755813888;
parameter    ap_ST_fsm_state41 = 67'd1099511627776;
parameter    ap_ST_fsm_state42 = 67'd2199023255552;
parameter    ap_ST_fsm_state43 = 67'd4398046511104;
parameter    ap_ST_fsm_state44 = 67'd8796093022208;
parameter    ap_ST_fsm_state45 = 67'd17592186044416;
parameter    ap_ST_fsm_state46 = 67'd35184372088832;
parameter    ap_ST_fsm_state47 = 67'd70368744177664;
parameter    ap_ST_fsm_state48 = 67'd140737488355328;
parameter    ap_ST_fsm_state49 = 67'd281474976710656;
parameter    ap_ST_fsm_state50 = 67'd562949953421312;
parameter    ap_ST_fsm_state51 = 67'd1125899906842624;
parameter    ap_ST_fsm_state52 = 67'd2251799813685248;
parameter    ap_ST_fsm_state53 = 67'd4503599627370496;
parameter    ap_ST_fsm_state54 = 67'd9007199254740992;
parameter    ap_ST_fsm_state55 = 67'd18014398509481984;
parameter    ap_ST_fsm_state56 = 67'd36028797018963968;
parameter    ap_ST_fsm_state57 = 67'd72057594037927936;
parameter    ap_ST_fsm_state58 = 67'd144115188075855872;
parameter    ap_ST_fsm_state59 = 67'd288230376151711744;
parameter    ap_ST_fsm_state60 = 67'd576460752303423488;
parameter    ap_ST_fsm_state61 = 67'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 67'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 67'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 67'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 67'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 67'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 67'd73786976294838206464;
parameter    C_M_AXI_L1_V_ID_WIDTH = 1;
parameter    C_M_AXI_L1_V_ADDR_WIDTH = 32;
parameter    C_M_AXI_L1_V_DATA_WIDTH = 32;
parameter    C_M_AXI_L1_V_AWUSER_WIDTH = 1;
parameter    C_M_AXI_L1_V_ARUSER_WIDTH = 1;
parameter    C_M_AXI_L1_V_WUSER_WIDTH = 1;
parameter    C_M_AXI_L1_V_RUSER_WIDTH = 1;
parameter    C_M_AXI_L1_V_BUSER_WIDTH = 1;
parameter    C_M_AXI_L1_V_TARGET_ADDR = 0;
parameter    C_M_AXI_L1_V_USER_VALUE = 0;
parameter    C_M_AXI_L1_V_PROT_VALUE = 0;
parameter    C_M_AXI_L1_V_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_M_AXI_L1_V_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter    ap_const_lv64_0 = 64'd0;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [131:0] task_in;
output  [135:0] task_out_V_TDATA;
output   task_out_V_TVALID;
input   task_out_V_TREADY;
output   m_axi_l1_V_AWVALID;
input   m_axi_l1_V_AWREADY;
output  [C_M_AXI_L1_V_ADDR_WIDTH - 1:0] m_axi_l1_V_AWADDR;
output  [C_M_AXI_L1_V_ID_WIDTH - 1:0] m_axi_l1_V_AWID;
output  [7:0] m_axi_l1_V_AWLEN;
output  [2:0] m_axi_l1_V_AWSIZE;
output  [1:0] m_axi_l1_V_AWBURST;
output  [1:0] m_axi_l1_V_AWLOCK;
output  [3:0] m_axi_l1_V_AWCACHE;
output  [2:0] m_axi_l1_V_AWPROT;
output  [3:0] m_axi_l1_V_AWQOS;
output  [3:0] m_axi_l1_V_AWREGION;
output  [C_M_AXI_L1_V_AWUSER_WIDTH - 1:0] m_axi_l1_V_AWUSER;
output   m_axi_l1_V_WVALID;
input   m_axi_l1_V_WREADY;
output  [C_M_AXI_L1_V_DATA_WIDTH - 1:0] m_axi_l1_V_WDATA;
output  [C_M_AXI_L1_V_WSTRB_WIDTH - 1:0] m_axi_l1_V_WSTRB;
output   m_axi_l1_V_WLAST;
output  [C_M_AXI_L1_V_ID_WIDTH - 1:0] m_axi_l1_V_WID;
output  [C_M_AXI_L1_V_WUSER_WIDTH - 1:0] m_axi_l1_V_WUSER;
output   m_axi_l1_V_ARVALID;
input   m_axi_l1_V_ARREADY;
output  [C_M_AXI_L1_V_ADDR_WIDTH - 1:0] m_axi_l1_V_ARADDR;
output  [C_M_AXI_L1_V_ID_WIDTH - 1:0] m_axi_l1_V_ARID;
output  [7:0] m_axi_l1_V_ARLEN;
output  [2:0] m_axi_l1_V_ARSIZE;
output  [1:0] m_axi_l1_V_ARBURST;
output  [1:0] m_axi_l1_V_ARLOCK;
output  [3:0] m_axi_l1_V_ARCACHE;
output  [2:0] m_axi_l1_V_ARPROT;
output  [3:0] m_axi_l1_V_ARQOS;
output  [3:0] m_axi_l1_V_ARREGION;
output  [C_M_AXI_L1_V_ARUSER_WIDTH - 1:0] m_axi_l1_V_ARUSER;
input   m_axi_l1_V_RVALID;
output   m_axi_l1_V_RREADY;
input  [C_M_AXI_L1_V_DATA_WIDTH - 1:0] m_axi_l1_V_RDATA;
input   m_axi_l1_V_RLAST;
input  [C_M_AXI_L1_V_ID_WIDTH - 1:0] m_axi_l1_V_RID;
input  [C_M_AXI_L1_V_RUSER_WIDTH - 1:0] m_axi_l1_V_RUSER;
input  [1:0] m_axi_l1_V_RRESP;
input   m_axi_l1_V_BVALID;
output   m_axi_l1_V_BREADY;
input  [1:0] m_axi_l1_V_BRESP;
input  [C_M_AXI_L1_V_ID_WIDTH - 1:0] m_axi_l1_V_BID;
input  [C_M_AXI_L1_V_BUSER_WIDTH - 1:0] m_axi_l1_V_BUSER;
output  [63:0] undo_log_entry_V_TDATA;
output   undo_log_entry_V_TVALID;
input   undo_log_entry_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [66:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] initialized_V;
reg   [31:0] base_flags_V;
reg   [31:0] total_v_V;
reg   [31:0] base_neighbor_V;
reg   [31:0] base_degree_V;
reg    task_out_V_TDATA_blk_n;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln887_fu_456_p2;
wire   [0:0] icmp_ln887_1_fu_461_p2;
wire    ap_CS_fsm_state14;
reg   [0:0] icmp_ln887_1_reg_980;
wire   [0:0] icmp_ln887_2_fu_504_p2;
wire    ap_CS_fsm_state15;
reg   [0:0] icmp_ln879_reg_956;
reg   [0:0] icmp_ln887_2_reg_989;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state66;
reg   [0:0] icmp_ln887_4_reg_1130;
wire    ap_CS_fsm_state56;
wire   [0:0] icmp_ln887_3_fu_778_p2;
wire   [0:0] icmp_ln887_5_fu_809_p2;
wire    ap_CS_fsm_state67;
reg   [0:0] icmp_ln879_4_reg_1069;
reg   [0:0] icmp_ln887_5_reg_1144;
reg    l1_V_blk_n_AR;
wire   [0:0] initialized_V_load_load_fu_351_p1;
reg    l1_V_blk_n_R;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state23;
reg    l1_V_blk_n_AW;
wire    ap_CS_fsm_state25;
reg    l1_V_blk_n_W;
wire    ap_CS_fsm_state26;
reg    l1_V_blk_n_B;
wire    ap_CS_fsm_state31;
reg   [0:0] icmp_ln879_1_reg_1003;
reg   [0:0] icmp_ln883_reg_1020;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state47;
reg   [0:0] icmp_ln879_2_reg_1029;
reg   [0:0] icmp_ln879_3_reg_1050;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state58;
reg    undo_log_entry_V_TDATA_blk_n;
wire    ap_CS_fsm_state27;
reg    l1_V_AWVALID;
wire    l1_V_AWREADY;
reg   [31:0] l1_V_AWADDR;
reg    l1_V_WVALID;
wire    l1_V_WREADY;
reg   [31:0] l1_V_WDATA;
reg    l1_V_ARVALID;
wire    l1_V_ARREADY;
reg   [31:0] l1_V_ARADDR;
wire    l1_V_RVALID;
reg    l1_V_RREADY;
wire   [31:0] l1_V_RDATA;
wire    l1_V_RLAST;
wire   [0:0] l1_V_RID;
wire   [0:0] l1_V_RUSER;
wire   [1:0] l1_V_RRESP;
wire    l1_V_BVALID;
reg    l1_V_BREADY;
wire   [1:0] l1_V_BRESP;
wire   [0:0] l1_V_BID;
wire   [0:0] l1_V_BUSER;
wire   [31:0] grp_fu_320_p4;
reg   [31:0] reg_345;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln879_fu_430_p2;
wire    ap_CS_fsm_state54;
reg    ap_block_state1_io;
reg   [0:0] initialized_V_load_reg_901;
reg   [31:0] l1_V_addr_read_reg_939;
reg   [31:0] l1_V_addr_3_read_reg_944;
wire   [3:0] task_in_ttype_V_load_fu_421_p4;
reg   [3:0] task_in_ttype_V_load_reg_949;
wire   [32:0] ret_V_fu_440_p2;
reg   [32:0] ret_V_reg_966;
wire   [31:0] v_V_fu_446_p2;
reg   [31:0] v_V_reg_971;
reg    ap_predicate_op146_write_state13;
reg    ap_predicate_op154_write_state13;
reg    ap_block_state13_io;
wire  signed [135:0] sext_ln177_fu_494_p1;
wire  signed [135:0] sext_ln177_1_fu_533_p1;
wire   [31:0] grp_fu_329_p2;
reg    ap_block_state14_io;
wire   [0:0] icmp_ln879_1_fu_538_p2;
reg    ap_predicate_op159_write_state15;
reg    ap_block_state15_io;
reg   [31:0] l1_V_addr_4_reg_1007;
reg   [31:0] current_flag_V_reg_1014;
wire   [0:0] icmp_ln883_fu_567_p2;
wire    ap_CS_fsm_state24;
wire   [63:0] tmp_2_fu_591_p4;
reg    ap_block_state26_io;
wire   [0:0] icmp_ln879_2_fu_601_p2;
reg    ap_predicate_op192_writeresp_state31;
reg    ap_block_state31;
wire   [31:0] grp_fu_336_p4;
reg   [31:0] vid_V_reg_1033;
reg   [31:0] l1_V_addr_5_reg_1038;
reg   [31:0] cur_flag_V_reg_1045;
wire   [0:0] icmp_ln879_3_fu_630_p2;
wire    ap_CS_fsm_state40;
wire   [29:0] trunc_ln1503_1_fu_635_p1;
reg   [29:0] trunc_ln1503_1_reg_1054;
wire   [63:0] tmp_3_fu_653_p4;
reg    ap_block_state42_io;
wire  signed [135:0] sext_ln177_2_fu_676_p1;
wire   [0:0] icmp_ln879_4_fu_681_p2;
reg    ap_predicate_op230_writeresp_state47;
reg    ap_block_state47;
reg   [31:0] l1_V_addr_6_reg_1079;
wire   [31:0] i_V_fu_714_p4;
reg   [31:0] i_V_reg_1085;
wire    ap_CS_fsm_state51;
wire   [32:0] ret_V_4_fu_741_p2;
reg   [32:0] ret_V_4_reg_1100;
reg   [31:0] n_V_reg_1105;
wire   [33:0] zext_ln177_1_fu_747_p1;
reg   [33:0] zext_ln177_1_reg_1111;
wire   [31:0] ngh_cnt_V_fu_766_p3;
reg   [31:0] ngh_cnt_V_reg_1116;
wire   [63:0] grp_fu_731_p2;
reg   [63:0] ret_V_5_reg_1122;
wire   [0:0] icmp_ln887_4_fu_783_p2;
reg    ap_predicate_op284_write_state56;
reg    ap_block_state56_io;
wire   [32:0] add_ln544_fu_800_p2;
reg   [32:0] add_ln544_reg_1134;
wire   [31:0] child_ts_V_1_fu_806_p1;
reg   [31:0] child_ts_V_1_reg_1139;
wire  signed [135:0] sext_ln177_4_fu_826_p1;
reg   [31:0] l1_V_addr_7_reg_1153;
wire    ap_CS_fsm_state57;
wire  signed [135:0] sext_ln177_3_fu_871_p1;
wire   [31:0] ngh_cnt_V_1_fu_881_p2;
reg    ap_block_state66_io;
reg  signed [31:0] base_flags_V_loc_0_reg_280;
reg   [31:0] total_v_V_loc_0_reg_290;
wire   [31:0] ap_phi_mux_child_object_V_phi_fu_303_p4;
reg   [31:0] child_object_V_reg_300;
reg  signed [31:0] t_V_1_reg_310;
wire  signed [63:0] sext_ln544_fu_557_p1;
wire  signed [63:0] sext_ln544_1_fu_620_p1;
wire  signed [63:0] sext_ln544_2_fu_704_p1;
wire   [63:0] add_ln544_1_fu_834_p2;
reg   [63:0] p_Val2_s_fu_134;
wire   [63:0] p_Result_s_fu_470_p5;
reg   [63:0] p_Val2_1_fu_138;
wire   [63:0] p_Result_2_fu_848_p5;
reg   [31:0] grp_fu_329_p0;
wire   [32:0] zext_ln115_fu_436_p1;
wire   [32:0] zext_ln887_fu_452_p1;
wire   [131:0] tmp_fu_482_p5;
wire   [63:0] p_Result_1_fu_509_p5;
wire   [63:0] trunc_ln176_fu_520_p1;
wire   [131:0] tmp_1_fu_523_p4;
wire  signed [33:0] lhs_V_fu_543_p1;
wire   [33:0] rhs_V_fu_547_p1;
wire   [33:0] ret_V_1_fu_551_p2;
wire   [29:0] trunc_ln1503_fu_572_p1;
wire   [29:0] tmp_9_fu_576_p4;
wire   [29:0] add_ln1503_fu_585_p2;
wire  signed [33:0] lhs_V_1_fu_606_p1;
wire   [33:0] rhs_V_1_fu_610_p1;
wire   [33:0] ret_V_2_fu_614_p2;
wire   [29:0] tmp_s_fu_639_p4;
wire   [29:0] add_ln1503_1_fu_648_p2;
wire   [63:0] trunc_ln176_1_fu_664_p1;
wire   [131:0] tmp_4_fu_667_p4;
wire  signed [33:0] lhs_V_2_fu_690_p1;
wire   [33:0] rhs_V_2_fu_694_p1;
wire   [33:0] ret_V_3_fu_698_p2;
wire   [31:0] grp_fu_731_p0;
wire   [31:0] grp_fu_731_p1;
wire  signed [31:0] zext_ln177_fu_737_p0;
wire   [32:0] zext_ln177_fu_737_p1;
wire  signed [31:0] empty_fu_750_p0;
wire  signed [33:0] empty_fu_750_p1;
wire  signed [31:0] empty_9_fu_760_p0;
wire   [0:0] empty_8_fu_754_p2;
wire   [31:0] empty_9_fu_760_p2;
wire  signed [31:0] ngh_cnt_V_fu_766_p2;
wire  signed [33:0] sext_ln887_fu_774_p1;
wire  signed [32:0] sext_ln544_3_fu_792_p1;
wire  signed [32:0] sext_ln544_4_fu_796_p1;
wire   [63:0] trunc_ln176_2_fu_813_p1;
wire   [131:0] tmp_6_fu_816_p5;
wire  signed [63:0] sext_ln544_5_fu_831_p1;
wire   [131:0] tmp_5_fu_860_p5;
reg    grp_fu_731_ce;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    regslice_both_task_out_V_U_apdone_blk;
wire    regslice_both_undo_log_entry_V_U_apdone_blk;
reg    ap_block_state67;
reg    ap_predicate_op306_write_state67;
reg    ap_block_state67_io;
reg   [66:0] ap_NS_fsm;
reg    ap_block_state43_io;
reg   [135:0] task_out_V_TDATA_int;
reg    task_out_V_TVALID_int;
wire    task_out_V_TREADY_int;
wire    regslice_both_task_out_V_U_vld_out;
reg   [63:0] undo_log_entry_V_TDATA_int;
reg    undo_log_entry_V_TVALID_int;
wire    undo_log_entry_V_TREADY_int;
wire    regslice_both_undo_log_entry_V_U_vld_out;
wire   [63:0] grp_fu_731_p00;
wire   [63:0] grp_fu_731_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 67'd1;
#0 initialized_V = 1'd0;
#0 base_flags_V = 32'd0;
#0 total_v_V = 32'd0;
#0 base_neighbor_V = 32'd0;
#0 base_degree_V = 32'd0;
end

mis_hls_l1_V_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_L1_V_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_L1_V_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_L1_V_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_L1_V_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_L1_V_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_L1_V_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_L1_V_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_L1_V_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_L1_V_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_L1_V_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_L1_V_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_L1_V_CACHE_VALUE ))
mis_hls_l1_V_m_axi_U(
    .AWVALID(m_axi_l1_V_AWVALID),
    .AWREADY(m_axi_l1_V_AWREADY),
    .AWADDR(m_axi_l1_V_AWADDR),
    .AWID(m_axi_l1_V_AWID),
    .AWLEN(m_axi_l1_V_AWLEN),
    .AWSIZE(m_axi_l1_V_AWSIZE),
    .AWBURST(m_axi_l1_V_AWBURST),
    .AWLOCK(m_axi_l1_V_AWLOCK),
    .AWCACHE(m_axi_l1_V_AWCACHE),
    .AWPROT(m_axi_l1_V_AWPROT),
    .AWQOS(m_axi_l1_V_AWQOS),
    .AWREGION(m_axi_l1_V_AWREGION),
    .AWUSER(m_axi_l1_V_AWUSER),
    .WVALID(m_axi_l1_V_WVALID),
    .WREADY(m_axi_l1_V_WREADY),
    .WDATA(m_axi_l1_V_WDATA),
    .WSTRB(m_axi_l1_V_WSTRB),
    .WLAST(m_axi_l1_V_WLAST),
    .WID(m_axi_l1_V_WID),
    .WUSER(m_axi_l1_V_WUSER),
    .ARVALID(m_axi_l1_V_ARVALID),
    .ARREADY(m_axi_l1_V_ARREADY),
    .ARADDR(m_axi_l1_V_ARADDR),
    .ARID(m_axi_l1_V_ARID),
    .ARLEN(m_axi_l1_V_ARLEN),
    .ARSIZE(m_axi_l1_V_ARSIZE),
    .ARBURST(m_axi_l1_V_ARBURST),
    .ARLOCK(m_axi_l1_V_ARLOCK),
    .ARCACHE(m_axi_l1_V_ARCACHE),
    .ARPROT(m_axi_l1_V_ARPROT),
    .ARQOS(m_axi_l1_V_ARQOS),
    .ARREGION(m_axi_l1_V_ARREGION),
    .ARUSER(m_axi_l1_V_ARUSER),
    .RVALID(m_axi_l1_V_RVALID),
    .RREADY(m_axi_l1_V_RREADY),
    .RDATA(m_axi_l1_V_RDATA),
    .RLAST(m_axi_l1_V_RLAST),
    .RID(m_axi_l1_V_RID),
    .RUSER(m_axi_l1_V_RUSER),
    .RRESP(m_axi_l1_V_RRESP),
    .BVALID(m_axi_l1_V_BVALID),
    .BREADY(m_axi_l1_V_BREADY),
    .BRESP(m_axi_l1_V_BRESP),
    .BID(m_axi_l1_V_BID),
    .BUSER(m_axi_l1_V_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(l1_V_ARVALID),
    .I_ARREADY(l1_V_ARREADY),
    .I_ARADDR(l1_V_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(l1_V_RVALID),
    .I_RREADY(l1_V_RREADY),
    .I_RDATA(l1_V_RDATA),
    .I_RID(l1_V_RID),
    .I_RUSER(l1_V_RUSER),
    .I_RRESP(l1_V_RRESP),
    .I_RLAST(l1_V_RLAST),
    .I_AWVALID(l1_V_AWVALID),
    .I_AWREADY(l1_V_AWREADY),
    .I_AWADDR(l1_V_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(l1_V_WVALID),
    .I_WREADY(l1_V_WREADY),
    .I_WDATA(l1_V_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(l1_V_BVALID),
    .I_BREADY(l1_V_BREADY),
    .I_BRESP(l1_V_BRESP),
    .I_BID(l1_V_BID),
    .I_BUSER(l1_V_BUSER)
);

mis_hls_mul_32ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mis_hls_mul_32ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_731_p0),
    .din1(grp_fu_731_p1),
    .ce(grp_fu_731_ce),
    .dout(grp_fu_731_p2)
);

regslice_both #(
    .DataWidth( 136 ))
regslice_both_task_out_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(task_out_V_TDATA_int),
    .vld_in(task_out_V_TVALID_int),
    .ack_in(task_out_V_TREADY_int),
    .data_out(task_out_V_TDATA),
    .vld_out(regslice_both_task_out_V_U_vld_out),
    .ack_out(task_out_V_TREADY),
    .apdone_blk(regslice_both_task_out_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_undo_log_entry_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(undo_log_entry_V_TDATA_int),
    .vld_in(undo_log_entry_V_TVALID_int),
    .ack_in(undo_log_entry_V_TREADY_int),
    .data_out(undo_log_entry_V_TDATA),
    .vld_out(regslice_both_undo_log_entry_V_U_vld_out),
    .ack_out(undo_log_entry_V_TREADY),
    .apdone_blk(regslice_both_undo_log_entry_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (initialized_V_load_reg_901 == 1'd0))) begin
        base_flags_V_loc_0_reg_280 <= l1_V_addr_read_reg_939;
    end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (initialized_V_load_load_fu_351_p1 == 1'd1))) begin
        base_flags_V_loc_0_reg_280 <= base_flags_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14))) begin
        child_object_V_reg_300 <= grp_fu_329_p2;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln879_fu_430_p2 == 1'd1))) begin
        child_object_V_reg_300 <= {{task_in[99:68]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state66_io) & (1'b1 == ap_CS_fsm_state66))) begin
        t_V_1_reg_310 <= ngh_cnt_V_1_fu_881_p2;
    end else if (((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state55))) begin
        t_V_1_reg_310 <= reg_345;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (initialized_V_load_reg_901 == 1'd0))) begin
        total_v_V_loc_0_reg_290 <= l1_V_addr_3_read_reg_944;
    end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (initialized_V_load_load_fu_351_p1 == 1'd1))) begin
        total_v_V_loc_0_reg_290 <= total_v_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state56_io) & (1'b1 == ap_CS_fsm_state56) & (icmp_ln887_4_fu_783_p2 == 1'd1) & (icmp_ln887_3_fu_778_p2 == 1'd1))) begin
        add_ln544_reg_1134 <= add_ln544_fu_800_p2;
        child_ts_V_1_reg_1139 <= child_ts_V_1_fu_806_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        base_degree_V <= l1_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        base_flags_V <= l1_V_RDATA;
        l1_V_addr_read_reg_939 <= l1_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        base_neighbor_V <= l1_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
        cur_flag_V_reg_1045 <= l1_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        current_flag_V_reg_1014 <= l1_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        i_V_reg_1085 <= {{task_in[131:100]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state15_io) & (1'b1 == ap_CS_fsm_state15))) begin
        icmp_ln879_1_reg_1003 <= icmp_ln879_1_fu_538_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op192_writeresp_state31 == 1'b1) & (l1_V_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state31))) begin
        icmp_ln879_2_reg_1029 <= icmp_ln879_2_fu_601_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        icmp_ln879_3_reg_1050 <= icmp_ln879_3_fu_630_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op230_writeresp_state47 == 1'b1) & (l1_V_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state47))) begin
        icmp_ln879_4_reg_1069 <= icmp_ln879_4_fu_681_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        icmp_ln879_reg_956 <= icmp_ln879_fu_430_p2;
        task_in_ttype_V_load_reg_949 <= {{task_in[67:64]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        icmp_ln883_reg_1020 <= icmp_ln883_fu_567_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln887_fu_456_p2 == 1'd1))) begin
        icmp_ln887_1_reg_980 <= icmp_ln887_1_fu_461_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln887_fu_456_p2 == 1'd0))) begin
        icmp_ln887_2_reg_989 <= icmp_ln887_2_fu_504_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state56_io) & (1'b1 == ap_CS_fsm_state56) & (icmp_ln887_3_fu_778_p2 == 1'd1))) begin
        icmp_ln887_4_reg_1130 <= icmp_ln887_4_fu_783_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state56_io) & (1'b1 == ap_CS_fsm_state56) & (icmp_ln887_3_fu_778_p2 == 1'd0))) begin
        icmp_ln887_5_reg_1144 <= icmp_ln887_5_fu_809_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (initialized_V == 1'd0))) begin
        initialized_V <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        initialized_V_load_reg_901 <= initialized_V;
    end
end

always @ (posedge ap_clk) begin
    if (((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        l1_V_addr_3_read_reg_944 <= l1_V_RDATA;
        total_v_V <= l1_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state15_io) & (1'b1 == ap_CS_fsm_state15) & (icmp_ln879_1_fu_538_p2 == 1'd1))) begin
        l1_V_addr_4_reg_1007 <= sext_ln544_fu_557_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op192_writeresp_state31 == 1'b1) & (l1_V_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state31) & (icmp_ln879_2_fu_601_p2 == 1'd1))) begin
        l1_V_addr_5_reg_1038 <= sext_ln544_1_fu_620_p1;
        vid_V_reg_1033 <= {{task_in[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op230_writeresp_state47 == 1'b1) & (l1_V_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state47) & (icmp_ln879_4_fu_681_p2 == 1'd1))) begin
        l1_V_addr_6_reg_1079 <= sext_ln544_2_fu_704_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        l1_V_addr_7_reg_1153 <= add_ln544_1_fu_834_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state55))) begin
        n_V_reg_1105 <= l1_V_RDATA;
        ngh_cnt_V_reg_1116 <= ngh_cnt_V_fu_766_p3;
        ret_V_5_reg_1122 <= grp_fu_731_p2;
        zext_ln177_1_reg_1111[32 : 0] <= zext_ln177_1_fu_747_p1[32 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((l1_V_RVALID == 1'b0) | (task_out_V_TREADY_int == 1'b0)) & (1'b1 == ap_CS_fsm_state65))) begin
        p_Val2_1_fu_138 <= p_Result_2_fu_848_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln887_1_fu_461_p2 == 1'd1) & (icmp_ln887_fu_456_p2 == 1'd1))) begin
        p_Val2_s_fu_134 <= p_Result_s_fu_470_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state54) | ((1'b1 == ap_CS_fsm_state12) & (icmp_ln879_fu_430_p2 == 1'd1)))) begin
        reg_345 <= {{task_in[99:68]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        ret_V_4_reg_1100 <= ret_V_4_fu_741_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln879_fu_430_p2 == 1'd1))) begin
        ret_V_reg_966 <= ret_V_fu_440_p2;
        v_V_reg_971 <= v_V_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) & (icmp_ln879_3_fu_630_p2 == 1'd1))) begin
        trunc_ln1503_1_reg_1054 <= trunc_ln1503_1_fu_635_p1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state67_io) | (regslice_both_undo_log_entry_V_U_apdone_blk == 1'b1) | (regslice_both_task_out_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state67))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state67_io) | (regslice_both_undo_log_entry_V_U_apdone_blk == 1'b1) | (regslice_both_task_out_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state67))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_329_p0 = child_object_V_reg_300;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_329_p0 = ap_phi_mux_child_object_V_phi_fu_303_p4;
    end else begin
        grp_fu_329_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | ((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state55)))) begin
        grp_fu_731_ce = 1'b1;
    end else begin
        grp_fu_731_ce = 1'b0;
    end
end

always @ (*) begin
    if (((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
        l1_V_ARADDR = l1_V_addr_7_reg_1153;
    end else if (((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state48))) begin
        l1_V_ARADDR = l1_V_addr_6_reg_1079;
    end else if (((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
        l1_V_ARADDR = l1_V_addr_5_reg_1038;
    end else if (((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        l1_V_ARADDR = l1_V_addr_4_reg_1007;
    end else if (((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        l1_V_ARADDR = 64'd1;
    end else if (((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        l1_V_ARADDR = 64'd5;
    end else if (((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        l1_V_ARADDR = 64'd4;
    end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (initialized_V == 1'd0))) begin
        l1_V_ARADDR = 64'd3;
    end else begin
        l1_V_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (initialized_V == 1'd0)) | ((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state58)) | ((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state48)) | ((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        l1_V_ARVALID = 1'b1;
    end else begin
        l1_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((l1_V_AWREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state41)) begin
            l1_V_AWADDR = l1_V_addr_5_reg_1038;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            l1_V_AWADDR = l1_V_addr_4_reg_1007;
        end else begin
            l1_V_AWADDR = 'bx;
        end
    end else begin
        l1_V_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((l1_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((l1_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25)))) begin
        l1_V_AWVALID = 1'b1;
    end else begin
        l1_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_predicate_op230_writeresp_state47 == 1'b1) & (l1_V_BVALID == 1'b0)) & (ap_predicate_op230_writeresp_state47 == 1'b1) & (1'b1 == ap_CS_fsm_state47)) | (~((ap_predicate_op192_writeresp_state31 == 1'b1) & (l1_V_BVALID == 1'b0)) & (ap_predicate_op192_writeresp_state31 == 1'b1) & (1'b1 == ap_CS_fsm_state31)))) begin
        l1_V_BREADY = 1'b1;
    end else begin
        l1_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state55)) | ((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | (~((l1_V_RVALID == 1'b0) | (task_out_V_TREADY_int == 1'b0)) & (1'b1 == ap_CS_fsm_state65)))) begin
        l1_V_RREADY = 1'b1;
    end else begin
        l1_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        l1_V_WDATA = 32'd1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        l1_V_WDATA = 32'd2;
    end else begin
        l1_V_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state26_io) & (1'b1 == ap_CS_fsm_state26)) | ((1'b0 == ap_block_state42_io) & (1'b1 == ap_CS_fsm_state42)))) begin
        l1_V_WVALID = 1'b1;
    end else begin
        l1_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (initialized_V == 1'd0)))) begin
        l1_V_blk_n_AR = m_axi_l1_V_ARREADY;
    end else begin
        l1_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state25))) begin
        l1_V_blk_n_AW = m_axi_l1_V_AWREADY;
    end else begin
        l1_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state47) & (icmp_ln879_3_reg_1050 == 1'd1) & (icmp_ln879_2_reg_1029 == 1'd1)) | ((1'b1 == ap_CS_fsm_state31) & (icmp_ln879_1_reg_1003 == 1'd1) & (icmp_ln883_reg_1020 == 1'd0)))) begin
        l1_V_blk_n_B = m_axi_l1_V_BVALID;
    end else begin
        l1_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state65))) begin
        l1_V_blk_n_R = m_axi_l1_V_RVALID;
    end else begin
        l1_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state42))) begin
        l1_V_blk_n_W = m_axi_l1_V_WREADY;
    end else begin
        l1_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | ((1'b1 == ap_CS_fsm_state67) & (icmp_ln887_5_reg_1144 == 1'd1) & (icmp_ln879_4_reg_1069 == 1'd1)) | ((1'b1 == ap_CS_fsm_state56) & (icmp_ln887_5_fu_809_p2 == 1'd1) & (icmp_ln887_3_fu_778_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state66) & (icmp_ln887_4_reg_1130 == 1'd1)) | ((1'b1 == ap_CS_fsm_state15) & (icmp_ln887_2_reg_989 == 1'd1) & (icmp_ln879_reg_956 == 1'd1)) | ((1'b1 == ap_CS_fsm_state14) & (icmp_ln887_1_reg_980 == 1'd1)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln887_2_fu_504_p2 == 1'd1) & (icmp_ln887_fu_456_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln887_1_fu_461_p2 == 1'd1) & (icmp_ln887_fu_456_p2 == 1'd1)))) begin
        task_out_V_TDATA_blk_n = task_out_V_TREADY_int;
    end else begin
        task_out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
        task_out_V_TDATA_int = sext_ln177_3_fu_871_p1;
    end else if (((ap_predicate_op284_write_state56 == 1'b1) & (1'b1 == ap_CS_fsm_state56))) begin
        task_out_V_TDATA_int = sext_ln177_4_fu_826_p1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        task_out_V_TDATA_int = sext_ln177_2_fu_676_p1;
    end else if (((ap_predicate_op154_write_state13 == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        task_out_V_TDATA_int = sext_ln177_1_fu_533_p1;
    end else if (((ap_predicate_op146_write_state13 == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        task_out_V_TDATA_int = sext_ln177_fu_494_p1;
    end else begin
        task_out_V_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op284_write_state56 == 1'b1) & (1'b0 == ap_block_state56_io) & (1'b1 == ap_CS_fsm_state56)) | (~((l1_V_RVALID == 1'b0) | (task_out_V_TREADY_int == 1'b0)) & (1'b1 == ap_CS_fsm_state65)) | ((1'b0 == ap_block_state42_io) & (1'b1 == ap_CS_fsm_state42)) | ((ap_predicate_op154_write_state13 == 1'b1) & (1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13)) | ((ap_predicate_op146_write_state13 == 1'b1) & (1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13)))) begin
        task_out_V_TVALID_int = 1'b1;
    end else begin
        task_out_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42))) begin
        undo_log_entry_V_TDATA_blk_n = undo_log_entry_V_TREADY_int;
    end else begin
        undo_log_entry_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        undo_log_entry_V_TDATA_int = tmp_3_fu_653_p4;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        undo_log_entry_V_TDATA_int = tmp_2_fu_591_p4;
    end else begin
        undo_log_entry_V_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state26_io) & (1'b1 == ap_CS_fsm_state26)) | ((1'b0 == ap_block_state42_io) & (1'b1 == ap_CS_fsm_state42)))) begin
        undo_log_entry_V_TVALID_int = 1'b1;
    end else begin
        undo_log_entry_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (initialized_V_load_load_fu_351_p1 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (initialized_V == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln879_fu_430_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln887_fu_456_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if (((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln887_fu_456_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b0 == ap_block_state15_io) & (1'b1 == ap_CS_fsm_state15) & (icmp_ln879_1_fu_538_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else if (((1'b0 == ap_block_state15_io) & (1'b1 == ap_CS_fsm_state15) & (icmp_ln879_1_fu_538_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln883_fu_567_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((l1_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b0 == ap_block_state26_io) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (undo_log_entry_V_TREADY_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if ((~((ap_predicate_op192_writeresp_state31 == 1'b1) & (l1_V_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state31) & (icmp_ln879_2_fu_601_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else if ((~((ap_predicate_op192_writeresp_state31 == 1'b1) & (l1_V_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state31) & (icmp_ln879_2_fu_601_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (icmp_ln879_3_fu_630_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((l1_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((1'b0 == ap_block_state42_io) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (1'b0 == ap_block_state43_io))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if ((~((ap_predicate_op230_writeresp_state47 == 1'b1) & (l1_V_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state47) & (icmp_ln879_4_fu_681_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else if ((~((ap_predicate_op230_writeresp_state47 == 1'b1) & (l1_V_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state47) & (icmp_ln879_4_fu_681_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            if (((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            if (((1'b0 == ap_block_state56_io) & (1'b1 == ap_CS_fsm_state56) & (icmp_ln887_3_fu_778_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else if (((1'b0 == ap_block_state56_io) & (1'b1 == ap_CS_fsm_state56) & (icmp_ln887_3_fu_778_p2 == 1'd1) & (icmp_ln887_4_fu_783_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else if (((1'b0 == ap_block_state56_io) & (1'b1 == ap_CS_fsm_state56) & (icmp_ln887_4_fu_783_p2 == 1'd1) & (icmp_ln887_3_fu_778_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if (((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            if ((~((l1_V_RVALID == 1'b0) | (task_out_V_TREADY_int == 1'b0)) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state66 : begin
            if (((1'b0 == ap_block_state66_io) & (1'b1 == ap_CS_fsm_state66))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            if ((~((1'b1 == ap_block_state67_io) | (regslice_both_undo_log_entry_V_U_apdone_blk == 1'b1) | (regslice_both_task_out_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state67))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1503_1_fu_648_p2 = (trunc_ln1503_1_reg_1054 + tmp_s_fu_639_p4);

assign add_ln1503_fu_585_p2 = (trunc_ln1503_fu_572_p1 + tmp_9_fu_576_p4);

assign add_ln544_1_fu_834_p2 = ($signed(ret_V_5_reg_1122) + $signed(sext_ln544_5_fu_831_p1));

assign add_ln544_fu_800_p2 = ($signed(sext_ln544_3_fu_792_p1) + $signed(sext_ln544_4_fu_796_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state13_io = (((ap_predicate_op154_write_state13 == 1'b1) & (task_out_V_TREADY_int == 1'b0)) | ((ap_predicate_op146_write_state13 == 1'b1) & (task_out_V_TREADY_int == 1'b0)));
end

always @ (*) begin
    ap_block_state14_io = ((task_out_V_TREADY_int == 1'b0) & (icmp_ln887_1_reg_980 == 1'd1));
end

always @ (*) begin
    ap_block_state15_io = ((ap_predicate_op159_write_state15 == 1'b1) & (task_out_V_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state1_io = ((l1_V_ARREADY == 1'b0) & (initialized_V == 1'd0));
end

always @ (*) begin
    ap_block_state26_io = ((l1_V_WREADY == 1'b0) | (undo_log_entry_V_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state31 = ((ap_predicate_op192_writeresp_state31 == 1'b1) & (l1_V_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state42_io = ((l1_V_WREADY == 1'b0) | (undo_log_entry_V_TREADY_int == 1'b0) | (task_out_V_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state43_io = ((undo_log_entry_V_TREADY_int == 1'b0) | (task_out_V_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state47 = ((ap_predicate_op230_writeresp_state47 == 1'b1) & (l1_V_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state56_io = ((ap_predicate_op284_write_state56 == 1'b1) & (task_out_V_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state66_io = ((task_out_V_TREADY_int == 1'b0) & (icmp_ln887_4_reg_1130 == 1'd1));
end

always @ (*) begin
    ap_block_state67 = ((regslice_both_undo_log_entry_V_U_apdone_blk == 1'b1) | (regslice_both_task_out_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state67_io = ((ap_predicate_op306_write_state67 == 1'b1) & (task_out_V_TREADY_int == 1'b0));
end

assign ap_phi_mux_child_object_V_phi_fu_303_p4 = child_object_V_reg_300;

always @ (*) begin
    ap_predicate_op146_write_state13 = ((icmp_ln887_1_fu_461_p2 == 1'd1) & (icmp_ln887_fu_456_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op154_write_state13 = ((icmp_ln887_2_fu_504_p2 == 1'd1) & (icmp_ln887_fu_456_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op159_write_state15 = ((icmp_ln887_2_reg_989 == 1'd1) & (icmp_ln879_reg_956 == 1'd1));
end

always @ (*) begin
    ap_predicate_op192_writeresp_state31 = ((icmp_ln879_1_reg_1003 == 1'd1) & (icmp_ln883_reg_1020 == 1'd0));
end

always @ (*) begin
    ap_predicate_op230_writeresp_state47 = ((icmp_ln879_3_reg_1050 == 1'd1) & (icmp_ln879_2_reg_1029 == 1'd1));
end

always @ (*) begin
    ap_predicate_op284_write_state56 = ((icmp_ln887_5_fu_809_p2 == 1'd1) & (icmp_ln887_3_fu_778_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op306_write_state67 = ((icmp_ln887_5_reg_1144 == 1'd1) & (icmp_ln879_4_reg_1069 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign child_ts_V_1_fu_806_p1 = task_in[31:0];

assign empty_8_fu_754_p2 = (($signed(zext_ln177_1_fu_747_p1) > $signed(empty_fu_750_p1)) ? 1'b1 : 1'b0);

assign empty_9_fu_760_p0 = reg_345;

assign empty_9_fu_760_p2 = ($signed(empty_9_fu_760_p0) + $signed(32'd7));

assign empty_fu_750_p0 = reg_345;

assign empty_fu_750_p1 = empty_fu_750_p0;

assign grp_fu_320_p4 = {{task_in[99:68]}};

assign grp_fu_329_p2 = (grp_fu_329_p0 + 32'd1);

assign grp_fu_336_p4 = {{task_in[63:32]}};

assign grp_fu_731_p0 = grp_fu_731_p00;

assign grp_fu_731_p00 = total_v_V_loc_0_reg_290;

assign grp_fu_731_p1 = grp_fu_731_p10;

assign grp_fu_731_p10 = i_V_fu_714_p4;

assign i_V_fu_714_p4 = {{task_in[131:100]}};

assign icmp_ln879_1_fu_538_p2 = ((task_in_ttype_V_load_reg_949 == 4'd1) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_601_p2 = ((task_in_ttype_V_load_reg_949 == 4'd2) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_630_p2 = ((cur_flag_V_reg_1045 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_4_fu_681_p2 = ((task_in_ttype_V_load_reg_949 == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_430_p2 = ((task_in_ttype_V_load_fu_421_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln883_fu_567_p2 = ((current_flag_V_reg_1014 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln887_1_fu_461_p2 = ((child_object_V_reg_300 < total_v_V_loc_0_reg_290) ? 1'b1 : 1'b0);

assign icmp_ln887_2_fu_504_p2 = ((v_V_reg_971 < total_v_V_loc_0_reg_290) ? 1'b1 : 1'b0);

assign icmp_ln887_3_fu_778_p2 = (($signed(sext_ln887_fu_774_p1) < $signed(zext_ln177_1_reg_1111)) ? 1'b1 : 1'b0);

assign icmp_ln887_4_fu_783_p2 = (($signed(t_V_1_reg_310) < $signed(n_V_reg_1105)) ? 1'b1 : 1'b0);

assign icmp_ln887_5_fu_809_p2 = (($signed(ngh_cnt_V_reg_1116) < $signed(n_V_reg_1105)) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_456_p2 = ((zext_ln887_fu_452_p1 < ret_V_reg_966) ? 1'b1 : 1'b0);

assign initialized_V_load_load_fu_351_p1 = initialized_V;

assign lhs_V_1_fu_606_p1 = base_flags_V_loc_0_reg_280;

assign lhs_V_2_fu_690_p1 = $signed(base_degree_V);

assign lhs_V_fu_543_p1 = base_flags_V_loc_0_reg_280;

assign ngh_cnt_V_1_fu_881_p2 = ($signed(t_V_1_reg_310) + $signed(32'd1));

assign ngh_cnt_V_fu_766_p2 = reg_345;

assign ngh_cnt_V_fu_766_p3 = ((empty_8_fu_754_p2[0:0] === 1'b1) ? empty_9_fu_760_p2 : ngh_cnt_V_fu_766_p2);

assign p_Result_1_fu_509_p5 = {{ap_const_lv64_0[63:32]}, {v_V_reg_971}};

assign p_Result_2_fu_848_p5 = {{p_Val2_1_fu_138[63:32]}, {l1_V_RDATA}};

assign p_Result_s_fu_470_p5 = {{p_Val2_s_fu_134[63:32]}, {child_object_V_reg_300}};

assign ret_V_1_fu_551_p2 = ($signed(lhs_V_fu_543_p1) + $signed(rhs_V_fu_547_p1));

assign ret_V_2_fu_614_p2 = ($signed(lhs_V_1_fu_606_p1) + $signed(rhs_V_1_fu_610_p1));

assign ret_V_3_fu_698_p2 = ($signed(lhs_V_2_fu_690_p1) + $signed(rhs_V_2_fu_694_p1));

assign ret_V_4_fu_741_p2 = (zext_ln177_fu_737_p1 + 33'd7);

assign ret_V_fu_440_p2 = (zext_ln115_fu_436_p1 + 33'd7);

assign rhs_V_1_fu_610_p1 = grp_fu_336_p4;

assign rhs_V_2_fu_694_p1 = grp_fu_336_p4;

assign rhs_V_fu_547_p1 = grp_fu_320_p4;

assign sext_ln177_1_fu_533_p1 = $signed(tmp_1_fu_523_p4);

assign sext_ln177_2_fu_676_p1 = $signed(tmp_4_fu_667_p4);

assign sext_ln177_3_fu_871_p1 = $signed(tmp_5_fu_860_p5);

assign sext_ln177_4_fu_826_p1 = $signed(tmp_6_fu_816_p5);

assign sext_ln177_fu_494_p1 = $signed(tmp_fu_482_p5);

assign sext_ln544_1_fu_620_p1 = $signed(ret_V_2_fu_614_p2);

assign sext_ln544_2_fu_704_p1 = $signed(ret_V_3_fu_698_p2);

assign sext_ln544_3_fu_792_p1 = $signed(base_neighbor_V);

assign sext_ln544_4_fu_796_p1 = t_V_1_reg_310;

assign sext_ln544_5_fu_831_p1 = $signed(add_ln544_reg_1134);

assign sext_ln544_fu_557_p1 = $signed(ret_V_1_fu_551_p2);

assign sext_ln887_fu_774_p1 = t_V_1_reg_310;

assign task_in_ttype_V_load_fu_421_p4 = {{task_in[67:64]}};

assign task_out_V_TVALID = regslice_both_task_out_V_U_vld_out;

assign tmp_1_fu_523_p4 = {{{p_Result_1_fu_509_p5}, {4'd0}}, {trunc_ln176_fu_520_p1}};

assign tmp_2_fu_591_p4 = {{{current_flag_V_reg_1014}, {add_ln1503_fu_585_p2}}, {2'd0}};

assign tmp_3_fu_653_p4 = {{{{32'd0}, {add_ln1503_1_fu_648_p2}}}, {2'd0}};

assign tmp_4_fu_667_p4 = {{{vid_V_reg_1033}, {36'd4}}, {trunc_ln176_1_fu_664_p1}};

assign tmp_5_fu_860_p5 = {{{{p_Result_2_fu_848_p5}, {4'd1}}, {l1_V_RDATA}}, {child_ts_V_1_reg_1139}};

assign tmp_6_fu_816_p5 = {{{{i_V_reg_1085}, {ngh_cnt_V_reg_1116}}, {4'd4}}, {trunc_ln176_2_fu_813_p1}};

assign tmp_9_fu_576_p4 = {{task_in[97:68]}};

assign tmp_fu_482_p5 = {{{{p_Result_s_fu_470_p5}, {4'd2}}, {child_object_V_reg_300}}, {grp_fu_329_p2}};

assign tmp_s_fu_639_p4 = {{task_in[61:32]}};

assign trunc_ln1503_1_fu_635_p1 = base_flags_V_loc_0_reg_280[29:0];

assign trunc_ln1503_fu_572_p1 = base_flags_V_loc_0_reg_280[29:0];

assign trunc_ln176_1_fu_664_p1 = task_in[63:0];

assign trunc_ln176_2_fu_813_p1 = task_in[63:0];

assign trunc_ln176_fu_520_p1 = task_in[63:0];

assign undo_log_entry_V_TVALID = regslice_both_undo_log_entry_V_U_vld_out;

assign v_V_fu_446_p2 = (grp_fu_320_p4 + 32'd7);

assign zext_ln115_fu_436_p1 = grp_fu_320_p4;

assign zext_ln177_1_fu_747_p1 = ret_V_4_reg_1100;

assign zext_ln177_fu_737_p0 = grp_fu_320_p4;

assign zext_ln177_fu_737_p1 = $unsigned(zext_ln177_fu_737_p0);

assign zext_ln887_fu_452_p1 = child_object_V_reg_300;

always @ (posedge ap_clk) begin
    zext_ln177_1_reg_1111[33] <= 1'b0;
end

endmodule //mis_hls
