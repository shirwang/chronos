// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mis_hls.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mis_hls::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mis_hls::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<29> mis_hls::ap_ST_fsm_state1 = "1";
const sc_lv<29> mis_hls::ap_ST_fsm_state2 = "10";
const sc_lv<29> mis_hls::ap_ST_fsm_state3 = "100";
const sc_lv<29> mis_hls::ap_ST_fsm_state4 = "1000";
const sc_lv<29> mis_hls::ap_ST_fsm_state5 = "10000";
const sc_lv<29> mis_hls::ap_ST_fsm_state6 = "100000";
const sc_lv<29> mis_hls::ap_ST_fsm_state7 = "1000000";
const sc_lv<29> mis_hls::ap_ST_fsm_state8 = "10000000";
const sc_lv<29> mis_hls::ap_ST_fsm_state9 = "100000000";
const sc_lv<29> mis_hls::ap_ST_fsm_state10 = "1000000000";
const sc_lv<29> mis_hls::ap_ST_fsm_state11 = "10000000000";
const sc_lv<29> mis_hls::ap_ST_fsm_state12 = "100000000000";
const sc_lv<29> mis_hls::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<29> mis_hls::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<29> mis_hls::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<29> mis_hls::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<29> mis_hls::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<29> mis_hls::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<29> mis_hls::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<29> mis_hls::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<29> mis_hls::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<29> mis_hls::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<29> mis_hls::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<29> mis_hls::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<29> mis_hls::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<29> mis_hls::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<29> mis_hls::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<29> mis_hls::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<29> mis_hls::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<32> mis_hls::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool mis_hls::ap_const_boolean_1 = true;
const sc_lv<1> mis_hls::ap_const_lv1_0 = "0";
const sc_lv<32> mis_hls::ap_const_lv32_A = "1010";
const sc_lv<1> mis_hls::ap_const_lv1_1 = "1";
const sc_lv<32> mis_hls::ap_const_lv32_B = "1011";
const sc_lv<32> mis_hls::ap_const_lv32_C = "1100";
const sc_lv<32> mis_hls::ap_const_lv32_7 = "111";
const sc_lv<32> mis_hls::ap_const_lv32_1 = "1";
const sc_lv<32> mis_hls::ap_const_lv32_8 = "1000";
const sc_lv<32> mis_hls::ap_const_lv32_D = "1101";
const sc_lv<32> mis_hls::ap_const_lv32_14 = "10100";
const sc_lv<32> mis_hls::ap_const_lv32_16 = "10110";
const sc_lv<32> mis_hls::ap_const_lv32_17 = "10111";
const sc_lv<32> mis_hls::ap_const_lv32_1C = "11100";
const sc_lv<32> mis_hls::ap_const_lv32_18 = "11000";
const int mis_hls::C_M_AXI_L1_V_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int mis_hls::C_M_AXI_L1_V_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int mis_hls::C_M_AXI_L1_V_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int mis_hls::C_M_AXI_L1_V_CACHE_VALUE = "11";
const int mis_hls::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> mis_hls::ap_const_lv32_9 = "1001";
const bool mis_hls::ap_const_boolean_0 = false;
const sc_lv<32> mis_hls::ap_const_lv32_15 = "10101";
const sc_lv<64> mis_hls::ap_const_lv64_3 = "11";
const sc_lv<64> mis_hls::ap_const_lv64_1 = "1";
const sc_lv<3> mis_hls::ap_const_lv3_0 = "000";
const sc_lv<2> mis_hls::ap_const_lv2_0 = "00";
const sc_lv<4> mis_hls::ap_const_lv4_0 = "0000";
const sc_lv<32> mis_hls::ap_const_lv32_2 = "10";
const sc_lv<4> mis_hls::ap_const_lv4_F = "1111";
const sc_lv<32> mis_hls::ap_const_lv32_44 = "1000100";
const sc_lv<32> mis_hls::ap_const_lv32_63 = "1100011";
const sc_lv<32> mis_hls::ap_const_lv32_40 = "1000000";
const sc_lv<32> mis_hls::ap_const_lv32_43 = "1000011";
const sc_lv<33> mis_hls::ap_const_lv33_7 = "111";
const sc_lv<32> mis_hls::ap_const_lv32_1F = "11111";
const sc_lv<4> mis_hls::ap_const_lv4_2 = "10";
const sc_lv<64> mis_hls::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<4> mis_hls::ap_const_lv4_1 = "1";
const sc_lv<32> mis_hls::ap_const_lv32_61 = "1100001";

mis_hls::mis_hls(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mis_hls_l1_V_m_axi_U = new mis_hls_l1_V_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_L1_V_ID_WIDTH,C_M_AXI_L1_V_ADDR_WIDTH,C_M_AXI_L1_V_DATA_WIDTH,C_M_AXI_L1_V_AWUSER_WIDTH,C_M_AXI_L1_V_ARUSER_WIDTH,C_M_AXI_L1_V_WUSER_WIDTH,C_M_AXI_L1_V_RUSER_WIDTH,C_M_AXI_L1_V_BUSER_WIDTH,C_M_AXI_L1_V_TARGET_ADDR,C_M_AXI_L1_V_USER_VALUE,C_M_AXI_L1_V_PROT_VALUE,C_M_AXI_L1_V_CACHE_VALUE>("mis_hls_l1_V_m_axi_U");
    mis_hls_l1_V_m_axi_U->AWVALID(m_axi_l1_V_AWVALID);
    mis_hls_l1_V_m_axi_U->AWREADY(m_axi_l1_V_AWREADY);
    mis_hls_l1_V_m_axi_U->AWADDR(m_axi_l1_V_AWADDR);
    mis_hls_l1_V_m_axi_U->AWID(m_axi_l1_V_AWID);
    mis_hls_l1_V_m_axi_U->AWLEN(m_axi_l1_V_AWLEN);
    mis_hls_l1_V_m_axi_U->AWSIZE(m_axi_l1_V_AWSIZE);
    mis_hls_l1_V_m_axi_U->AWBURST(m_axi_l1_V_AWBURST);
    mis_hls_l1_V_m_axi_U->AWLOCK(m_axi_l1_V_AWLOCK);
    mis_hls_l1_V_m_axi_U->AWCACHE(m_axi_l1_V_AWCACHE);
    mis_hls_l1_V_m_axi_U->AWPROT(m_axi_l1_V_AWPROT);
    mis_hls_l1_V_m_axi_U->AWQOS(m_axi_l1_V_AWQOS);
    mis_hls_l1_V_m_axi_U->AWREGION(m_axi_l1_V_AWREGION);
    mis_hls_l1_V_m_axi_U->AWUSER(m_axi_l1_V_AWUSER);
    mis_hls_l1_V_m_axi_U->WVALID(m_axi_l1_V_WVALID);
    mis_hls_l1_V_m_axi_U->WREADY(m_axi_l1_V_WREADY);
    mis_hls_l1_V_m_axi_U->WDATA(m_axi_l1_V_WDATA);
    mis_hls_l1_V_m_axi_U->WSTRB(m_axi_l1_V_WSTRB);
    mis_hls_l1_V_m_axi_U->WLAST(m_axi_l1_V_WLAST);
    mis_hls_l1_V_m_axi_U->WID(m_axi_l1_V_WID);
    mis_hls_l1_V_m_axi_U->WUSER(m_axi_l1_V_WUSER);
    mis_hls_l1_V_m_axi_U->ARVALID(m_axi_l1_V_ARVALID);
    mis_hls_l1_V_m_axi_U->ARREADY(m_axi_l1_V_ARREADY);
    mis_hls_l1_V_m_axi_U->ARADDR(m_axi_l1_V_ARADDR);
    mis_hls_l1_V_m_axi_U->ARID(m_axi_l1_V_ARID);
    mis_hls_l1_V_m_axi_U->ARLEN(m_axi_l1_V_ARLEN);
    mis_hls_l1_V_m_axi_U->ARSIZE(m_axi_l1_V_ARSIZE);
    mis_hls_l1_V_m_axi_U->ARBURST(m_axi_l1_V_ARBURST);
    mis_hls_l1_V_m_axi_U->ARLOCK(m_axi_l1_V_ARLOCK);
    mis_hls_l1_V_m_axi_U->ARCACHE(m_axi_l1_V_ARCACHE);
    mis_hls_l1_V_m_axi_U->ARPROT(m_axi_l1_V_ARPROT);
    mis_hls_l1_V_m_axi_U->ARQOS(m_axi_l1_V_ARQOS);
    mis_hls_l1_V_m_axi_U->ARREGION(m_axi_l1_V_ARREGION);
    mis_hls_l1_V_m_axi_U->ARUSER(m_axi_l1_V_ARUSER);
    mis_hls_l1_V_m_axi_U->RVALID(m_axi_l1_V_RVALID);
    mis_hls_l1_V_m_axi_U->RREADY(m_axi_l1_V_RREADY);
    mis_hls_l1_V_m_axi_U->RDATA(m_axi_l1_V_RDATA);
    mis_hls_l1_V_m_axi_U->RLAST(m_axi_l1_V_RLAST);
    mis_hls_l1_V_m_axi_U->RID(m_axi_l1_V_RID);
    mis_hls_l1_V_m_axi_U->RUSER(m_axi_l1_V_RUSER);
    mis_hls_l1_V_m_axi_U->RRESP(m_axi_l1_V_RRESP);
    mis_hls_l1_V_m_axi_U->BVALID(m_axi_l1_V_BVALID);
    mis_hls_l1_V_m_axi_U->BREADY(m_axi_l1_V_BREADY);
    mis_hls_l1_V_m_axi_U->BRESP(m_axi_l1_V_BRESP);
    mis_hls_l1_V_m_axi_U->BID(m_axi_l1_V_BID);
    mis_hls_l1_V_m_axi_U->BUSER(m_axi_l1_V_BUSER);
    mis_hls_l1_V_m_axi_U->ACLK(ap_clk);
    mis_hls_l1_V_m_axi_U->ARESET(ap_rst_n_inv);
    mis_hls_l1_V_m_axi_U->ACLK_EN(ap_var_for_const0);
    mis_hls_l1_V_m_axi_U->I_ARVALID(l1_V_ARVALID);
    mis_hls_l1_V_m_axi_U->I_ARREADY(l1_V_ARREADY);
    mis_hls_l1_V_m_axi_U->I_ARADDR(l1_V_ARADDR);
    mis_hls_l1_V_m_axi_U->I_ARID(ap_var_for_const1);
    mis_hls_l1_V_m_axi_U->I_ARLEN(ap_var_for_const2);
    mis_hls_l1_V_m_axi_U->I_ARSIZE(ap_var_for_const3);
    mis_hls_l1_V_m_axi_U->I_ARLOCK(ap_var_for_const4);
    mis_hls_l1_V_m_axi_U->I_ARCACHE(ap_var_for_const5);
    mis_hls_l1_V_m_axi_U->I_ARQOS(ap_var_for_const5);
    mis_hls_l1_V_m_axi_U->I_ARPROT(ap_var_for_const3);
    mis_hls_l1_V_m_axi_U->I_ARUSER(ap_var_for_const1);
    mis_hls_l1_V_m_axi_U->I_ARBURST(ap_var_for_const4);
    mis_hls_l1_V_m_axi_U->I_ARREGION(ap_var_for_const5);
    mis_hls_l1_V_m_axi_U->I_RVALID(l1_V_RVALID);
    mis_hls_l1_V_m_axi_U->I_RREADY(l1_V_RREADY);
    mis_hls_l1_V_m_axi_U->I_RDATA(l1_V_RDATA);
    mis_hls_l1_V_m_axi_U->I_RID(l1_V_RID);
    mis_hls_l1_V_m_axi_U->I_RUSER(l1_V_RUSER);
    mis_hls_l1_V_m_axi_U->I_RRESP(l1_V_RRESP);
    mis_hls_l1_V_m_axi_U->I_RLAST(l1_V_RLAST);
    mis_hls_l1_V_m_axi_U->I_AWVALID(l1_V_AWVALID);
    mis_hls_l1_V_m_axi_U->I_AWREADY(l1_V_AWREADY);
    mis_hls_l1_V_m_axi_U->I_AWADDR(l1_V_addr_2_reg_537);
    mis_hls_l1_V_m_axi_U->I_AWID(ap_var_for_const1);
    mis_hls_l1_V_m_axi_U->I_AWLEN(ap_var_for_const2);
    mis_hls_l1_V_m_axi_U->I_AWSIZE(ap_var_for_const3);
    mis_hls_l1_V_m_axi_U->I_AWLOCK(ap_var_for_const4);
    mis_hls_l1_V_m_axi_U->I_AWCACHE(ap_var_for_const5);
    mis_hls_l1_V_m_axi_U->I_AWQOS(ap_var_for_const5);
    mis_hls_l1_V_m_axi_U->I_AWPROT(ap_var_for_const3);
    mis_hls_l1_V_m_axi_U->I_AWUSER(ap_var_for_const1);
    mis_hls_l1_V_m_axi_U->I_AWBURST(ap_var_for_const4);
    mis_hls_l1_V_m_axi_U->I_AWREGION(ap_var_for_const5);
    mis_hls_l1_V_m_axi_U->I_WVALID(l1_V_WVALID);
    mis_hls_l1_V_m_axi_U->I_WREADY(l1_V_WREADY);
    mis_hls_l1_V_m_axi_U->I_WDATA(ap_var_for_const6);
    mis_hls_l1_V_m_axi_U->I_WID(ap_var_for_const1);
    mis_hls_l1_V_m_axi_U->I_WUSER(ap_var_for_const1);
    mis_hls_l1_V_m_axi_U->I_WLAST(ap_var_for_const7);
    mis_hls_l1_V_m_axi_U->I_WSTRB(ap_var_for_const8);
    mis_hls_l1_V_m_axi_U->I_BVALID(l1_V_BVALID);
    mis_hls_l1_V_m_axi_U->I_BREADY(l1_V_BREADY);
    mis_hls_l1_V_m_axi_U->I_BRESP(l1_V_BRESP);
    mis_hls_l1_V_m_axi_U->I_BID(l1_V_BID);
    mis_hls_l1_V_m_axi_U->I_BUSER(l1_V_BUSER);
    regslice_both_task_out_V_U = new regslice_both<136>("regslice_both_task_out_V_U");
    regslice_both_task_out_V_U->ap_clk(ap_clk);
    regslice_both_task_out_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_task_out_V_U->data_in(task_out_V_TDATA_int);
    regslice_both_task_out_V_U->vld_in(task_out_V_TVALID_int);
    regslice_both_task_out_V_U->ack_in(task_out_V_TREADY_int);
    regslice_both_task_out_V_U->data_out(task_out_V_TDATA);
    regslice_both_task_out_V_U->vld_out(regslice_both_task_out_V_U_vld_out);
    regslice_both_task_out_V_U->ack_out(task_out_V_TREADY);
    regslice_both_task_out_V_U->apdone_blk(regslice_both_task_out_V_U_apdone_blk);
    regslice_both_undo_log_entry_V_U = new regslice_both<64>("regslice_both_undo_log_entry_V_U");
    regslice_both_undo_log_entry_V_U->ap_clk(ap_clk);
    regslice_both_undo_log_entry_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_undo_log_entry_V_U->data_in(undo_log_entry_V_TDATA_int);
    regslice_both_undo_log_entry_V_U->vld_in(undo_log_entry_V_TVALID_int);
    regslice_both_undo_log_entry_V_U->ack_in(undo_log_entry_V_TREADY_int);
    regslice_both_undo_log_entry_V_U->data_out(undo_log_entry_V_TDATA);
    regslice_both_undo_log_entry_V_U->vld_out(regslice_both_undo_log_entry_V_U_vld_out);
    regslice_both_undo_log_entry_V_U->ack_out(undo_log_entry_V_TREADY);
    regslice_both_undo_log_entry_V_U->apdone_blk(regslice_both_undo_log_entry_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln1503_fu_422_p2);
    sensitive << ( trunc_ln1503_fu_410_p1 );
    sensitive << ( tmp_5_fu_413_p4 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state11_io);
    sensitive << ( ap_predicate_op86_write_state11 );
    sensitive << ( ap_predicate_op94_write_state11 );
    sensitive << ( task_out_V_TREADY_int );

    SC_METHOD(thread_ap_block_state12_io);
    sensitive << ( icmp_ln887_1_reg_505 );
    sensitive << ( task_out_V_TREADY_int );

    SC_METHOD(thread_ap_block_state13_io);
    sensitive << ( ap_predicate_op99_write_state13 );
    sensitive << ( task_out_V_TREADY_int );

    SC_METHOD(thread_ap_block_state1_io);
    sensitive << ( initialized_V );
    sensitive << ( l1_V_ARREADY );

    SC_METHOD(thread_ap_block_state24_io);
    sensitive << ( l1_V_WREADY );
    sensitive << ( undo_log_entry_V_TREADY_int );

    SC_METHOD(thread_ap_block_state29);
    sensitive << ( l1_V_BVALID );
    sensitive << ( ap_predicate_op133_writeresp_state29 );
    sensitive << ( regslice_both_task_out_V_U_apdone_blk );
    sensitive << ( regslice_both_undo_log_entry_V_U_apdone_blk );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( l1_V_BVALID );
    sensitive << ( ap_predicate_op133_writeresp_state29 );
    sensitive << ( regslice_both_task_out_V_U_apdone_blk );
    sensitive << ( regslice_both_undo_log_entry_V_U_apdone_blk );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_child_object_V_phi_fu_192_p4);
    sensitive << ( child_object_V_reg_189 );

    SC_METHOD(thread_ap_predicate_op133_writeresp_state29);
    sensitive << ( icmp_ln879_1_reg_528 );
    sensitive << ( icmp_ln883_reg_550 );

    SC_METHOD(thread_ap_predicate_op86_write_state11);
    sensitive << ( icmp_ln887_fu_290_p2 );
    sensitive << ( icmp_ln887_1_fu_295_p2 );

    SC_METHOD(thread_ap_predicate_op94_write_state11);
    sensitive << ( icmp_ln887_fu_290_p2 );
    sensitive << ( icmp_ln887_2_fu_338_p2 );

    SC_METHOD(thread_ap_predicate_op99_write_state13);
    sensitive << ( icmp_ln879_reg_476 );
    sensitive << ( icmp_ln887_2_reg_514 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( l1_V_BVALID );
    sensitive << ( ap_predicate_op133_writeresp_state29 );
    sensitive << ( regslice_both_task_out_V_U_apdone_blk );
    sensitive << ( regslice_both_undo_log_entry_V_U_apdone_blk );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_grp_fu_199_p4);
    sensitive << ( task_in );

    SC_METHOD(thread_grp_fu_208_p0);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_phi_mux_child_object_V_phi_fu_192_p4 );
    sensitive << ( child_object_V_reg_189 );

    SC_METHOD(thread_grp_fu_208_p2);
    sensitive << ( grp_fu_208_p0 );

    SC_METHOD(thread_icmp_ln879_1_fu_372_p2);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( task_in_ttype_V_load_reg_471 );
    sensitive << ( ap_block_state13_io );

    SC_METHOD(thread_icmp_ln879_fu_264_p2);
    sensitive << ( task_in_ttype_V_load_fu_255_p4 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_icmp_ln883_fu_405_p2);
    sensitive << ( current_flag_V_reg_544 );
    sensitive << ( ap_CS_fsm_state22 );

    SC_METHOD(thread_icmp_ln887_1_fu_295_p2);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln887_fu_290_p2 );
    sensitive << ( ap_block_state11_io );
    sensitive << ( total_v_V_loc_0_reg_179 );
    sensitive << ( child_object_V_reg_189 );

    SC_METHOD(thread_icmp_ln887_2_fu_338_p2);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln887_fu_290_p2 );
    sensitive << ( v_V_reg_496 );
    sensitive << ( ap_block_state11_io );
    sensitive << ( total_v_V_loc_0_reg_179 );

    SC_METHOD(thread_icmp_ln887_fu_290_p2);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ret_V_reg_491 );
    sensitive << ( ap_block_state11_io );
    sensitive << ( zext_ln887_fu_286_p1 );

    SC_METHOD(thread_initialized_V_load_load_fu_215_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( initialized_V );

    SC_METHOD(thread_l1_V_ARADDR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( initialized_V );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( l1_V_ARREADY );
    sensitive << ( ap_block_state1_io );
    sensitive << ( l1_V_addr_2_reg_537 );

    SC_METHOD(thread_l1_V_ARVALID);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( initialized_V );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( l1_V_ARREADY );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_l1_V_AWVALID);
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( l1_V_AWREADY );

    SC_METHOD(thread_l1_V_BREADY);
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( l1_V_BVALID );
    sensitive << ( ap_predicate_op133_writeresp_state29 );
    sensitive << ( regslice_both_task_out_V_U_apdone_blk );
    sensitive << ( regslice_both_undo_log_entry_V_U_apdone_blk );

    SC_METHOD(thread_l1_V_RREADY);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( l1_V_RVALID );

    SC_METHOD(thread_l1_V_WVALID);
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_block_state24_io );

    SC_METHOD(thread_l1_V_blk_n_AR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_l1_V_ARREADY );
    sensitive << ( initialized_V );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_l1_V_blk_n_AW);
    sensitive << ( m_axi_l1_V_AWREADY );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_l1_V_blk_n_B);
    sensitive << ( m_axi_l1_V_BVALID );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( icmp_ln879_1_reg_528 );
    sensitive << ( icmp_ln883_reg_550 );

    SC_METHOD(thread_l1_V_blk_n_R);
    sensitive << ( m_axi_l1_V_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_l1_V_blk_n_W);
    sensitive << ( m_axi_l1_V_WREADY );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_lhs_V_fu_381_p0);
    sensitive << ( base_flags_V );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_lhs_V_fu_381_p1);
    sensitive << ( lhs_V_fu_381_p0 );

    SC_METHOD(thread_p_Result_1_fu_343_p5);
    sensitive << ( v_V_reg_496 );

    SC_METHOD(thread_p_Result_s_fu_304_p5);
    sensitive << ( child_object_V_reg_189 );
    sensitive << ( p_Val2_s_fu_108 );

    SC_METHOD(thread_ret_V_1_fu_389_p2);
    sensitive << ( lhs_V_fu_381_p1 );
    sensitive << ( rhs_V_fu_385_p1 );

    SC_METHOD(thread_ret_V_fu_274_p2);
    sensitive << ( zext_ln115_fu_270_p1 );

    SC_METHOD(thread_rhs_V_fu_385_p1);
    sensitive << ( grp_fu_199_p4 );

    SC_METHOD(thread_sext_ln177_1_fu_367_p1);
    sensitive << ( tmp_1_fu_357_p4 );

    SC_METHOD(thread_sext_ln177_fu_328_p1);
    sensitive << ( tmp_fu_316_p5 );

    SC_METHOD(thread_sext_ln544_fu_395_p1);
    sensitive << ( ret_V_1_fu_389_p2 );

    SC_METHOD(thread_task_in_ttype_V_load_fu_255_p4);
    sensitive << ( task_in );

    SC_METHOD(thread_task_out_V_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln887_fu_290_p2 );
    sensitive << ( icmp_ln887_1_fu_295_p2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( icmp_ln887_1_reg_505 );
    sensitive << ( icmp_ln887_2_fu_338_p2 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( icmp_ln879_reg_476 );
    sensitive << ( icmp_ln887_2_reg_514 );
    sensitive << ( task_out_V_TREADY_int );

    SC_METHOD(thread_task_out_V_TDATA_int);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_predicate_op86_write_state11 );
    sensitive << ( ap_predicate_op94_write_state11 );
    sensitive << ( sext_ln177_fu_328_p1 );
    sensitive << ( sext_ln177_1_fu_367_p1 );

    SC_METHOD(thread_task_out_V_TVALID);
    sensitive << ( regslice_both_task_out_V_U_vld_out );

    SC_METHOD(thread_task_out_V_TVALID_int);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_predicate_op86_write_state11 );
    sensitive << ( ap_predicate_op94_write_state11 );
    sensitive << ( ap_block_state11_io );

    SC_METHOD(thread_tmp_1_fu_357_p4);
    sensitive << ( p_Result_1_fu_343_p5 );
    sensitive << ( trunc_ln176_fu_354_p1 );

    SC_METHOD(thread_tmp_5_fu_413_p4);
    sensitive << ( task_in );

    SC_METHOD(thread_tmp_fu_316_p5);
    sensitive << ( grp_fu_208_p2 );
    sensitive << ( child_object_V_reg_189 );
    sensitive << ( p_Result_s_fu_304_p5 );

    SC_METHOD(thread_trunc_ln1503_fu_410_p1);
    sensitive << ( base_flags_V_load_reg_532 );

    SC_METHOD(thread_trunc_ln176_fu_354_p1);
    sensitive << ( task_in );

    SC_METHOD(thread_undo_log_entry_V_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( undo_log_entry_V_TREADY_int );

    SC_METHOD(thread_undo_log_entry_V_TDATA_int);
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( current_flag_V_reg_544 );
    sensitive << ( add_ln1503_reg_554 );

    SC_METHOD(thread_undo_log_entry_V_TVALID);
    sensitive << ( regslice_both_undo_log_entry_V_U_vld_out );

    SC_METHOD(thread_undo_log_entry_V_TVALID_int);
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_block_state24_io );

    SC_METHOD(thread_v_V_fu_280_p2);
    sensitive << ( grp_fu_199_p4 );

    SC_METHOD(thread_zext_ln115_fu_270_p1);
    sensitive << ( grp_fu_199_p4 );

    SC_METHOD(thread_zext_ln887_fu_286_p1);
    sensitive << ( child_object_V_reg_189 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( initialized_V );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln887_fu_290_p2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( initialized_V_load_load_fu_215_p1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( l1_V_AWREADY );
    sensitive << ( l1_V_ARREADY );
    sensitive << ( l1_V_RVALID );
    sensitive << ( l1_V_BVALID );
    sensitive << ( ap_block_state1_io );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( icmp_ln879_fu_264_p2 );
    sensitive << ( ap_block_state11_io );
    sensitive << ( ap_block_state12_io );
    sensitive << ( icmp_ln879_1_fu_372_p2 );
    sensitive << ( ap_block_state13_io );
    sensitive << ( icmp_ln883_fu_405_p2 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_block_state24_io );
    sensitive << ( ap_predicate_op133_writeresp_state29 );
    sensitive << ( regslice_both_task_out_V_U_apdone_blk );
    sensitive << ( regslice_both_undo_log_entry_V_U_apdone_blk );
    sensitive << ( undo_log_entry_V_TREADY_int );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const8);

    ap_CS_fsm = "00000000000000000000000000001";
    initialized_V = "0";
    total_v_V = "00000000000000000000000000000000";
    base_flags_V = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mis_hls_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, task_in, "(port)task_in");
    sc_trace(mVcdFile, task_out_V_TDATA, "(port)task_out_V_TDATA");
    sc_trace(mVcdFile, task_out_V_TVALID, "(port)task_out_V_TVALID");
    sc_trace(mVcdFile, task_out_V_TREADY, "(port)task_out_V_TREADY");
    sc_trace(mVcdFile, m_axi_l1_V_AWVALID, "(port)m_axi_l1_V_AWVALID");
    sc_trace(mVcdFile, m_axi_l1_V_AWREADY, "(port)m_axi_l1_V_AWREADY");
    sc_trace(mVcdFile, m_axi_l1_V_AWADDR, "(port)m_axi_l1_V_AWADDR");
    sc_trace(mVcdFile, m_axi_l1_V_AWID, "(port)m_axi_l1_V_AWID");
    sc_trace(mVcdFile, m_axi_l1_V_AWLEN, "(port)m_axi_l1_V_AWLEN");
    sc_trace(mVcdFile, m_axi_l1_V_AWSIZE, "(port)m_axi_l1_V_AWSIZE");
    sc_trace(mVcdFile, m_axi_l1_V_AWBURST, "(port)m_axi_l1_V_AWBURST");
    sc_trace(mVcdFile, m_axi_l1_V_AWLOCK, "(port)m_axi_l1_V_AWLOCK");
    sc_trace(mVcdFile, m_axi_l1_V_AWCACHE, "(port)m_axi_l1_V_AWCACHE");
    sc_trace(mVcdFile, m_axi_l1_V_AWPROT, "(port)m_axi_l1_V_AWPROT");
    sc_trace(mVcdFile, m_axi_l1_V_AWQOS, "(port)m_axi_l1_V_AWQOS");
    sc_trace(mVcdFile, m_axi_l1_V_AWREGION, "(port)m_axi_l1_V_AWREGION");
    sc_trace(mVcdFile, m_axi_l1_V_AWUSER, "(port)m_axi_l1_V_AWUSER");
    sc_trace(mVcdFile, m_axi_l1_V_WVALID, "(port)m_axi_l1_V_WVALID");
    sc_trace(mVcdFile, m_axi_l1_V_WREADY, "(port)m_axi_l1_V_WREADY");
    sc_trace(mVcdFile, m_axi_l1_V_WDATA, "(port)m_axi_l1_V_WDATA");
    sc_trace(mVcdFile, m_axi_l1_V_WSTRB, "(port)m_axi_l1_V_WSTRB");
    sc_trace(mVcdFile, m_axi_l1_V_WLAST, "(port)m_axi_l1_V_WLAST");
    sc_trace(mVcdFile, m_axi_l1_V_WID, "(port)m_axi_l1_V_WID");
    sc_trace(mVcdFile, m_axi_l1_V_WUSER, "(port)m_axi_l1_V_WUSER");
    sc_trace(mVcdFile, m_axi_l1_V_ARVALID, "(port)m_axi_l1_V_ARVALID");
    sc_trace(mVcdFile, m_axi_l1_V_ARREADY, "(port)m_axi_l1_V_ARREADY");
    sc_trace(mVcdFile, m_axi_l1_V_ARADDR, "(port)m_axi_l1_V_ARADDR");
    sc_trace(mVcdFile, m_axi_l1_V_ARID, "(port)m_axi_l1_V_ARID");
    sc_trace(mVcdFile, m_axi_l1_V_ARLEN, "(port)m_axi_l1_V_ARLEN");
    sc_trace(mVcdFile, m_axi_l1_V_ARSIZE, "(port)m_axi_l1_V_ARSIZE");
    sc_trace(mVcdFile, m_axi_l1_V_ARBURST, "(port)m_axi_l1_V_ARBURST");
    sc_trace(mVcdFile, m_axi_l1_V_ARLOCK, "(port)m_axi_l1_V_ARLOCK");
    sc_trace(mVcdFile, m_axi_l1_V_ARCACHE, "(port)m_axi_l1_V_ARCACHE");
    sc_trace(mVcdFile, m_axi_l1_V_ARPROT, "(port)m_axi_l1_V_ARPROT");
    sc_trace(mVcdFile, m_axi_l1_V_ARQOS, "(port)m_axi_l1_V_ARQOS");
    sc_trace(mVcdFile, m_axi_l1_V_ARREGION, "(port)m_axi_l1_V_ARREGION");
    sc_trace(mVcdFile, m_axi_l1_V_ARUSER, "(port)m_axi_l1_V_ARUSER");
    sc_trace(mVcdFile, m_axi_l1_V_RVALID, "(port)m_axi_l1_V_RVALID");
    sc_trace(mVcdFile, m_axi_l1_V_RREADY, "(port)m_axi_l1_V_RREADY");
    sc_trace(mVcdFile, m_axi_l1_V_RDATA, "(port)m_axi_l1_V_RDATA");
    sc_trace(mVcdFile, m_axi_l1_V_RLAST, "(port)m_axi_l1_V_RLAST");
    sc_trace(mVcdFile, m_axi_l1_V_RID, "(port)m_axi_l1_V_RID");
    sc_trace(mVcdFile, m_axi_l1_V_RUSER, "(port)m_axi_l1_V_RUSER");
    sc_trace(mVcdFile, m_axi_l1_V_RRESP, "(port)m_axi_l1_V_RRESP");
    sc_trace(mVcdFile, m_axi_l1_V_BVALID, "(port)m_axi_l1_V_BVALID");
    sc_trace(mVcdFile, m_axi_l1_V_BREADY, "(port)m_axi_l1_V_BREADY");
    sc_trace(mVcdFile, m_axi_l1_V_BRESP, "(port)m_axi_l1_V_BRESP");
    sc_trace(mVcdFile, m_axi_l1_V_BID, "(port)m_axi_l1_V_BID");
    sc_trace(mVcdFile, m_axi_l1_V_BUSER, "(port)m_axi_l1_V_BUSER");
    sc_trace(mVcdFile, undo_log_entry_V_TDATA, "(port)undo_log_entry_V_TDATA");
    sc_trace(mVcdFile, undo_log_entry_V_TVALID, "(port)undo_log_entry_V_TVALID");
    sc_trace(mVcdFile, undo_log_entry_V_TREADY, "(port)undo_log_entry_V_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, initialized_V, "initialized_V");
    sc_trace(mVcdFile, total_v_V, "total_v_V");
    sc_trace(mVcdFile, base_flags_V, "base_flags_V");
    sc_trace(mVcdFile, task_out_V_TDATA_blk_n, "task_out_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, icmp_ln887_fu_290_p2, "icmp_ln887_fu_290_p2");
    sc_trace(mVcdFile, icmp_ln887_1_fu_295_p2, "icmp_ln887_1_fu_295_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, icmp_ln887_1_reg_505, "icmp_ln887_1_reg_505");
    sc_trace(mVcdFile, icmp_ln887_2_fu_338_p2, "icmp_ln887_2_fu_338_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, icmp_ln879_reg_476, "icmp_ln879_reg_476");
    sc_trace(mVcdFile, icmp_ln887_2_reg_514, "icmp_ln887_2_reg_514");
    sc_trace(mVcdFile, l1_V_blk_n_AR, "l1_V_blk_n_AR");
    sc_trace(mVcdFile, initialized_V_load_load_fu_215_p1, "initialized_V_load_load_fu_215_p1");
    sc_trace(mVcdFile, l1_V_blk_n_R, "l1_V_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, l1_V_blk_n_AW, "l1_V_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, l1_V_blk_n_W, "l1_V_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, l1_V_blk_n_B, "l1_V_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, icmp_ln879_1_reg_528, "icmp_ln879_1_reg_528");
    sc_trace(mVcdFile, icmp_ln883_reg_550, "icmp_ln883_reg_550");
    sc_trace(mVcdFile, undo_log_entry_V_TDATA_blk_n, "undo_log_entry_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, l1_V_AWVALID, "l1_V_AWVALID");
    sc_trace(mVcdFile, l1_V_AWREADY, "l1_V_AWREADY");
    sc_trace(mVcdFile, l1_V_WVALID, "l1_V_WVALID");
    sc_trace(mVcdFile, l1_V_WREADY, "l1_V_WREADY");
    sc_trace(mVcdFile, l1_V_ARVALID, "l1_V_ARVALID");
    sc_trace(mVcdFile, l1_V_ARREADY, "l1_V_ARREADY");
    sc_trace(mVcdFile, l1_V_ARADDR, "l1_V_ARADDR");
    sc_trace(mVcdFile, l1_V_RVALID, "l1_V_RVALID");
    sc_trace(mVcdFile, l1_V_RREADY, "l1_V_RREADY");
    sc_trace(mVcdFile, l1_V_RDATA, "l1_V_RDATA");
    sc_trace(mVcdFile, l1_V_RLAST, "l1_V_RLAST");
    sc_trace(mVcdFile, l1_V_RID, "l1_V_RID");
    sc_trace(mVcdFile, l1_V_RUSER, "l1_V_RUSER");
    sc_trace(mVcdFile, l1_V_RRESP, "l1_V_RRESP");
    sc_trace(mVcdFile, l1_V_BVALID, "l1_V_BVALID");
    sc_trace(mVcdFile, l1_V_BREADY, "l1_V_BREADY");
    sc_trace(mVcdFile, l1_V_BRESP, "l1_V_BRESP");
    sc_trace(mVcdFile, l1_V_BID, "l1_V_BID");
    sc_trace(mVcdFile, l1_V_BUSER, "l1_V_BUSER");
    sc_trace(mVcdFile, ap_block_state1_io, "ap_block_state1_io");
    sc_trace(mVcdFile, initialized_V_load_reg_445, "initialized_V_load_reg_445");
    sc_trace(mVcdFile, l1_V_addr_1_read_reg_466, "l1_V_addr_1_read_reg_466");
    sc_trace(mVcdFile, task_in_ttype_V_load_fu_255_p4, "task_in_ttype_V_load_fu_255_p4");
    sc_trace(mVcdFile, task_in_ttype_V_load_reg_471, "task_in_ttype_V_load_reg_471");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, icmp_ln879_fu_264_p2, "icmp_ln879_fu_264_p2");
    sc_trace(mVcdFile, grp_fu_199_p4, "grp_fu_199_p4");
    sc_trace(mVcdFile, ret_V_fu_274_p2, "ret_V_fu_274_p2");
    sc_trace(mVcdFile, ret_V_reg_491, "ret_V_reg_491");
    sc_trace(mVcdFile, v_V_fu_280_p2, "v_V_fu_280_p2");
    sc_trace(mVcdFile, v_V_reg_496, "v_V_reg_496");
    sc_trace(mVcdFile, ap_predicate_op86_write_state11, "ap_predicate_op86_write_state11");
    sc_trace(mVcdFile, ap_predicate_op94_write_state11, "ap_predicate_op94_write_state11");
    sc_trace(mVcdFile, ap_block_state11_io, "ap_block_state11_io");
    sc_trace(mVcdFile, sext_ln177_fu_328_p1, "sext_ln177_fu_328_p1");
    sc_trace(mVcdFile, sext_ln177_1_fu_367_p1, "sext_ln177_1_fu_367_p1");
    sc_trace(mVcdFile, grp_fu_208_p2, "grp_fu_208_p2");
    sc_trace(mVcdFile, ap_block_state12_io, "ap_block_state12_io");
    sc_trace(mVcdFile, icmp_ln879_1_fu_372_p2, "icmp_ln879_1_fu_372_p2");
    sc_trace(mVcdFile, ap_predicate_op99_write_state13, "ap_predicate_op99_write_state13");
    sc_trace(mVcdFile, ap_block_state13_io, "ap_block_state13_io");
    sc_trace(mVcdFile, base_flags_V_load_reg_532, "base_flags_V_load_reg_532");
    sc_trace(mVcdFile, l1_V_addr_2_reg_537, "l1_V_addr_2_reg_537");
    sc_trace(mVcdFile, current_flag_V_reg_544, "current_flag_V_reg_544");
    sc_trace(mVcdFile, icmp_ln883_fu_405_p2, "icmp_ln883_fu_405_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, add_ln1503_fu_422_p2, "add_ln1503_fu_422_p2");
    sc_trace(mVcdFile, add_ln1503_reg_554, "add_ln1503_reg_554");
    sc_trace(mVcdFile, ap_block_state24_io, "ap_block_state24_io");
    sc_trace(mVcdFile, total_v_V_loc_0_reg_179, "total_v_V_loc_0_reg_179");
    sc_trace(mVcdFile, ap_phi_mux_child_object_V_phi_fu_192_p4, "ap_phi_mux_child_object_V_phi_fu_192_p4");
    sc_trace(mVcdFile, child_object_V_reg_189, "child_object_V_reg_189");
    sc_trace(mVcdFile, sext_ln544_fu_395_p1, "sext_ln544_fu_395_p1");
    sc_trace(mVcdFile, ap_predicate_op133_writeresp_state29, "ap_predicate_op133_writeresp_state29");
    sc_trace(mVcdFile, regslice_both_task_out_V_U_apdone_blk, "regslice_both_task_out_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_undo_log_entry_V_U_apdone_blk, "regslice_both_undo_log_entry_V_U_apdone_blk");
    sc_trace(mVcdFile, ap_block_state29, "ap_block_state29");
    sc_trace(mVcdFile, p_Val2_s_fu_108, "p_Val2_s_fu_108");
    sc_trace(mVcdFile, p_Result_s_fu_304_p5, "p_Result_s_fu_304_p5");
    sc_trace(mVcdFile, grp_fu_208_p0, "grp_fu_208_p0");
    sc_trace(mVcdFile, zext_ln115_fu_270_p1, "zext_ln115_fu_270_p1");
    sc_trace(mVcdFile, zext_ln887_fu_286_p1, "zext_ln887_fu_286_p1");
    sc_trace(mVcdFile, tmp_fu_316_p5, "tmp_fu_316_p5");
    sc_trace(mVcdFile, p_Result_1_fu_343_p5, "p_Result_1_fu_343_p5");
    sc_trace(mVcdFile, trunc_ln176_fu_354_p1, "trunc_ln176_fu_354_p1");
    sc_trace(mVcdFile, tmp_1_fu_357_p4, "tmp_1_fu_357_p4");
    sc_trace(mVcdFile, lhs_V_fu_381_p0, "lhs_V_fu_381_p0");
    sc_trace(mVcdFile, lhs_V_fu_381_p1, "lhs_V_fu_381_p1");
    sc_trace(mVcdFile, rhs_V_fu_385_p1, "rhs_V_fu_385_p1");
    sc_trace(mVcdFile, ret_V_1_fu_389_p2, "ret_V_1_fu_389_p2");
    sc_trace(mVcdFile, trunc_ln1503_fu_410_p1, "trunc_ln1503_fu_410_p1");
    sc_trace(mVcdFile, tmp_5_fu_413_p4, "tmp_5_fu_413_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, task_out_V_TDATA_int, "task_out_V_TDATA_int");
    sc_trace(mVcdFile, task_out_V_TVALID_int, "task_out_V_TVALID_int");
    sc_trace(mVcdFile, task_out_V_TREADY_int, "task_out_V_TREADY_int");
    sc_trace(mVcdFile, regslice_both_task_out_V_U_vld_out, "regslice_both_task_out_V_U_vld_out");
    sc_trace(mVcdFile, undo_log_entry_V_TDATA_int, "undo_log_entry_V_TDATA_int");
    sc_trace(mVcdFile, undo_log_entry_V_TVALID_int, "undo_log_entry_V_TVALID_int");
    sc_trace(mVcdFile, undo_log_entry_V_TREADY_int, "undo_log_entry_V_TREADY_int");
    sc_trace(mVcdFile, regslice_both_undo_log_entry_V_U_vld_out, "regslice_both_undo_log_entry_V_U_vld_out");
#endif

    }
    mHdltvinHandle.open("mis_hls.hdltvin.dat");
    mHdltvoutHandle.open("mis_hls.hdltvout.dat");
}

mis_hls::~mis_hls() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete mis_hls_l1_V_m_axi_U;
    delete regslice_both_task_out_V_U;
    delete regslice_both_undo_log_entry_V_U;
}

void mis_hls::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void mis_hls::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_logic_0;
}

void mis_hls::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void mis_hls::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_1;
}

void mis_hls::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void mis_hls::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void mis_hls::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void mis_hls::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv32_2;
}

void mis_hls::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv4_F;
}

void mis_hls::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(ap_block_state12_io.read(), ap_const_boolean_0))) {
        child_object_V_reg_189 = grp_fu_208_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_264_p2.read()))) {
        child_object_V_reg_189 = task_in.read().range(99, 68);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, initialized_V_load_reg_445.read()))) {
        total_v_V_loc_0_reg_179 = l1_V_addr_1_read_reg_466.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, initialized_V_load_load_fu_215_p1.read()))) {
        total_v_V_loc_0_reg_179 = total_v_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln883_fu_405_p2.read()))) {
        add_ln1503_reg_554 = add_ln1503_fu_422_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(l1_V_RVALID.read(), ap_const_logic_1))) {
        base_flags_V = l1_V_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(ap_block_state13_io.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_1_fu_372_p2.read()))) {
        base_flags_V_load_reg_532 = base_flags_V.read();
        l1_V_addr_2_reg_537 =  (sc_lv<32>) (sext_ln544_fu_395_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && esl_seteq<1,1,1>(l1_V_RVALID.read(), ap_const_logic_1))) {
        current_flag_V_reg_544 = l1_V_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(ap_block_state13_io.read(), ap_const_boolean_0))) {
        icmp_ln879_1_reg_528 = icmp_ln879_1_fu_372_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        icmp_ln879_reg_476 = icmp_ln879_fu_264_p2.read();
        task_in_ttype_V_load_reg_471 = task_in.read().range(67, 64);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        icmp_ln883_reg_550 = icmp_ln883_fu_405_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(icmp_ln887_fu_290_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_state11_io.read(), ap_const_boolean_0))) {
        icmp_ln887_1_reg_505 = icmp_ln887_1_fu_295_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_fu_290_p2.read()) && esl_seteq<1,1,1>(ap_block_state11_io.read(), ap_const_boolean_0))) {
        icmp_ln887_2_reg_514 = icmp_ln887_2_fu_338_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, initialized_V.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        initialized_V = ap_const_lv1_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        initialized_V_load_reg_445 = initialized_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(l1_V_RVALID.read(), ap_const_logic_1))) {
        l1_V_addr_1_read_reg_466 = l1_V_RDATA.read();
        total_v_V = l1_V_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(icmp_ln887_fu_290_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_1_fu_295_p2.read()) && esl_seteq<1,1,1>(ap_block_state11_io.read(), ap_const_boolean_0))) {
        p_Val2_s_fu_108 = p_Result_s_fu_304_p5.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_264_p2.read()))) {
        ret_V_reg_491 = ret_V_fu_274_p2.read();
        v_V_reg_496 = v_V_fu_280_p2.read();
    }
}

void mis_hls::thread_add_ln1503_fu_422_p2() {
    add_ln1503_fu_422_p2 = (!trunc_ln1503_fu_410_p1.read().is_01() || !tmp_5_fu_413_p4.read().is_01())? sc_lv<30>(): (sc_biguint<30>(trunc_ln1503_fu_410_p1.read()) + sc_biguint<30>(tmp_5_fu_413_p4.read()));
}

void mis_hls::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void mis_hls::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void mis_hls::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void mis_hls::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void mis_hls::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void mis_hls::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void mis_hls::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void mis_hls::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void mis_hls::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void mis_hls::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void mis_hls::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void mis_hls::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void mis_hls::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void mis_hls::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void mis_hls::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void mis_hls::thread_ap_block_state11_io() {
    ap_block_state11_io = ((esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op86_write_state11.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, task_out_V_TREADY_int.read())) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op94_write_state11.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, task_out_V_TREADY_int.read())));
}

void mis_hls::thread_ap_block_state12_io() {
    ap_block_state12_io = (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_1_reg_505.read()) && esl_seteq<1,1,1>(ap_const_logic_0, task_out_V_TREADY_int.read()));
}

void mis_hls::thread_ap_block_state13_io() {
    ap_block_state13_io = (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op99_write_state13.read()) && esl_seteq<1,1,1>(ap_const_logic_0, task_out_V_TREADY_int.read()));
}

void mis_hls::thread_ap_block_state1_io() {
    ap_block_state1_io = (esl_seteq<1,1,1>(ap_const_lv1_0, initialized_V.read()) && esl_seteq<1,1,1>(ap_const_logic_0, l1_V_ARREADY.read()));
}

void mis_hls::thread_ap_block_state24_io() {
    ap_block_state24_io = (esl_seteq<1,1,1>(ap_const_logic_0, l1_V_WREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, undo_log_entry_V_TREADY_int.read()));
}

void mis_hls::thread_ap_block_state29() {
    ap_block_state29 = ((esl_seteq<1,1,1>(ap_const_logic_0, l1_V_BVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op133_writeresp_state29.read())) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_task_out_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_undo_log_entry_V_U_apdone_blk.read()));
}

void mis_hls::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_0, l1_V_BVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op133_writeresp_state29.read())) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_task_out_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_undo_log_entry_V_U_apdone_blk.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void mis_hls::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mis_hls::thread_ap_phi_mux_child_object_V_phi_fu_192_p4() {
    ap_phi_mux_child_object_V_phi_fu_192_p4 = child_object_V_reg_189.read();
}

void mis_hls::thread_ap_predicate_op133_writeresp_state29() {
    ap_predicate_op133_writeresp_state29 = (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_1_reg_528.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln883_reg_550.read()));
}

void mis_hls::thread_ap_predicate_op86_write_state11() {
    ap_predicate_op86_write_state11 = (esl_seteq<1,1,1>(icmp_ln887_fu_290_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_1_fu_295_p2.read()));
}

void mis_hls::thread_ap_predicate_op94_write_state11() {
    ap_predicate_op94_write_state11 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_fu_290_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_2_fu_338_p2.read()));
}

void mis_hls::thread_ap_predicate_op99_write_state13() {
    ap_predicate_op99_write_state13 = (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_reg_476.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_2_reg_514.read()));
}

void mis_hls::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_0, l1_V_BVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op133_writeresp_state29.read())) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_task_out_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_undo_log_entry_V_U_apdone_blk.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mis_hls::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void mis_hls::thread_grp_fu_199_p4() {
    grp_fu_199_p4 = task_in.read().range(99, 68);
}

void mis_hls::thread_grp_fu_208_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_208_p0 = child_object_V_reg_189.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        grp_fu_208_p0 = ap_phi_mux_child_object_V_phi_fu_192_p4.read();
    } else {
        grp_fu_208_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void mis_hls::thread_grp_fu_208_p2() {
    grp_fu_208_p2 = (!grp_fu_208_p0.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(grp_fu_208_p0.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void mis_hls::thread_icmp_ln879_1_fu_372_p2() {
    icmp_ln879_1_fu_372_p2 = (!task_in_ttype_V_load_reg_471.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<1>(): sc_lv<1>(task_in_ttype_V_load_reg_471.read() == ap_const_lv4_1);
}

void mis_hls::thread_icmp_ln879_fu_264_p2() {
    icmp_ln879_fu_264_p2 = (!task_in_ttype_V_load_fu_255_p4.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(task_in_ttype_V_load_fu_255_p4.read() == ap_const_lv4_0);
}

void mis_hls::thread_icmp_ln883_fu_405_p2() {
    icmp_ln883_fu_405_p2 = (!current_flag_V_reg_544.read().is_01() || !ap_const_lv32_2.is_01())? sc_lv<1>(): sc_lv<1>(current_flag_V_reg_544.read() == ap_const_lv32_2);
}

void mis_hls::thread_icmp_ln887_1_fu_295_p2() {
    icmp_ln887_1_fu_295_p2 = (!child_object_V_reg_189.read().is_01() || !total_v_V_loc_0_reg_179.read().is_01())? sc_lv<1>(): (sc_biguint<32>(child_object_V_reg_189.read()) < sc_biguint<32>(total_v_V_loc_0_reg_179.read()));
}

void mis_hls::thread_icmp_ln887_2_fu_338_p2() {
    icmp_ln887_2_fu_338_p2 = (!v_V_reg_496.read().is_01() || !total_v_V_loc_0_reg_179.read().is_01())? sc_lv<1>(): (sc_biguint<32>(v_V_reg_496.read()) < sc_biguint<32>(total_v_V_loc_0_reg_179.read()));
}

void mis_hls::thread_icmp_ln887_fu_290_p2() {
    icmp_ln887_fu_290_p2 = (!zext_ln887_fu_286_p1.read().is_01() || !ret_V_reg_491.read().is_01())? sc_lv<1>(): (sc_biguint<33>(zext_ln887_fu_286_p1.read()) < sc_biguint<33>(ret_V_reg_491.read()));
}

void mis_hls::thread_initialized_V_load_load_fu_215_p1() {
    initialized_V_load_load_fu_215_p1 = initialized_V.read();
}

void mis_hls::thread_l1_V_ARADDR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(l1_V_ARREADY.read(), ap_const_logic_1))) {
        l1_V_ARADDR = l1_V_addr_2_reg_537.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(l1_V_ARREADY.read(), ap_const_logic_1))) {
        l1_V_ARADDR =  (sc_lv<32>) (ap_const_lv64_1);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, initialized_V.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        l1_V_ARADDR =  (sc_lv<32>) (ap_const_lv64_3);
    } else {
        l1_V_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void mis_hls::thread_l1_V_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, initialized_V.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(l1_V_ARREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(l1_V_ARREADY.read(), ap_const_logic_1)))) {
        l1_V_ARVALID = ap_const_logic_1;
    } else {
        l1_V_ARVALID = ap_const_logic_0;
    }
}

void mis_hls::thread_l1_V_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
         esl_seteq<1,1,1>(l1_V_AWREADY.read(), ap_const_logic_1))) {
        l1_V_AWVALID = ap_const_logic_1;
    } else {
        l1_V_AWVALID = ap_const_logic_0;
    }
}

void mis_hls::thread_l1_V_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op133_writeresp_state29.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_0, l1_V_BVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op133_writeresp_state29.read())) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_task_out_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_undo_log_entry_V_U_apdone_blk.read())))) {
        l1_V_BREADY = ap_const_logic_1;
    } else {
        l1_V_BREADY = ap_const_logic_0;
    }
}

void mis_hls::thread_l1_V_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(l1_V_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
          esl_seteq<1,1,1>(l1_V_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(l1_V_RVALID.read(), ap_const_logic_1)))) {
        l1_V_RREADY = ap_const_logic_1;
    } else {
        l1_V_RREADY = ap_const_logic_0;
    }
}

void mis_hls::thread_l1_V_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
         esl_seteq<1,1,1>(ap_block_state24_io.read(), ap_const_boolean_0))) {
        l1_V_WVALID = ap_const_logic_1;
    } else {
        l1_V_WVALID = ap_const_logic_0;
    }
}

void mis_hls::thread_l1_V_blk_n_AR() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, initialized_V.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        l1_V_blk_n_AR = m_axi_l1_V_ARREADY.read();
    } else {
        l1_V_blk_n_AR = ap_const_logic_1;
    }
}

void mis_hls::thread_l1_V_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        l1_V_blk_n_AW = m_axi_l1_V_AWREADY.read();
    } else {
        l1_V_blk_n_AW = ap_const_logic_1;
    }
}

void mis_hls::thread_l1_V_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_1_reg_528.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln883_reg_550.read()))) {
        l1_V_blk_n_B = m_axi_l1_V_BVALID.read();
    } else {
        l1_V_blk_n_B = ap_const_logic_1;
    }
}

void mis_hls::thread_l1_V_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        l1_V_blk_n_R = m_axi_l1_V_RVALID.read();
    } else {
        l1_V_blk_n_R = ap_const_logic_1;
    }
}

void mis_hls::thread_l1_V_blk_n_W() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        l1_V_blk_n_W = m_axi_l1_V_WREADY.read();
    } else {
        l1_V_blk_n_W = ap_const_logic_1;
    }
}

void mis_hls::thread_lhs_V_fu_381_p0() {
    lhs_V_fu_381_p0 = base_flags_V.read();
}

void mis_hls::thread_lhs_V_fu_381_p1() {
    lhs_V_fu_381_p1 = esl_sext<34,32>(lhs_V_fu_381_p0.read());
}

void mis_hls::thread_p_Result_1_fu_343_p5() {
    p_Result_1_fu_343_p5 = esl_partset<64,64,32,32,32>(ap_const_lv64_0, v_V_reg_496.read(), ap_const_lv32_0, ap_const_lv32_1F);
}

void mis_hls::thread_p_Result_s_fu_304_p5() {
    p_Result_s_fu_304_p5 = esl_partset<64,64,32,32,32>(p_Val2_s_fu_108.read(), child_object_V_reg_189.read(), ap_const_lv32_0, ap_const_lv32_1F);
}

void mis_hls::thread_ret_V_1_fu_389_p2() {
    ret_V_1_fu_389_p2 = (!lhs_V_fu_381_p1.read().is_01() || !rhs_V_fu_385_p1.read().is_01())? sc_lv<34>(): (sc_bigint<34>(lhs_V_fu_381_p1.read()) + sc_biguint<34>(rhs_V_fu_385_p1.read()));
}

void mis_hls::thread_ret_V_fu_274_p2() {
    ret_V_fu_274_p2 = (!zext_ln115_fu_270_p1.read().is_01() || !ap_const_lv33_7.is_01())? sc_lv<33>(): (sc_biguint<33>(zext_ln115_fu_270_p1.read()) + sc_biguint<33>(ap_const_lv33_7));
}

void mis_hls::thread_rhs_V_fu_385_p1() {
    rhs_V_fu_385_p1 = esl_zext<34,32>(grp_fu_199_p4.read());
}

void mis_hls::thread_sext_ln177_1_fu_367_p1() {
    sext_ln177_1_fu_367_p1 = esl_sext<136,132>(tmp_1_fu_357_p4.read());
}

void mis_hls::thread_sext_ln177_fu_328_p1() {
    sext_ln177_fu_328_p1 = esl_sext<136,132>(tmp_fu_316_p5.read());
}

void mis_hls::thread_sext_ln544_fu_395_p1() {
    sext_ln544_fu_395_p1 = esl_sext<64,34>(ret_V_1_fu_389_p2.read());
}

void mis_hls::thread_task_in_ttype_V_load_fu_255_p4() {
    task_in_ttype_V_load_fu_255_p4 = task_in.read().range(67, 64);
}

void mis_hls::thread_task_out_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(icmp_ln887_fu_290_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_1_fu_295_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_1_reg_505.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_fu_290_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_2_fu_338_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_reg_476.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_2_reg_514.read())))) {
        task_out_V_TDATA_blk_n = task_out_V_TREADY_int.read();
    } else {
        task_out_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void mis_hls::thread_task_out_V_TDATA_int() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op94_write_state11.read())) {
            task_out_V_TDATA_int = sext_ln177_1_fu_367_p1.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op86_write_state11.read())) {
            task_out_V_TDATA_int = sext_ln177_fu_328_p1.read();
        } else {
            task_out_V_TDATA_int =  (sc_lv<136>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        task_out_V_TDATA_int =  (sc_lv<136>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void mis_hls::thread_task_out_V_TVALID() {
    task_out_V_TVALID = regslice_both_task_out_V_U_vld_out.read();
}

void mis_hls::thread_task_out_V_TVALID_int() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op86_write_state11.read()) && 
          esl_seteq<1,1,1>(ap_block_state11_io.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op94_write_state11.read()) && 
          esl_seteq<1,1,1>(ap_block_state11_io.read(), ap_const_boolean_0)))) {
        task_out_V_TVALID_int = ap_const_logic_1;
    } else {
        task_out_V_TVALID_int = ap_const_logic_0;
    }
}

void mis_hls::thread_tmp_1_fu_357_p4() {
    tmp_1_fu_357_p4 = esl_concat<68,64>(esl_concat<64,4>(p_Result_1_fu_343_p5.read(), ap_const_lv4_0), trunc_ln176_fu_354_p1.read());
}

void mis_hls::thread_tmp_5_fu_413_p4() {
    tmp_5_fu_413_p4 = task_in.read().range(97, 68);
}

void mis_hls::thread_tmp_fu_316_p5() {
    tmp_fu_316_p5 = esl_concat<100,32>(esl_concat<68,32>(esl_concat<64,4>(p_Result_s_fu_304_p5.read(), ap_const_lv4_2), child_object_V_reg_189.read()), grp_fu_208_p2.read());
}

void mis_hls::thread_trunc_ln1503_fu_410_p1() {
    trunc_ln1503_fu_410_p1 = base_flags_V_load_reg_532.read().range(30-1, 0);
}

void mis_hls::thread_trunc_ln176_fu_354_p1() {
    trunc_ln176_fu_354_p1 = task_in.read().range(64-1, 0);
}

void mis_hls::thread_undo_log_entry_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        undo_log_entry_V_TDATA_blk_n = undo_log_entry_V_TREADY_int.read();
    } else {
        undo_log_entry_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void mis_hls::thread_undo_log_entry_V_TDATA_int() {
    undo_log_entry_V_TDATA_int = esl_concat<62,2>(esl_concat<32,30>(current_flag_V_reg_544.read(), add_ln1503_reg_554.read()), ap_const_lv2_0);
}

void mis_hls::thread_undo_log_entry_V_TVALID() {
    undo_log_entry_V_TVALID = regslice_both_undo_log_entry_V_U_vld_out.read();
}

void mis_hls::thread_undo_log_entry_V_TVALID_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
         esl_seteq<1,1,1>(ap_block_state24_io.read(), ap_const_boolean_0))) {
        undo_log_entry_V_TVALID_int = ap_const_logic_1;
    } else {
        undo_log_entry_V_TVALID_int = ap_const_logic_0;
    }
}

void mis_hls::thread_v_V_fu_280_p2() {
    v_V_fu_280_p2 = (!grp_fu_199_p4.read().is_01() || !ap_const_lv32_7.is_01())? sc_lv<32>(): (sc_biguint<32>(grp_fu_199_p4.read()) + sc_biguint<32>(ap_const_lv32_7));
}

void mis_hls::thread_zext_ln115_fu_270_p1() {
    zext_ln115_fu_270_p1 = esl_zext<33,32>(grp_fu_199_p4.read());
}

void mis_hls::thread_zext_ln887_fu_286_p1() {
    zext_ln887_fu_286_p1 = esl_zext<33,32>(child_object_V_reg_189.read());
}

void mis_hls::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())) && esl_seteq<1,1,1>(ap_const_lv1_1, initialized_V_load_load_fu_215_p1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, initialized_V.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(l1_V_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(l1_V_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(l1_V_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_264_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_fu_290_p2.read()) && esl_seteq<1,1,1>(ap_block_state11_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(icmp_ln887_fu_290_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_state11_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(ap_block_state12_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(ap_block_state13_io.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_1_fu_372_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state29;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(ap_block_state13_io.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_1_fu_372_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(l1_V_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && esl_seteq<1,1,1>(l1_V_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state22;
            } else {
                ap_NS_fsm = ap_ST_fsm_state21;
            }
            break;
        case 2097152 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln883_fu_405_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state29;
            } else {
                ap_NS_fsm = ap_ST_fsm_state23;
            }
            break;
        case 4194304 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && esl_seteq<1,1,1>(l1_V_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state24;
            } else {
                ap_NS_fsm = ap_ST_fsm_state23;
            }
            break;
        case 8388608 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && esl_seteq<1,1,1>(ap_block_state24_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state25;
            } else {
                ap_NS_fsm = ap_ST_fsm_state24;
            }
            break;
        case 16777216 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && esl_seteq<1,1,1>(undo_log_entry_V_TREADY_int.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_state25;
            }
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, l1_V_BVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op133_writeresp_state29.read())) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_task_out_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_undo_log_entry_V_U_apdone_blk.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state29;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<29>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void mis_hls::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"task_in\" :  \"" << task_in.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"task_out_V_TDATA\" :  \"" << task_out_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"task_out_V_TVALID\" :  \"" << task_out_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"task_out_V_TREADY\" :  \"" << task_out_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWVALID\" :  \"" << m_axi_l1_V_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_AWREADY\" :  \"" << m_axi_l1_V_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWADDR\" :  \"" << m_axi_l1_V_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWID\" :  \"" << m_axi_l1_V_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWLEN\" :  \"" << m_axi_l1_V_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWSIZE\" :  \"" << m_axi_l1_V_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWBURST\" :  \"" << m_axi_l1_V_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWLOCK\" :  \"" << m_axi_l1_V_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWCACHE\" :  \"" << m_axi_l1_V_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWPROT\" :  \"" << m_axi_l1_V_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWQOS\" :  \"" << m_axi_l1_V_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWREGION\" :  \"" << m_axi_l1_V_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_AWUSER\" :  \"" << m_axi_l1_V_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_WVALID\" :  \"" << m_axi_l1_V_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_WREADY\" :  \"" << m_axi_l1_V_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_WDATA\" :  \"" << m_axi_l1_V_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_WSTRB\" :  \"" << m_axi_l1_V_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_WLAST\" :  \"" << m_axi_l1_V_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_WID\" :  \"" << m_axi_l1_V_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_WUSER\" :  \"" << m_axi_l1_V_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARVALID\" :  \"" << m_axi_l1_V_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_ARREADY\" :  \"" << m_axi_l1_V_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARADDR\" :  \"" << m_axi_l1_V_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARID\" :  \"" << m_axi_l1_V_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARLEN\" :  \"" << m_axi_l1_V_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARSIZE\" :  \"" << m_axi_l1_V_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARBURST\" :  \"" << m_axi_l1_V_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARLOCK\" :  \"" << m_axi_l1_V_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARCACHE\" :  \"" << m_axi_l1_V_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARPROT\" :  \"" << m_axi_l1_V_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARQOS\" :  \"" << m_axi_l1_V_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARREGION\" :  \"" << m_axi_l1_V_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_ARUSER\" :  \"" << m_axi_l1_V_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_RVALID\" :  \"" << m_axi_l1_V_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_RREADY\" :  \"" << m_axi_l1_V_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_RDATA\" :  \"" << m_axi_l1_V_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_RLAST\" :  \"" << m_axi_l1_V_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_RID\" :  \"" << m_axi_l1_V_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_RUSER\" :  \"" << m_axi_l1_V_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_RRESP\" :  \"" << m_axi_l1_V_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_BVALID\" :  \"" << m_axi_l1_V_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_l1_V_BREADY\" :  \"" << m_axi_l1_V_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_BRESP\" :  \"" << m_axi_l1_V_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_BID\" :  \"" << m_axi_l1_V_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_l1_V_BUSER\" :  \"" << m_axi_l1_V_BUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"undo_log_entry_V_TDATA\" :  \"" << undo_log_entry_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"undo_log_entry_V_TVALID\" :  \"" << undo_log_entry_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"undo_log_entry_V_TREADY\" :  \"" << undo_log_entry_V_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

