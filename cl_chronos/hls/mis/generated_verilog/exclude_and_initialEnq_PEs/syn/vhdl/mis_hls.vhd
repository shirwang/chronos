-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mis_hls is
generic (
    C_M_AXI_L1_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_L1_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_L1_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_L1_V_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_L1_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_L1_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_L1_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_L1_V_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_L1_V_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_L1_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_L1_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_L1_V_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    task_in : IN STD_LOGIC_VECTOR (131 downto 0);
    task_out_V_TDATA : OUT STD_LOGIC_VECTOR (135 downto 0);
    task_out_V_TVALID : OUT STD_LOGIC;
    task_out_V_TREADY : IN STD_LOGIC;
    m_axi_l1_V_AWVALID : OUT STD_LOGIC;
    m_axi_l1_V_AWREADY : IN STD_LOGIC;
    m_axi_l1_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_ADDR_WIDTH-1 downto 0);
    m_axi_l1_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_ID_WIDTH-1 downto 0);
    m_axi_l1_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_l1_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_l1_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_l1_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_AWUSER_WIDTH-1 downto 0);
    m_axi_l1_V_WVALID : OUT STD_LOGIC;
    m_axi_l1_V_WREADY : IN STD_LOGIC;
    m_axi_l1_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_DATA_WIDTH-1 downto 0);
    m_axi_l1_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_DATA_WIDTH/8-1 downto 0);
    m_axi_l1_V_WLAST : OUT STD_LOGIC;
    m_axi_l1_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_ID_WIDTH-1 downto 0);
    m_axi_l1_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_WUSER_WIDTH-1 downto 0);
    m_axi_l1_V_ARVALID : OUT STD_LOGIC;
    m_axi_l1_V_ARREADY : IN STD_LOGIC;
    m_axi_l1_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_ADDR_WIDTH-1 downto 0);
    m_axi_l1_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_ID_WIDTH-1 downto 0);
    m_axi_l1_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_l1_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_l1_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_l1_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_ARUSER_WIDTH-1 downto 0);
    m_axi_l1_V_RVALID : IN STD_LOGIC;
    m_axi_l1_V_RREADY : OUT STD_LOGIC;
    m_axi_l1_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_L1_V_DATA_WIDTH-1 downto 0);
    m_axi_l1_V_RLAST : IN STD_LOGIC;
    m_axi_l1_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_L1_V_ID_WIDTH-1 downto 0);
    m_axi_l1_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_L1_V_RUSER_WIDTH-1 downto 0);
    m_axi_l1_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_V_BVALID : IN STD_LOGIC;
    m_axi_l1_V_BREADY : OUT STD_LOGIC;
    m_axi_l1_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_L1_V_ID_WIDTH-1 downto 0);
    m_axi_l1_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_L1_V_BUSER_WIDTH-1 downto 0);
    undo_log_entry_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    undo_log_entry_V_TVALID : OUT STD_LOGIC;
    undo_log_entry_V_TREADY : IN STD_LOGIC );
end;


architecture behav of mis_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mis_hls,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=967,HLS_SYN_LUT=1198,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv33_7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal initialized_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal total_v_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal base_flags_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal task_out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln887_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_1_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln887_1_reg_505 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_2_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln879_reg_476 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_2_reg_514 : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_V_blk_n_AR : STD_LOGIC;
    signal initialized_V_load_load_fu_215_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal l1_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal l1_V_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal l1_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal icmp_ln879_1_reg_528 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln883_reg_550 : STD_LOGIC_VECTOR (0 downto 0);
    signal undo_log_entry_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal l1_V_AWVALID : STD_LOGIC;
    signal l1_V_AWREADY : STD_LOGIC;
    signal l1_V_WVALID : STD_LOGIC;
    signal l1_V_WREADY : STD_LOGIC;
    signal l1_V_ARVALID : STD_LOGIC;
    signal l1_V_ARREADY : STD_LOGIC;
    signal l1_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal l1_V_RVALID : STD_LOGIC;
    signal l1_V_RREADY : STD_LOGIC;
    signal l1_V_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal l1_V_RLAST : STD_LOGIC;
    signal l1_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal l1_V_BVALID : STD_LOGIC;
    signal l1_V_BREADY : STD_LOGIC;
    signal l1_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal l1_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_io : BOOLEAN;
    signal initialized_V_load_reg_445 : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_V_addr_1_read_reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal task_in_ttype_V_load_fu_255_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal task_in_ttype_V_load_reg_471 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln879_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_199_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_274_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_reg_491 : STD_LOGIC_VECTOR (32 downto 0);
    signal v_V_fu_280_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_V_reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op86_write_state11 : BOOLEAN;
    signal ap_predicate_op94_write_state11 : BOOLEAN;
    signal ap_block_state11_io : BOOLEAN;
    signal sext_ln177_fu_328_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal sext_ln177_1_fu_367_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal grp_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state12_io : BOOLEAN;
    signal icmp_ln879_1_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op99_write_state13 : BOOLEAN;
    signal ap_block_state13_io : BOOLEAN;
    signal base_flags_V_load_reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal l1_V_addr_2_reg_537 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_flag_V_reg_544 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln883_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal add_ln1503_fu_422_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln1503_reg_554 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_state24_io : BOOLEAN;
    signal total_v_V_loc_0_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_child_object_V_phi_fu_192_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal child_object_V_reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln544_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_op133_writeresp_state29 : BOOLEAN;
    signal regslice_both_task_out_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_undo_log_entry_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state29 : BOOLEAN;
    signal p_Val2_s_fu_108 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_304_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_208_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln115_fu_270_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln887_fu_286_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_fu_316_p5 : STD_LOGIC_VECTOR (131 downto 0);
    signal p_Result_1_fu_343_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln176_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_357_p4 : STD_LOGIC_VECTOR (131 downto 0);
    signal lhs_V_fu_381_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_fu_381_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal rhs_V_fu_385_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal ret_V_1_fu_389_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal trunc_ln1503_fu_410_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_5_fu_413_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);
    signal task_out_V_TDATA_int : STD_LOGIC_VECTOR (135 downto 0);
    signal task_out_V_TVALID_int : STD_LOGIC;
    signal task_out_V_TREADY_int : STD_LOGIC;
    signal regslice_both_task_out_V_U_vld_out : STD_LOGIC;
    signal undo_log_entry_V_TDATA_int : STD_LOGIC_VECTOR (63 downto 0);
    signal undo_log_entry_V_TVALID_int : STD_LOGIC;
    signal undo_log_entry_V_TREADY_int : STD_LOGIC;
    signal regslice_both_undo_log_entry_V_U_vld_out : STD_LOGIC;

    component mis_hls_l1_V_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    mis_hls_l1_V_m_axi_U : component mis_hls_l1_V_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_L1_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_L1_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_L1_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_L1_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_L1_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_L1_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_L1_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_L1_V_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_L1_V_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_L1_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_L1_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_L1_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_l1_V_AWVALID,
        AWREADY => m_axi_l1_V_AWREADY,
        AWADDR => m_axi_l1_V_AWADDR,
        AWID => m_axi_l1_V_AWID,
        AWLEN => m_axi_l1_V_AWLEN,
        AWSIZE => m_axi_l1_V_AWSIZE,
        AWBURST => m_axi_l1_V_AWBURST,
        AWLOCK => m_axi_l1_V_AWLOCK,
        AWCACHE => m_axi_l1_V_AWCACHE,
        AWPROT => m_axi_l1_V_AWPROT,
        AWQOS => m_axi_l1_V_AWQOS,
        AWREGION => m_axi_l1_V_AWREGION,
        AWUSER => m_axi_l1_V_AWUSER,
        WVALID => m_axi_l1_V_WVALID,
        WREADY => m_axi_l1_V_WREADY,
        WDATA => m_axi_l1_V_WDATA,
        WSTRB => m_axi_l1_V_WSTRB,
        WLAST => m_axi_l1_V_WLAST,
        WID => m_axi_l1_V_WID,
        WUSER => m_axi_l1_V_WUSER,
        ARVALID => m_axi_l1_V_ARVALID,
        ARREADY => m_axi_l1_V_ARREADY,
        ARADDR => m_axi_l1_V_ARADDR,
        ARID => m_axi_l1_V_ARID,
        ARLEN => m_axi_l1_V_ARLEN,
        ARSIZE => m_axi_l1_V_ARSIZE,
        ARBURST => m_axi_l1_V_ARBURST,
        ARLOCK => m_axi_l1_V_ARLOCK,
        ARCACHE => m_axi_l1_V_ARCACHE,
        ARPROT => m_axi_l1_V_ARPROT,
        ARQOS => m_axi_l1_V_ARQOS,
        ARREGION => m_axi_l1_V_ARREGION,
        ARUSER => m_axi_l1_V_ARUSER,
        RVALID => m_axi_l1_V_RVALID,
        RREADY => m_axi_l1_V_RREADY,
        RDATA => m_axi_l1_V_RDATA,
        RLAST => m_axi_l1_V_RLAST,
        RID => m_axi_l1_V_RID,
        RUSER => m_axi_l1_V_RUSER,
        RRESP => m_axi_l1_V_RRESP,
        BVALID => m_axi_l1_V_BVALID,
        BREADY => m_axi_l1_V_BREADY,
        BRESP => m_axi_l1_V_BRESP,
        BID => m_axi_l1_V_BID,
        BUSER => m_axi_l1_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => l1_V_ARVALID,
        I_ARREADY => l1_V_ARREADY,
        I_ARADDR => l1_V_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => l1_V_RVALID,
        I_RREADY => l1_V_RREADY,
        I_RDATA => l1_V_RDATA,
        I_RID => l1_V_RID,
        I_RUSER => l1_V_RUSER,
        I_RRESP => l1_V_RRESP,
        I_RLAST => l1_V_RLAST,
        I_AWVALID => l1_V_AWVALID,
        I_AWREADY => l1_V_AWREADY,
        I_AWADDR => l1_V_addr_2_reg_537,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => l1_V_WVALID,
        I_WREADY => l1_V_WREADY,
        I_WDATA => ap_const_lv32_2,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => l1_V_BVALID,
        I_BREADY => l1_V_BREADY,
        I_BRESP => l1_V_BRESP,
        I_BID => l1_V_BID,
        I_BUSER => l1_V_BUSER);

    regslice_both_task_out_V_U : component regslice_both
    generic map (
        DataWidth => 136)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => task_out_V_TDATA_int,
        vld_in => task_out_V_TVALID_int,
        ack_in => task_out_V_TREADY_int,
        data_out => task_out_V_TDATA,
        vld_out => regslice_both_task_out_V_U_vld_out,
        ack_out => task_out_V_TREADY,
        apdone_blk => regslice_both_task_out_V_U_apdone_blk);

    regslice_both_undo_log_entry_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => undo_log_entry_V_TDATA_int,
        vld_in => undo_log_entry_V_TVALID_int,
        ack_in => undo_log_entry_V_TREADY_int,
        data_out => undo_log_entry_V_TDATA,
        vld_out => regslice_both_undo_log_entry_V_U_vld_out,
        ack_out => undo_log_entry_V_TREADY,
        apdone_blk => regslice_both_undo_log_entry_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    child_object_V_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                child_object_V_reg_189 <= grp_fu_208_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln879_fu_264_p2 = ap_const_lv1_1))) then 
                child_object_V_reg_189 <= task_in(99 downto 68);
            end if; 
        end if;
    end process;

    total_v_V_loc_0_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (initialized_V_load_reg_445 = ap_const_lv1_0))) then 
                total_v_V_loc_0_reg_179 <= l1_V_addr_1_read_reg_466;
            elsif ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (initialized_V_load_load_fu_215_p1 = ap_const_lv1_1))) then 
                total_v_V_loc_0_reg_179 <= total_v_V;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln883_fu_405_p2 = ap_const_lv1_0))) then
                add_ln1503_reg_554 <= add_ln1503_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                base_flags_V <= l1_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln879_1_fu_372_p2 = ap_const_lv1_1))) then
                base_flags_V_load_reg_532 <= base_flags_V;
                l1_V_addr_2_reg_537 <= sext_ln544_fu_395_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                current_flag_V_reg_544 <= l1_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                icmp_ln879_1_reg_528 <= icmp_ln879_1_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                icmp_ln879_reg_476 <= icmp_ln879_fu_264_p2;
                task_in_ttype_V_load_reg_471 <= task_in(67 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                icmp_ln883_reg_550 <= icmp_ln883_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_io) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln887_fu_290_p2 = ap_const_lv1_1))) then
                icmp_ln887_1_reg_505 <= icmp_ln887_1_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_io) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln887_fu_290_p2 = ap_const_lv1_0))) then
                icmp_ln887_2_reg_514 <= icmp_ln887_2_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (initialized_V = ap_const_lv1_0))) then
                initialized_V <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                initialized_V_load_reg_445 <= initialized_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                l1_V_addr_1_read_reg_466 <= l1_V_RDATA;
                total_v_V <= l1_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_io) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln887_1_fu_295_p2 = ap_const_lv1_1) and (icmp_ln887_fu_290_p2 = ap_const_lv1_1))) then
                p_Val2_s_fu_108 <= p_Result_s_fu_304_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln879_fu_264_p2 = ap_const_lv1_1))) then
                ret_V_reg_491 <= ret_V_fu_274_p2;
                v_V_reg_496 <= v_V_fu_280_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, initialized_V, ap_CS_fsm_state11, icmp_ln887_fu_290_p2, ap_CS_fsm_state12, ap_CS_fsm_state13, initialized_V_load_load_fu_215_p1, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state29, ap_CS_fsm_state25, l1_V_AWREADY, l1_V_ARREADY, l1_V_RVALID, l1_V_BVALID, ap_block_state1_io, ap_CS_fsm_state10, icmp_ln879_fu_264_p2, ap_block_state11_io, ap_block_state12_io, icmp_ln879_1_fu_372_p2, ap_block_state13_io, icmp_ln883_fu_405_p2, ap_CS_fsm_state22, ap_block_state24_io, ap_predicate_op133_writeresp_state29, regslice_both_task_out_V_U_apdone_blk, regslice_both_undo_log_entry_V_U_apdone_blk, undo_log_entry_V_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (initialized_V_load_load_fu_215_p1 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (initialized_V = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln879_fu_264_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_boolean_0 = ap_block_state11_io) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln887_fu_290_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                elsif (((ap_const_boolean_0 = ap_block_state11_io) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln887_fu_290_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln879_1_fu_372_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                elsif (((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln879_1_fu_372_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln883_fu_405_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                if (((l1_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_boolean_0 = ap_block_state24_io) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((undo_log_entry_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if ((not(((regslice_both_undo_log_entry_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_task_out_V_U_apdone_blk = ap_const_logic_1) or ((ap_predicate_op133_writeresp_state29 = ap_const_boolean_1) and (l1_V_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln1503_fu_422_p2 <= std_logic_vector(unsigned(trunc_ln1503_fu_410_p1) + unsigned(tmp_5_fu_413_p4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state11_io_assign_proc : process(ap_predicate_op86_write_state11, ap_predicate_op94_write_state11, task_out_V_TREADY_int)
    begin
                ap_block_state11_io <= (((ap_predicate_op94_write_state11 = ap_const_boolean_1) and (task_out_V_TREADY_int = ap_const_logic_0)) or ((ap_predicate_op86_write_state11 = ap_const_boolean_1) and (task_out_V_TREADY_int = ap_const_logic_0)));
    end process;


    ap_block_state12_io_assign_proc : process(icmp_ln887_1_reg_505, task_out_V_TREADY_int)
    begin
                ap_block_state12_io <= ((task_out_V_TREADY_int = ap_const_logic_0) and (icmp_ln887_1_reg_505 = ap_const_lv1_1));
    end process;


    ap_block_state13_io_assign_proc : process(ap_predicate_op99_write_state13, task_out_V_TREADY_int)
    begin
                ap_block_state13_io <= ((ap_predicate_op99_write_state13 = ap_const_boolean_1) and (task_out_V_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state1_io_assign_proc : process(initialized_V, l1_V_ARREADY)
    begin
                ap_block_state1_io <= ((l1_V_ARREADY = ap_const_logic_0) and (initialized_V = ap_const_lv1_0));
    end process;


    ap_block_state24_io_assign_proc : process(l1_V_WREADY, undo_log_entry_V_TREADY_int)
    begin
                ap_block_state24_io <= ((undo_log_entry_V_TREADY_int = ap_const_logic_0) or (l1_V_WREADY = ap_const_logic_0));
    end process;


    ap_block_state29_assign_proc : process(l1_V_BVALID, ap_predicate_op133_writeresp_state29, regslice_both_task_out_V_U_apdone_blk, regslice_both_undo_log_entry_V_U_apdone_blk)
    begin
                ap_block_state29 <= ((regslice_both_undo_log_entry_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_task_out_V_U_apdone_blk = ap_const_logic_1) or ((ap_predicate_op133_writeresp_state29 = ap_const_boolean_1) and (l1_V_BVALID = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state29, l1_V_BVALID, ap_predicate_op133_writeresp_state29, regslice_both_task_out_V_U_apdone_blk, regslice_both_undo_log_entry_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_undo_log_entry_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_task_out_V_U_apdone_blk = ap_const_logic_1) or ((ap_predicate_op133_writeresp_state29 = ap_const_boolean_1) and (l1_V_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_child_object_V_phi_fu_192_p4 <= child_object_V_reg_189;

    ap_predicate_op133_writeresp_state29_assign_proc : process(icmp_ln879_1_reg_528, icmp_ln883_reg_550)
    begin
                ap_predicate_op133_writeresp_state29 <= ((icmp_ln879_1_reg_528 = ap_const_lv1_1) and (icmp_ln883_reg_550 = ap_const_lv1_0));
    end process;


    ap_predicate_op86_write_state11_assign_proc : process(icmp_ln887_fu_290_p2, icmp_ln887_1_fu_295_p2)
    begin
                ap_predicate_op86_write_state11 <= ((icmp_ln887_1_fu_295_p2 = ap_const_lv1_1) and (icmp_ln887_fu_290_p2 = ap_const_lv1_1));
    end process;


    ap_predicate_op94_write_state11_assign_proc : process(icmp_ln887_fu_290_p2, icmp_ln887_2_fu_338_p2)
    begin
                ap_predicate_op94_write_state11 <= ((icmp_ln887_2_fu_338_p2 = ap_const_lv1_1) and (icmp_ln887_fu_290_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op99_write_state13_assign_proc : process(icmp_ln879_reg_476, icmp_ln887_2_reg_514)
    begin
                ap_predicate_op99_write_state13 <= ((icmp_ln887_2_reg_514 = ap_const_lv1_1) and (icmp_ln879_reg_476 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state29, l1_V_BVALID, ap_predicate_op133_writeresp_state29, regslice_both_task_out_V_U_apdone_blk, regslice_both_undo_log_entry_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_undo_log_entry_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_task_out_V_U_apdone_blk = ap_const_logic_1) or ((ap_predicate_op133_writeresp_state29 = ap_const_boolean_1) and (l1_V_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_fu_199_p4 <= task_in(99 downto 68);

    grp_fu_208_p0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_phi_mux_child_object_V_phi_fu_192_p4, child_object_V_reg_189)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_208_p0 <= child_object_V_reg_189;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_208_p0 <= ap_phi_mux_child_object_V_phi_fu_192_p4;
        else 
            grp_fu_208_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_208_p2 <= std_logic_vector(unsigned(grp_fu_208_p0) + unsigned(ap_const_lv32_1));
    icmp_ln879_1_fu_372_p2 <= "1" when (task_in_ttype_V_load_reg_471 = ap_const_lv4_1) else "0";
    icmp_ln879_fu_264_p2 <= "1" when (task_in_ttype_V_load_fu_255_p4 = ap_const_lv4_0) else "0";
    icmp_ln883_fu_405_p2 <= "1" when (current_flag_V_reg_544 = ap_const_lv32_2) else "0";
    icmp_ln887_1_fu_295_p2 <= "1" when (unsigned(child_object_V_reg_189) < unsigned(total_v_V_loc_0_reg_179)) else "0";
    icmp_ln887_2_fu_338_p2 <= "1" when (unsigned(v_V_reg_496) < unsigned(total_v_V_loc_0_reg_179)) else "0";
    icmp_ln887_fu_290_p2 <= "1" when (unsigned(zext_ln887_fu_286_p1) < unsigned(ret_V_reg_491)) else "0";
    initialized_V_load_load_fu_215_p1 <= initialized_V;

    l1_V_ARADDR_assign_proc : process(ap_start, ap_CS_fsm_state1, initialized_V, ap_CS_fsm_state2, ap_CS_fsm_state14, l1_V_ARREADY, ap_block_state1_io, l1_V_addr_2_reg_537)
    begin
        if (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            l1_V_ARADDR <= l1_V_addr_2_reg_537;
        elsif (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            l1_V_ARADDR <= ap_const_lv64_1(32 - 1 downto 0);
        elsif ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (initialized_V = ap_const_lv1_0))) then 
            l1_V_ARADDR <= ap_const_lv64_3(32 - 1 downto 0);
        else 
            l1_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    l1_V_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, initialized_V, ap_CS_fsm_state2, ap_CS_fsm_state14, l1_V_ARREADY, ap_block_state1_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (initialized_V = ap_const_lv1_0)) or ((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            l1_V_ARVALID <= ap_const_logic_1;
        else 
            l1_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    l1_V_AWVALID_assign_proc : process(ap_CS_fsm_state23, l1_V_AWREADY)
    begin
        if (((l1_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            l1_V_AWVALID <= ap_const_logic_1;
        else 
            l1_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    l1_V_BREADY_assign_proc : process(ap_CS_fsm_state29, l1_V_BVALID, ap_predicate_op133_writeresp_state29, regslice_both_task_out_V_U_apdone_blk, regslice_both_undo_log_entry_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_undo_log_entry_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_task_out_V_U_apdone_blk = ap_const_logic_1) or ((ap_predicate_op133_writeresp_state29 = ap_const_boolean_1) and (l1_V_BVALID = ap_const_logic_0)))) and (ap_predicate_op133_writeresp_state29 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            l1_V_BREADY <= ap_const_logic_1;
        else 
            l1_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    l1_V_RREADY_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state21, l1_V_RVALID)
    begin
        if ((((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            l1_V_RREADY <= ap_const_logic_1;
        else 
            l1_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    l1_V_WVALID_assign_proc : process(ap_CS_fsm_state24, ap_block_state24_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state24_io) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            l1_V_WVALID <= ap_const_logic_1;
        else 
            l1_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    l1_V_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_l1_V_ARREADY, initialized_V, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (initialized_V = ap_const_lv1_0)))) then 
            l1_V_blk_n_AR <= m_axi_l1_V_ARREADY;
        else 
            l1_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    l1_V_blk_n_AW_assign_proc : process(m_axi_l1_V_AWREADY, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            l1_V_blk_n_AW <= m_axi_l1_V_AWREADY;
        else 
            l1_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    l1_V_blk_n_B_assign_proc : process(m_axi_l1_V_BVALID, ap_CS_fsm_state29, icmp_ln879_1_reg_528, icmp_ln883_reg_550)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_ln879_1_reg_528 = ap_const_lv1_1) and (icmp_ln883_reg_550 = ap_const_lv1_0))) then 
            l1_V_blk_n_B <= m_axi_l1_V_BVALID;
        else 
            l1_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    l1_V_blk_n_R_assign_proc : process(m_axi_l1_V_RVALID, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            l1_V_blk_n_R <= m_axi_l1_V_RVALID;
        else 
            l1_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    l1_V_blk_n_W_assign_proc : process(m_axi_l1_V_WREADY, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            l1_V_blk_n_W <= m_axi_l1_V_WREADY;
        else 
            l1_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    lhs_V_fu_381_p0 <= base_flags_V;
        lhs_V_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_381_p0),34));

    p_Result_1_fu_343_p5 <= (ap_const_lv64_0(63 downto 32) & v_V_reg_496);
    p_Result_s_fu_304_p5 <= (p_Val2_s_fu_108(63 downto 32) & child_object_V_reg_189);
    ret_V_1_fu_389_p2 <= std_logic_vector(signed(lhs_V_fu_381_p1) + signed(rhs_V_fu_385_p1));
    ret_V_fu_274_p2 <= std_logic_vector(unsigned(zext_ln115_fu_270_p1) + unsigned(ap_const_lv33_7));
    rhs_V_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_199_p4),34));
        sext_ln177_1_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_357_p4),136));

        sext_ln177_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_316_p5),136));

        sext_ln544_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_1_fu_389_p2),64));

    task_in_ttype_V_load_fu_255_p4 <= task_in(67 downto 64);

    task_out_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state11, icmp_ln887_fu_290_p2, icmp_ln887_1_fu_295_p2, ap_CS_fsm_state12, icmp_ln887_1_reg_505, icmp_ln887_2_fu_338_p2, ap_CS_fsm_state13, icmp_ln879_reg_476, icmp_ln887_2_reg_514, task_out_V_TREADY_int)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln887_2_reg_514 = ap_const_lv1_1) and (icmp_ln879_reg_476 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln887_1_reg_505 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln887_2_fu_338_p2 = ap_const_lv1_1) and (icmp_ln887_fu_290_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln887_1_fu_295_p2 = ap_const_lv1_1) and (icmp_ln887_fu_290_p2 = ap_const_lv1_1)))) then 
            task_out_V_TDATA_blk_n <= task_out_V_TREADY_int;
        else 
            task_out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    task_out_V_TDATA_int_assign_proc : process(ap_CS_fsm_state11, ap_predicate_op86_write_state11, ap_predicate_op94_write_state11, sext_ln177_fu_328_p1, sext_ln177_1_fu_367_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
            if ((ap_predicate_op94_write_state11 = ap_const_boolean_1)) then 
                task_out_V_TDATA_int <= sext_ln177_1_fu_367_p1;
            elsif ((ap_predicate_op86_write_state11 = ap_const_boolean_1)) then 
                task_out_V_TDATA_int <= sext_ln177_fu_328_p1;
            else 
                task_out_V_TDATA_int <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            task_out_V_TDATA_int <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    task_out_V_TVALID <= regslice_both_task_out_V_U_vld_out;

    task_out_V_TVALID_int_assign_proc : process(ap_CS_fsm_state11, ap_predicate_op86_write_state11, ap_predicate_op94_write_state11, ap_block_state11_io)
    begin
        if ((((ap_predicate_op94_write_state11 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state11_io) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_predicate_op86_write_state11 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state11_io) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            task_out_V_TVALID_int <= ap_const_logic_1;
        else 
            task_out_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_357_p4 <= ((p_Result_1_fu_343_p5 & ap_const_lv4_0) & trunc_ln176_fu_354_p1);
    tmp_5_fu_413_p4 <= task_in(97 downto 68);
    tmp_fu_316_p5 <= (((p_Result_s_fu_304_p5 & ap_const_lv4_2) & child_object_V_reg_189) & grp_fu_208_p2);
    trunc_ln1503_fu_410_p1 <= base_flags_V_load_reg_532(30 - 1 downto 0);
    trunc_ln176_fu_354_p1 <= task_in(64 - 1 downto 0);

    undo_log_entry_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, undo_log_entry_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            undo_log_entry_V_TDATA_blk_n <= undo_log_entry_V_TREADY_int;
        else 
            undo_log_entry_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    undo_log_entry_V_TDATA_int <= ((current_flag_V_reg_544 & add_ln1503_reg_554) & ap_const_lv2_0);
    undo_log_entry_V_TVALID <= regslice_both_undo_log_entry_V_U_vld_out;

    undo_log_entry_V_TVALID_int_assign_proc : process(ap_CS_fsm_state24, ap_block_state24_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state24_io) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            undo_log_entry_V_TVALID_int <= ap_const_logic_1;
        else 
            undo_log_entry_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    v_V_fu_280_p2 <= std_logic_vector(unsigned(grp_fu_199_p4) + unsigned(ap_const_lv32_7));
    zext_ln115_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_199_p4),33));
    zext_ln887_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(child_object_V_reg_189),33));
end behav;
