-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mis_hls is
generic (
    C_M_AXI_L1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_L1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_L1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_L1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_L1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_L1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_L1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_L1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_L1_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_L1_USER_VALUE : INTEGER := 0;
    C_M_AXI_L1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_L1_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    task_in : IN STD_LOGIC_VECTOR (191 downto 0);
    task_out_V_TDATA : OUT STD_LOGIC_VECTOR (191 downto 0);
    task_out_V_TVALID : OUT STD_LOGIC;
    task_out_V_TREADY : IN STD_LOGIC;
    m_axi_l1_AWVALID : OUT STD_LOGIC;
    m_axi_l1_AWREADY : IN STD_LOGIC;
    m_axi_l1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_ADDR_WIDTH-1 downto 0);
    m_axi_l1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_ID_WIDTH-1 downto 0);
    m_axi_l1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_l1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_l1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_l1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_AWUSER_WIDTH-1 downto 0);
    m_axi_l1_WVALID : OUT STD_LOGIC;
    m_axi_l1_WREADY : IN STD_LOGIC;
    m_axi_l1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_DATA_WIDTH-1 downto 0);
    m_axi_l1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_DATA_WIDTH/8-1 downto 0);
    m_axi_l1_WLAST : OUT STD_LOGIC;
    m_axi_l1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_ID_WIDTH-1 downto 0);
    m_axi_l1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_WUSER_WIDTH-1 downto 0);
    m_axi_l1_ARVALID : OUT STD_LOGIC;
    m_axi_l1_ARREADY : IN STD_LOGIC;
    m_axi_l1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_ADDR_WIDTH-1 downto 0);
    m_axi_l1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_ID_WIDTH-1 downto 0);
    m_axi_l1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_l1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_l1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_l1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_ARUSER_WIDTH-1 downto 0);
    m_axi_l1_RVALID : IN STD_LOGIC;
    m_axi_l1_RREADY : OUT STD_LOGIC;
    m_axi_l1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_L1_DATA_WIDTH-1 downto 0);
    m_axi_l1_RLAST : IN STD_LOGIC;
    m_axi_l1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_L1_ID_WIDTH-1 downto 0);
    m_axi_l1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_L1_RUSER_WIDTH-1 downto 0);
    m_axi_l1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_BVALID : IN STD_LOGIC;
    m_axi_l1_BREADY : OUT STD_LOGIC;
    m_axi_l1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_L1_ID_WIDTH-1 downto 0);
    m_axi_l1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_L1_BUSER_WIDTH-1 downto 0);
    undo_log_entry_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    undo_log_entry_V_TVALID : OUT STD_LOGIC;
    undo_log_entry_V_TREADY : IN STD_LOGIC );
end;


architecture behav of mis_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mis_hls_mis_hls,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.920000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=2231,HLS_SYN_LUT=2679,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (58 downto 0) := "00000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (58 downto 0) := "00000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (58 downto 0) := "00000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (58 downto 0) := "00000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (58 downto 0) := "00000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (58 downto 0) := "00000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (58 downto 0) := "00001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (58 downto 0) := "00010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (58 downto 0) := "00100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (58 downto 0) := "01000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (58 downto 0) := "10000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv33_7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv192_lc_1 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv192_lc_2 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_9D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv192_lc_3 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal initialized_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal base_flags_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal total_v_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal base_neighbor_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal base_degree_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal task_out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal icmp_ln878_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_2_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal icmp_ln878_2_reg_1123 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_3_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal icmp_ln878_4_reg_1040 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln878_1_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_5_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal l1_blk_n_AR : STD_LOGIC;
    signal initialized_V_load_load_fu_379_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal task_in_ttype_V_reg_902 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal l1_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal l1_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal l1_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal undo_log_entry_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal l1_AWVALID : STD_LOGIC;
    signal l1_AWREADY : STD_LOGIC;
    signal l1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal l1_WVALID : STD_LOGIC;
    signal l1_WREADY : STD_LOGIC;
    signal l1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal l1_ARVALID : STD_LOGIC;
    signal l1_ARREADY : STD_LOGIC;
    signal l1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal l1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal l1_RVALID : STD_LOGIC;
    signal l1_RREADY : STD_LOGIC;
    signal l1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal l1_RLAST : STD_LOGIC;
    signal l1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal l1_BVALID : STD_LOGIC;
    signal l1_BREADY : STD_LOGIC;
    signal l1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal l1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_324_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_349 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_333_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal reg_355 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal icmp_ln870_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal task_in_object_V_reg_895 : STD_LOGIC_VECTOR (31 downto 0);
    signal initialized_V_load_reg_906 : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_addr_read_reg_932 : STD_LOGIC_VECTOR (31 downto 0);
    signal l1_addr_1_read_reg_937 : STD_LOGIC_VECTOR (31 downto 0);
    signal l1_addr_4_reg_948 : STD_LOGIC_VECTOR (63 downto 0);
    signal l1_addr_3_reg_954 : STD_LOGIC_VECTOR (63 downto 0);
    signal l1_addr_2_reg_961 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_fu_513_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_reg_974 : STD_LOGIC_VECTOR (32 downto 0);
    signal v_V_2_fu_519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_V_2_reg_979 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_525_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_985 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ret_4_fu_552_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_4_reg_1000 : STD_LOGIC_VECTOR (32 downto 0);
    signal n_reg_1005 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_4_cast_fu_558_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal ret_4_cast_reg_1011 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_542_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i_reg_1016 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1346_fu_565_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1346_reg_1021 : STD_LOGIC_VECTOR (32 downto 0);
    signal ngh_cnt_V_fu_585_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ngh_cnt_V_reg_1026 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln174_fu_593_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln174_reg_1032 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln878_4_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln534_fu_614_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln534_reg_1044 : STD_LOGIC_VECTOR (32 downto 0);
    signal or_ln174_4_fu_638_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal l1_addr_5_reg_1057 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal or_ln174_2_fu_687_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal ngh_cnt_V_3_fu_699_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cur_flag_V_reg_1073 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_flag_reg_1078 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln213_1_fu_723_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln213_1_reg_1087 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln174_1_fu_729_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln174_1_reg_1092 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln213_fu_750_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln213_reg_1100 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_ln874_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln174_fu_763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln174_fu_780_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal p_0_fu_787_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln174_1_fu_838_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal p_s_fu_869_p5 : STD_LOGIC_VECTOR (191 downto 0);
    signal grp_fu_342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_lhs_1_phi_fu_287_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_1_reg_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_io : BOOLEAN;
    signal total_v_V_loc_0_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal ngh_cnt_V_1_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state31 : BOOLEAN;
    signal ap_block_state31_io : BOOLEAN;
    signal ap_phi_mux_v_V_4_phi_fu_317_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_V_4_reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state57 : BOOLEAN;
    signal ap_block_state57_io : BOOLEAN;
    signal sext_ln534_2_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln534_1_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln534_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln534_1_fu_648_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state30 : BOOLEAN;
    signal ap_block_state33_io : BOOLEAN;
    signal ap_block_state40 : BOOLEAN;
    signal ap_block_state43 : BOOLEAN;
    signal ap_block_state43_io : BOOLEAN;
    signal ap_block_state50_io : BOOLEAN;
    signal p_Val2_1_fu_162 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_2_fu_662_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_166 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_814_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_op266_write_state56 : BOOLEAN;
    signal ap_predicate_op274_write_state56 : BOOLEAN;
    signal ap_block_state56 : BOOLEAN;
    signal ap_block_state56_io : BOOLEAN;
    signal ap_predicate_op175_write_state21 : BOOLEAN;
    signal ap_block_state21 : BOOLEAN;
    signal ap_block_state21_io : BOOLEAN;
    signal grp_fu_342_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln215_2_fu_439_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln215_2_fu_443_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal ret_3_fu_446_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln215_1_fu_462_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln215_1_fu_466_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal ret_2_fu_469_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln215_fu_485_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln215_fu_489_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal ret_1_fu_493_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal start_v_V_cast_fu_509_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_542_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_542_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_n_cast_fu_548_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_n_cast_fu_548_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal start_n_cast8_fu_569_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_n_cast8_fu_569_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal empty_18_fu_579_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_17_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_18_fu_579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ngh_cnt_V_fu_585_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln878_fu_596_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln534_3_fu_610_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln174_3_fu_623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp5_fu_626_p6 : STD_LOGIC_VECTOR (191 downto 0);
    signal sext_ln534_4_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp4_fu_674_p6 : STD_LOGIC_VECTOR (191 downto 0);
    signal trunc_ln213_2_fu_719_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln213_1_fu_710_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln213_fu_746_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_1_fu_737_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal ulog_addr_V_fu_756_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_768_p6 : STD_LOGIC_VECTOR (191 downto 0);
    signal zext_ln878_fu_796_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal or_ln174_3_fu_826_p5 : STD_LOGIC_VECTOR (191 downto 0);
    signal p_Result_1_fu_855_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln174_2_fu_866_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_542_ce : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal regslice_both_task_out_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_undo_log_entry_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state59 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (58 downto 0);
    signal ap_block_state44 : BOOLEAN;
    signal ap_block_state44_io : BOOLEAN;
    signal task_out_V_TDATA_int_regslice : STD_LOGIC_VECTOR (191 downto 0);
    signal task_out_V_TVALID_int_regslice : STD_LOGIC;
    signal task_out_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_task_out_V_U_vld_out : STD_LOGIC;
    signal undo_log_entry_V_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal undo_log_entry_V_TVALID_int_regslice : STD_LOGIC;
    signal undo_log_entry_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_undo_log_entry_V_U_vld_out : STD_LOGIC;
    signal grp_fu_542_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_542_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component mis_hls_mul_32ns_32ns_64_7_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component mis_hls_l1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component mis_hls_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    l1_m_axi_U : component mis_hls_l1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_L1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_L1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_L1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_L1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_L1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_L1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_L1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_L1_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_L1_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_L1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_L1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_L1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_l1_AWVALID,
        AWREADY => m_axi_l1_AWREADY,
        AWADDR => m_axi_l1_AWADDR,
        AWID => m_axi_l1_AWID,
        AWLEN => m_axi_l1_AWLEN,
        AWSIZE => m_axi_l1_AWSIZE,
        AWBURST => m_axi_l1_AWBURST,
        AWLOCK => m_axi_l1_AWLOCK,
        AWCACHE => m_axi_l1_AWCACHE,
        AWPROT => m_axi_l1_AWPROT,
        AWQOS => m_axi_l1_AWQOS,
        AWREGION => m_axi_l1_AWREGION,
        AWUSER => m_axi_l1_AWUSER,
        WVALID => m_axi_l1_WVALID,
        WREADY => m_axi_l1_WREADY,
        WDATA => m_axi_l1_WDATA,
        WSTRB => m_axi_l1_WSTRB,
        WLAST => m_axi_l1_WLAST,
        WID => m_axi_l1_WID,
        WUSER => m_axi_l1_WUSER,
        ARVALID => m_axi_l1_ARVALID,
        ARREADY => m_axi_l1_ARREADY,
        ARADDR => m_axi_l1_ARADDR,
        ARID => m_axi_l1_ARID,
        ARLEN => m_axi_l1_ARLEN,
        ARSIZE => m_axi_l1_ARSIZE,
        ARBURST => m_axi_l1_ARBURST,
        ARLOCK => m_axi_l1_ARLOCK,
        ARCACHE => m_axi_l1_ARCACHE,
        ARPROT => m_axi_l1_ARPROT,
        ARQOS => m_axi_l1_ARQOS,
        ARREGION => m_axi_l1_ARREGION,
        ARUSER => m_axi_l1_ARUSER,
        RVALID => m_axi_l1_RVALID,
        RREADY => m_axi_l1_RREADY,
        RDATA => m_axi_l1_RDATA,
        RLAST => m_axi_l1_RLAST,
        RID => m_axi_l1_RID,
        RUSER => m_axi_l1_RUSER,
        RRESP => m_axi_l1_RRESP,
        BVALID => m_axi_l1_BVALID,
        BREADY => m_axi_l1_BREADY,
        BRESP => m_axi_l1_BRESP,
        BID => m_axi_l1_BID,
        BUSER => m_axi_l1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => l1_ARVALID,
        I_ARREADY => l1_ARREADY,
        I_ARADDR => l1_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => l1_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => l1_RVALID,
        I_RREADY => l1_RREADY,
        I_RDATA => l1_RDATA,
        I_RID => l1_RID,
        I_RUSER => l1_RUSER,
        I_RRESP => l1_RRESP,
        I_RLAST => l1_RLAST,
        I_AWVALID => l1_AWVALID,
        I_AWREADY => l1_AWREADY,
        I_AWADDR => l1_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => l1_WVALID,
        I_WREADY => l1_WREADY,
        I_WDATA => l1_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => l1_BVALID,
        I_BREADY => l1_BREADY,
        I_BRESP => l1_BRESP,
        I_BID => l1_BID,
        I_BUSER => l1_BUSER);

    mul_32ns_32ns_64_7_1_U1 : component mis_hls_mul_32ns_32ns_64_7_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_542_p0,
        din1 => grp_fu_542_p1,
        ce => grp_fu_542_ce,
        dout => grp_fu_542_p2);

    regslice_both_task_out_V_U : component mis_hls_regslice_both
    generic map (
        DataWidth => 192)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => task_out_V_TDATA_int_regslice,
        vld_in => task_out_V_TVALID_int_regslice,
        ack_in => task_out_V_TREADY_int_regslice,
        data_out => task_out_V_TDATA,
        vld_out => regslice_both_task_out_V_U_vld_out,
        ack_out => task_out_V_TREADY,
        apdone_blk => regslice_both_task_out_V_U_apdone_blk);

    regslice_both_undo_log_entry_V_U : component mis_hls_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => undo_log_entry_V_TDATA_int_regslice,
        vld_in => undo_log_entry_V_TVALID_int_regslice,
        ack_in => undo_log_entry_V_TREADY_int_regslice,
        data_out => undo_log_entry_V_TDATA,
        vld_out => regslice_both_undo_log_entry_V_U_vld_out,
        ack_out => undo_log_entry_V_TREADY,
        apdone_blk => regslice_both_undo_log_entry_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    lhs_1_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((initialized_V_load_reg_906 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                lhs_1_reg_284 <= l1_addr_read_reg_932;
            elsif ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (initialized_V_load_load_fu_379_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                lhs_1_reg_284 <= base_flags_V;
            end if; 
        end if;
    end process;

    ngh_cnt_V_1_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state31_io) or ((icmp_ln878_4_reg_1040 = ap_const_lv1_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                ngh_cnt_V_1_reg_304 <= ngh_cnt_V_3_fu_699_p2;
            elsif (((l1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                ngh_cnt_V_1_reg_304 <= reg_349;
            end if; 
        end if;
    end process;

    total_v_V_loc_0_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((initialized_V_load_reg_906 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                total_v_V_loc_0_reg_294 <= l1_addr_1_read_reg_937;
            elsif ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (initialized_V_load_load_fu_379_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                total_v_V_loc_0_reg_294 <= total_v_V;
            end if; 
        end if;
    end process;

    v_V_4_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state57_io) or ((icmp_ln878_2_reg_1123 = ap_const_lv1_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                v_V_4_reg_314 <= grp_fu_342_p2;
            elsif (((task_in_ttype_V_reg_902 = ap_const_lv4_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                v_V_4_reg_314 <= task_in(159 downto 128);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln870_fu_705_p2 = ap_const_lv1_1) and (task_in_ttype_V_reg_902 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                add_ln213_1_reg_1087 <= add_ln213_1_fu_723_p2;
                trunc_ln174_1_reg_1092 <= trunc_ln174_1_fu_729_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln874_fu_732_p2 = ap_const_lv1_0) and (task_in_ttype_V_reg_902 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                add_ln213_reg_1100 <= add_ln213_fu_750_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln878_4_fu_605_p2 = ap_const_lv1_1) and (icmp_ln878_1_fu_600_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                add_ln534_reg_1044 <= add_ln534_fu_614_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((l1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                base_degree_V <= l1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((l1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                base_flags_V <= l1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((l1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                base_neighbor_V <= l1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((task_in_ttype_V_reg_902 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                cur_flag_V_reg_1073 <= l1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((task_in_ttype_V_reg_902 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                current_flag_reg_1078 <= l1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_reg_985 <= task_in(191 downto 160);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln878_fu_800_p2 = ap_const_lv1_1))) then
                icmp_ln878_2_reg_1123 <= icmp_ln878_2_fu_805_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln878_1_fu_600_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                icmp_ln878_4_reg_1040 <= icmp_ln878_4_fu_605_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((initialized_V_load_reg_906 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                initialized_V <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                initialized_V_load_reg_906 <= initialized_V;
                task_in_object_V_reg_895 <= task_in(63 downto 32);
                task_in_ttype_V_reg_902 <= task_in(67 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                l1_addr_1_read_reg_937 <= l1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((task_in_ttype_V_reg_902 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                l1_addr_2_reg_961 <= sext_ln534_fu_499_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((task_in_ttype_V_reg_902 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                l1_addr_3_reg_954 <= sext_ln534_1_fu_475_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((task_in_ttype_V_reg_902 = ap_const_lv4_4) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                l1_addr_4_reg_948 <= sext_ln534_2_fu_452_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                l1_addr_5_reg_1057 <= add_ln534_1_fu_648_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                l1_addr_read_reg_932 <= l1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                mul_i_reg_1016 <= grp_fu_542_p2;
                n_reg_1005 <= l1_RDATA;
                ngh_cnt_V_reg_1026 <= ngh_cnt_V_fu_585_p3;
                    ret_4_cast_reg_1011(32 downto 0) <= ret_4_cast_fu_558_p1(32 downto 0);
                sext_ln1346_reg_1021 <= sext_ln1346_fu_565_p1;
                trunc_ln174_reg_1032 <= trunc_ln174_fu_593_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((l1_RVALID = ap_const_logic_0) or (task_out_V_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                p_Val2_1_fu_162 <= p_Result_2_fu_662_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state56_io) or ((ap_predicate_op274_write_state56 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op266_write_state56 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln878_2_fu_805_p2 = ap_const_lv1_1) and (icmp_ln878_fu_800_p2 = ap_const_lv1_1))) then
                p_Val2_s_fu_166 <= p_Result_s_fu_814_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((task_in_ttype_V_reg_902 = ap_const_lv4_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then
                reg_349 <= task_in(159 downto 128);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((icmp_ln870_fu_705_p2 = ap_const_lv1_1) and (task_in_ttype_V_reg_902 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state41)))) then
                reg_355 <= task_in(127 downto 68);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                ret_4_reg_1000 <= ret_4_fu_552_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((task_in_ttype_V_reg_902 = ap_const_lv4_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                ret_reg_974 <= ret_fu_513_p2;
                v_V_2_reg_979 <= v_V_2_fu_519_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((l1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                total_v_V <= l1_RDATA;
            end if;
        end if;
    end process;
    ret_4_cast_reg_1011(33) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, initialized_V, ap_CS_fsm_state56, icmp_ln878_fu_800_p2, ap_CS_fsm_state57, icmp_ln878_2_reg_1123, icmp_ln878_3_fu_850_p2, ap_CS_fsm_state58, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state30, ap_CS_fsm_state31, icmp_ln878_4_reg_1040, ap_CS_fsm_state21, icmp_ln878_1_fu_600_p2, icmp_ln878_5_fu_619_p2, ap_CS_fsm_state32, initialized_V_load_load_fu_379_p1, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state33, task_in_ttype_V_reg_902, ap_CS_fsm_state40, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state55, ap_CS_fsm_state42, ap_CS_fsm_state48, ap_CS_fsm_state13, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state51, l1_AWREADY, l1_ARREADY, l1_RVALID, l1_BVALID, ap_CS_fsm_state12, ap_CS_fsm_state41, icmp_ln870_fu_705_p2, icmp_ln878_4_fu_605_p2, icmp_ln874_fu_732_p2, ap_block_state1_io, ap_block_state31_io, ap_block_state57_io, ap_block_state33_io, ap_block_state43_io, ap_block_state50_io, ap_predicate_op266_write_state56, ap_predicate_op274_write_state56, ap_block_state56_io, ap_predicate_op175_write_state21, ap_block_state21_io, ap_CS_fsm_state59, regslice_both_task_out_V_U_apdone_blk, regslice_both_undo_log_entry_V_U_apdone_blk, ap_block_state44_io, task_out_V_TREADY_int_regslice, undo_log_entry_V_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (initialized_V_load_load_fu_379_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (initialized_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((l1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((l1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((l1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((l1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((l1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((task_in_ttype_V_reg_902 = ap_const_lv4_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                elsif ((not((task_in_ttype_V_reg_902 = ap_const_lv4_4)) and not((task_in_ttype_V_reg_902 = ap_const_lv4_0)) and not((task_in_ttype_V_reg_902 = ap_const_lv4_2)) and not((task_in_ttype_V_reg_902 = ap_const_lv4_1)) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and ((task_in_ttype_V_reg_902 = ap_const_lv4_2) or (task_in_ttype_V_reg_902 = ap_const_lv4_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((l1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((l1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if ((not(((ap_const_boolean_1 = ap_block_state21_io) or ((ap_predicate_op175_write_state21 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)))) and (icmp_ln878_5_fu_619_p2 = ap_const_lv1_0) and (icmp_ln878_1_fu_600_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                elsif ((not(((ap_const_boolean_1 = ap_block_state21_io) or ((ap_predicate_op175_write_state21 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)))) and (icmp_ln878_5_fu_619_p2 = ap_const_lv1_1) and (icmp_ln878_1_fu_600_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                elsif ((not(((ap_const_boolean_1 = ap_block_state21_io) or ((ap_predicate_op175_write_state21 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)))) and (icmp_ln878_4_fu_605_p2 = ap_const_lv1_0) and (icmp_ln878_1_fu_600_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                elsif ((not(((ap_const_boolean_1 = ap_block_state21_io) or ((ap_predicate_op175_write_state21 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)))) and (icmp_ln878_4_fu_605_p2 = ap_const_lv1_1) and (icmp_ln878_1_fu_600_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((l1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if ((not(((l1_RVALID = ap_const_logic_0) or (task_out_V_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if ((not(((ap_const_boolean_1 = ap_block_state31_io) or ((icmp_ln878_4_reg_1040 = ap_const_lv1_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (task_out_V_TREADY_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if (((ap_const_boolean_0 = ap_block_state33_io) and (ap_const_logic_1 = ap_CS_fsm_state33) and ((task_in_ttype_V_reg_902 = ap_const_lv4_2) or (task_in_ttype_V_reg_902 = ap_const_lv4_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if ((not((((l1_RVALID = ap_const_logic_0) and (task_in_ttype_V_reg_902 = ap_const_lv4_2)) or ((l1_RVALID = ap_const_logic_0) and (task_in_ttype_V_reg_902 = ap_const_lv4_1)))) and (ap_const_logic_1 = ap_CS_fsm_state40) and ((task_in_ttype_V_reg_902 = ap_const_lv4_2) or (task_in_ttype_V_reg_902 = ap_const_lv4_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                if (((icmp_ln874_fu_732_p2 = ap_const_lv1_0) and (task_in_ttype_V_reg_902 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state41) and (((icmp_ln874_fu_732_p2 = ap_const_lv1_1) and (task_in_ttype_V_reg_902 = ap_const_lv4_1)) or ((icmp_ln870_fu_705_p2 = ap_const_lv1_0) and (task_in_ttype_V_reg_902 = ap_const_lv4_2))))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state42 => 
                if (((l1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                if ((not(((ap_const_boolean_1 = ap_block_state43_io) or (undo_log_entry_V_TREADY_int_regslice = ap_const_logic_0) or (task_out_V_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                if ((not(((ap_const_boolean_1 = ap_block_state44_io) or (undo_log_entry_V_TREADY_int_regslice = ap_const_logic_0) or (task_out_V_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((l1_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                if (((l1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                if ((not(((ap_const_boolean_1 = ap_block_state50_io) or (undo_log_entry_V_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state51) and (undo_log_entry_V_TREADY_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                if (((l1_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                if ((not(((ap_const_boolean_1 = ap_block_state56_io) or ((ap_predicate_op274_write_state56 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op266_write_state56 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln878_3_fu_850_p2 = ap_const_lv1_0) and (icmp_ln878_fu_800_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                elsif ((not(((ap_const_boolean_1 = ap_block_state56_io) or ((ap_predicate_op274_write_state56 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op266_write_state56 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln878_3_fu_850_p2 = ap_const_lv1_1) and (icmp_ln878_fu_800_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                elsif ((not(((ap_const_boolean_1 = ap_block_state56_io) or ((ap_predicate_op274_write_state56 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op266_write_state56 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln878_fu_800_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                if ((not(((ap_const_boolean_1 = ap_block_state57_io) or ((icmp_ln878_2_reg_1123 = ap_const_lv1_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state58) and (task_out_V_TREADY_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                if ((not(((regslice_both_undo_log_entry_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_task_out_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln213_1_fu_723_p2 <= std_logic_vector(unsigned(trunc_ln213_2_fu_719_p1) + unsigned(trunc_ln213_1_fu_710_p4));
    add_ln213_fu_750_p2 <= std_logic_vector(unsigned(trunc_ln213_fu_746_p1) + unsigned(tmp_1_fu_737_p4));
    add_ln534_1_fu_648_p2 <= std_logic_vector(signed(sext_ln534_4_fu_645_p1) + signed(mul_i_reg_1016));
    add_ln534_fu_614_p2 <= std_logic_vector(signed(sext_ln1346_reg_1021) + signed(sext_ln534_3_fu_610_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_io_assign_proc : process(initialized_V, l1_ARREADY)
    begin
                ap_block_state1_io <= ((l1_ARREADY = ap_const_logic_0) and (initialized_V = ap_const_lv1_0));
    end process;


    ap_block_state21_assign_proc : process(ap_predicate_op175_write_state21, task_out_V_TREADY_int_regslice)
    begin
                ap_block_state21 <= ((ap_predicate_op175_write_state21 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state21_io_assign_proc : process(ap_predicate_op175_write_state21, task_out_V_TREADY_int_regslice)
    begin
                ap_block_state21_io <= ((ap_predicate_op175_write_state21 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state30_assign_proc : process(l1_RVALID, task_out_V_TREADY_int_regslice)
    begin
                ap_block_state30 <= ((l1_RVALID = ap_const_logic_0) or (task_out_V_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state31_assign_proc : process(icmp_ln878_4_reg_1040, task_out_V_TREADY_int_regslice)
    begin
                ap_block_state31 <= ((icmp_ln878_4_reg_1040 = ap_const_lv1_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state31_io_assign_proc : process(icmp_ln878_4_reg_1040, task_out_V_TREADY_int_regslice)
    begin
                ap_block_state31_io <= ((icmp_ln878_4_reg_1040 = ap_const_lv1_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state33_io_assign_proc : process(task_in_ttype_V_reg_902, l1_ARREADY)
    begin
                ap_block_state33_io <= (((l1_ARREADY = ap_const_logic_0) and (task_in_ttype_V_reg_902 = ap_const_lv4_2)) or ((l1_ARREADY = ap_const_logic_0) and (task_in_ttype_V_reg_902 = ap_const_lv4_1)));
    end process;


    ap_block_state40_assign_proc : process(task_in_ttype_V_reg_902, l1_RVALID)
    begin
                ap_block_state40 <= (((l1_RVALID = ap_const_logic_0) and (task_in_ttype_V_reg_902 = ap_const_lv4_2)) or ((l1_RVALID = ap_const_logic_0) and (task_in_ttype_V_reg_902 = ap_const_lv4_1)));
    end process;


    ap_block_state43_assign_proc : process(task_out_V_TREADY_int_regslice, undo_log_entry_V_TREADY_int_regslice)
    begin
                ap_block_state43 <= ((undo_log_entry_V_TREADY_int_regslice = ap_const_logic_0) or (task_out_V_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state43_io_assign_proc : process(l1_WREADY, task_out_V_TREADY_int_regslice, undo_log_entry_V_TREADY_int_regslice)
    begin
                ap_block_state43_io <= ((l1_WREADY = ap_const_logic_0) or (undo_log_entry_V_TREADY_int_regslice = ap_const_logic_0) or (task_out_V_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state44_assign_proc : process(task_out_V_TREADY_int_regslice, undo_log_entry_V_TREADY_int_regslice)
    begin
                ap_block_state44 <= ((undo_log_entry_V_TREADY_int_regslice = ap_const_logic_0) or (task_out_V_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state44_io_assign_proc : process(task_out_V_TREADY_int_regslice, undo_log_entry_V_TREADY_int_regslice)
    begin
                ap_block_state44_io <= ((undo_log_entry_V_TREADY_int_regslice = ap_const_logic_0) or (task_out_V_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state50_io_assign_proc : process(l1_WREADY, undo_log_entry_V_TREADY_int_regslice)
    begin
                ap_block_state50_io <= ((l1_WREADY = ap_const_logic_0) or (undo_log_entry_V_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state56_assign_proc : process(ap_predicate_op266_write_state56, ap_predicate_op274_write_state56, task_out_V_TREADY_int_regslice)
    begin
                ap_block_state56 <= (((ap_predicate_op274_write_state56 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op266_write_state56 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state56_io_assign_proc : process(ap_predicate_op266_write_state56, ap_predicate_op274_write_state56, task_out_V_TREADY_int_regslice)
    begin
                ap_block_state56_io <= (((ap_predicate_op274_write_state56 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op266_write_state56 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state57_assign_proc : process(icmp_ln878_2_reg_1123, task_out_V_TREADY_int_regslice)
    begin
                ap_block_state57 <= ((icmp_ln878_2_reg_1123 = ap_const_lv1_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state57_io_assign_proc : process(icmp_ln878_2_reg_1123, task_out_V_TREADY_int_regslice)
    begin
                ap_block_state57_io <= ((icmp_ln878_2_reg_1123 = ap_const_lv1_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state59_assign_proc : process(regslice_both_task_out_V_U_apdone_blk, regslice_both_undo_log_entry_V_U_apdone_blk)
    begin
                ap_block_state59 <= ((regslice_both_undo_log_entry_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_task_out_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state59, regslice_both_task_out_V_U_apdone_blk, regslice_both_undo_log_entry_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_undo_log_entry_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_task_out_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_lhs_1_phi_fu_287_p4_assign_proc : process(ap_CS_fsm_state12, initialized_V_load_reg_906, l1_addr_read_reg_932, lhs_1_reg_284)
    begin
        if (((initialized_V_load_reg_906 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ap_phi_mux_lhs_1_phi_fu_287_p4 <= l1_addr_read_reg_932;
        else 
            ap_phi_mux_lhs_1_phi_fu_287_p4 <= lhs_1_reg_284;
        end if; 
    end process;

    ap_phi_mux_v_V_4_phi_fu_317_p4 <= v_V_4_reg_314;

    ap_predicate_op175_write_state21_assign_proc : process(icmp_ln878_1_fu_600_p2, icmp_ln878_5_fu_619_p2)
    begin
                ap_predicate_op175_write_state21 <= ((icmp_ln878_5_fu_619_p2 = ap_const_lv1_1) and (icmp_ln878_1_fu_600_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op266_write_state56_assign_proc : process(icmp_ln878_fu_800_p2, icmp_ln878_2_fu_805_p2)
    begin
                ap_predicate_op266_write_state56 <= ((icmp_ln878_2_fu_805_p2 = ap_const_lv1_1) and (icmp_ln878_fu_800_p2 = ap_const_lv1_1));
    end process;


    ap_predicate_op274_write_state56_assign_proc : process(icmp_ln878_fu_800_p2, icmp_ln878_3_fu_850_p2)
    begin
                ap_predicate_op274_write_state56 <= ((icmp_ln878_3_fu_850_p2 = ap_const_lv1_1) and (icmp_ln878_fu_800_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state59, regslice_both_task_out_V_U_apdone_blk, regslice_both_undo_log_entry_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_undo_log_entry_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_task_out_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    empty_17_fu_573_p2 <= "1" when (signed(ret_4_cast_fu_558_p1) > signed(start_n_cast8_fu_569_p1)) else "0";
    empty_18_fu_579_p0 <= reg_349;
    empty_18_fu_579_p2 <= std_logic_vector(signed(empty_18_fu_579_p0) + signed(ap_const_lv32_7));
    grp_fu_324_p4 <= task_in(159 downto 128);
    grp_fu_333_p4 <= task_in(127 downto 68);

    grp_fu_342_p0_assign_proc : process(ap_CS_fsm_state56, ap_CS_fsm_state57, ap_phi_mux_v_V_4_phi_fu_317_p4, v_V_4_reg_314)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_342_p0 <= v_V_4_reg_314;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_342_p0 <= ap_phi_mux_v_V_4_phi_fu_317_p4;
        else 
            grp_fu_342_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_342_p2 <= std_logic_vector(unsigned(grp_fu_342_p0) + unsigned(ap_const_lv32_1));

    grp_fu_542_ce_assign_proc : process(ap_CS_fsm_state20, l1_RVALID, ap_CS_fsm_state19, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((l1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)))) then 
            grp_fu_542_ce <= ap_const_logic_1;
        else 
            grp_fu_542_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_542_p0 <= grp_fu_542_p00(32 - 1 downto 0);
    grp_fu_542_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(total_v_V_loc_0_reg_294),64));
    grp_fu_542_p1 <= grp_fu_542_p10(32 - 1 downto 0);
    grp_fu_542_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_525_p4),64));
    i_fu_525_p4 <= task_in(191 downto 160);
    icmp_ln870_fu_705_p2 <= "1" when (cur_flag_V_reg_1073 = ap_const_lv32_0) else "0";
    icmp_ln874_fu_732_p2 <= "1" when (current_flag_reg_1078 = ap_const_lv32_2) else "0";
    icmp_ln878_1_fu_600_p2 <= "1" when (signed(sext_ln878_fu_596_p1) < signed(ret_4_cast_reg_1011)) else "0";
    icmp_ln878_2_fu_805_p2 <= "1" when (unsigned(v_V_4_reg_314) < unsigned(total_v_V_loc_0_reg_294)) else "0";
    icmp_ln878_3_fu_850_p2 <= "1" when (unsigned(v_V_2_reg_979) < unsigned(total_v_V_loc_0_reg_294)) else "0";
    icmp_ln878_4_fu_605_p2 <= "1" when (signed(ngh_cnt_V_1_reg_304) < signed(n_reg_1005)) else "0";
    icmp_ln878_5_fu_619_p2 <= "1" when (signed(ngh_cnt_V_reg_1026) < signed(n_reg_1005)) else "0";
    icmp_ln878_fu_800_p2 <= "1" when (unsigned(zext_ln878_fu_796_p1) < unsigned(ret_reg_974)) else "0";
    initialized_V_load_load_fu_379_p1 <= initialized_V;

    l1_ARADDR_assign_proc : process(ap_start, ap_CS_fsm_state1, initialized_V, ap_CS_fsm_state4, ap_CS_fsm_state33, task_in_ttype_V_reg_902, ap_CS_fsm_state13, ap_CS_fsm_state23, l1_ARREADY, l1_addr_4_reg_948, l1_addr_3_reg_954, l1_addr_2_reg_961, l1_addr_5_reg_1057, ap_block_state1_io, ap_block_state33_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state33_io) and (task_in_ttype_V_reg_902 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            l1_ARADDR <= l1_addr_2_reg_961;
        elsif (((ap_const_boolean_0 = ap_block_state33_io) and (task_in_ttype_V_reg_902 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            l1_ARADDR <= l1_addr_3_reg_954;
        elsif (((l1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            l1_ARADDR <= l1_addr_5_reg_1057;
        elsif (((l1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            l1_ARADDR <= l1_addr_4_reg_948;
        elsif (((l1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            l1_ARADDR <= ap_const_lv64_1;
        elsif ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (initialized_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            l1_ARADDR <= ap_const_lv64_3;
        else 
            l1_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    l1_ARLEN_assign_proc : process(ap_start, ap_CS_fsm_state1, initialized_V, ap_CS_fsm_state4, ap_CS_fsm_state33, task_in_ttype_V_reg_902, ap_CS_fsm_state13, ap_CS_fsm_state23, l1_ARREADY, ap_block_state1_io, ap_block_state33_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state33_io) and (task_in_ttype_V_reg_902 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_boolean_0 = ap_block_state33_io) and (task_in_ttype_V_reg_902 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((l1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((l1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((l1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            l1_ARLEN <= ap_const_lv32_1;
        elsif ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (initialized_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            l1_ARLEN <= ap_const_lv32_3;
        else 
            l1_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    l1_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, initialized_V, ap_CS_fsm_state4, ap_CS_fsm_state33, task_in_ttype_V_reg_902, ap_CS_fsm_state13, ap_CS_fsm_state23, l1_ARREADY, ap_block_state1_io, ap_block_state33_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state33_io) and (task_in_ttype_V_reg_902 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_boolean_0 = ap_block_state33_io) and (task_in_ttype_V_reg_902 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((l1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((l1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((l1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (initialized_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            l1_ARVALID <= ap_const_logic_1;
        else 
            l1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    l1_AWADDR_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state42, l1_AWREADY, l1_addr_3_reg_954, l1_addr_2_reg_961)
    begin
        if ((l1_AWREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                l1_AWADDR <= l1_addr_2_reg_961;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                l1_AWADDR <= l1_addr_3_reg_954;
            else 
                l1_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            l1_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    l1_AWVALID_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state42, l1_AWREADY)
    begin
        if ((((l1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((l1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            l1_AWVALID <= ap_const_logic_1;
        else 
            l1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    l1_BREADY_assign_proc : process(ap_CS_fsm_state55, ap_CS_fsm_state48, l1_BVALID)
    begin
        if ((((l1_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((l1_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state55)))) then 
            l1_BREADY <= ap_const_logic_1;
        else 
            l1_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    l1_RREADY_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, task_in_ttype_V_reg_902, ap_CS_fsm_state40, ap_CS_fsm_state20, l1_RVALID, task_out_V_TREADY_int_regslice)
    begin
        if (((not((((l1_RVALID = ap_const_logic_0) and (task_in_ttype_V_reg_902 = ap_const_lv4_2)) or ((l1_RVALID = ap_const_logic_0) and (task_in_ttype_V_reg_902 = ap_const_lv4_1)))) and (task_in_ttype_V_reg_902 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state40)) or (not((((l1_RVALID = ap_const_logic_0) and (task_in_ttype_V_reg_902 = ap_const_lv4_2)) or ((l1_RVALID = ap_const_logic_0) and (task_in_ttype_V_reg_902 = ap_const_lv4_1)))) and (task_in_ttype_V_reg_902 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((l1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((l1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((l1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((l1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((l1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((l1_RVALID = ap_const_logic_0) or (task_out_V_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            l1_RREADY <= ap_const_logic_1;
        else 
            l1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    l1_WDATA_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state50, task_out_V_TREADY_int_regslice, undo_log_entry_V_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) and (undo_log_entry_V_TREADY_int_regslice = ap_const_logic_1))) then 
            l1_WDATA <= ap_const_lv32_2;
        elsif ((not(((undo_log_entry_V_TREADY_int_regslice = ap_const_logic_0) or (task_out_V_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            l1_WDATA <= ap_const_lv32_1;
        else 
            l1_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    l1_WVALID_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state50, ap_block_state43_io, ap_block_state50_io, task_out_V_TREADY_int_regslice, undo_log_entry_V_TREADY_int_regslice)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state50_io) or (undo_log_entry_V_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state50)) or (not(((ap_const_boolean_1 = ap_block_state43_io) or (undo_log_entry_V_TREADY_int_regslice = ap_const_logic_0) or (task_out_V_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state43)))) then 
            l1_WVALID <= ap_const_logic_1;
        else 
            l1_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    l1_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_l1_ARREADY, initialized_V, ap_CS_fsm_state4, ap_CS_fsm_state33, task_in_ttype_V_reg_902, ap_CS_fsm_state13, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((task_in_ttype_V_reg_902 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((task_in_ttype_V_reg_902 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_start = ap_const_logic_1) and (initialized_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            l1_blk_n_AR <= m_axi_l1_ARREADY;
        else 
            l1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    l1_blk_n_AW_assign_proc : process(m_axi_l1_AWREADY, ap_CS_fsm_state49, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            l1_blk_n_AW <= m_axi_l1_AWREADY;
        else 
            l1_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    l1_blk_n_B_assign_proc : process(m_axi_l1_BVALID, ap_CS_fsm_state55, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            l1_blk_n_B <= m_axi_l1_BVALID;
        else 
            l1_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    l1_blk_n_R_assign_proc : process(m_axi_l1_RVALID, ap_CS_fsm_state30, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, task_in_ttype_V_reg_902, ap_CS_fsm_state40, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state30) or ((task_in_ttype_V_reg_902 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((task_in_ttype_V_reg_902 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state40)))) then 
            l1_blk_n_R <= m_axi_l1_RVALID;
        else 
            l1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    l1_blk_n_W_assign_proc : process(m_axi_l1_WREADY, ap_CS_fsm_state43, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            l1_blk_n_W <= m_axi_l1_WREADY;
        else 
            l1_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    ngh_cnt_V_3_fu_699_p2 <= std_logic_vector(signed(ngh_cnt_V_1_reg_304) + signed(ap_const_lv32_1));
    ngh_cnt_V_fu_585_p2 <= reg_349;
    ngh_cnt_V_fu_585_p3 <= 
        empty_18_fu_579_p2 when (empty_17_fu_573_p2(0) = '1') else 
        ngh_cnt_V_fu_585_p2;
    or_ln174_1_fu_838_p2 <= (or_ln174_3_fu_826_p5 or ap_const_lv192_lc_3);
    or_ln174_2_fu_687_p2 <= (tmp4_fu_674_p6 or ap_const_lv192_lc_2);
    or_ln174_3_fu_826_p5 <= (((p_Result_s_fu_814_p5 & ap_const_lv64_0) & v_V_4_reg_314) & grp_fu_342_p2);
    or_ln174_4_fu_638_p2 <= (tmp5_fu_626_p6 or ap_const_lv192_lc_1);
    or_ln174_fu_780_p2 <= (tmp1_fu_768_p6 or ap_const_lv192_lc_1);
    p_0_fu_787_p4 <= ((current_flag_reg_1078 & add_ln213_reg_1100) & ap_const_lv2_0);
    p_Result_1_fu_855_p5 <= (ap_const_lv64_0(63 downto 32) & v_V_2_reg_979);
    p_Result_2_fu_662_p5 <= (p_Val2_1_fu_162(63 downto 32) & l1_RDATA);
    p_Result_s_fu_814_p5 <= (p_Val2_s_fu_166(63 downto 32) & v_V_4_reg_314);
    p_s_fu_869_p5 <= (((p_Result_1_fu_855_p5 & grp_fu_333_p4) & ap_const_lv4_0) & trunc_ln174_2_fu_866_p1);
    ret_1_fu_493_p2 <= std_logic_vector(signed(sext_ln215_fu_485_p1) + signed(zext_ln215_fu_489_p1));
    ret_2_fu_469_p2 <= std_logic_vector(signed(sext_ln215_1_fu_462_p1) + signed(zext_ln215_1_fu_466_p1));
    ret_3_fu_446_p2 <= std_logic_vector(signed(sext_ln215_2_fu_439_p1) + signed(zext_ln215_2_fu_443_p1));
    ret_4_cast_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_4_reg_1000),34));
    ret_4_fu_552_p2 <= std_logic_vector(unsigned(start_n_cast_fu_548_p1) + unsigned(ap_const_lv33_7));
    ret_fu_513_p2 <= std_logic_vector(unsigned(start_v_V_cast_fu_509_p1) + unsigned(ap_const_lv33_7));
        sext_ln1346_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(base_neighbor_V),33));

        sext_ln215_1_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_lhs_1_phi_fu_287_p4),34));

        sext_ln215_2_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(base_degree_V),34));

        sext_ln215_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_lhs_1_phi_fu_287_p4),34));

        sext_ln534_1_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_2_fu_469_p2),64));

        sext_ln534_2_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_3_fu_446_p2),64));

        sext_ln534_3_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ngh_cnt_V_1_reg_304),33));

        sext_ln534_4_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln534_reg_1044),64));

        sext_ln534_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_1_fu_493_p2),64));

        sext_ln878_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ngh_cnt_V_1_reg_304),34));

    start_n_cast8_fu_569_p0 <= reg_349;
        start_n_cast8_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(start_n_cast8_fu_569_p0),34));

    start_n_cast_fu_548_p0 <= grp_fu_324_p4;
    start_n_cast_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_n_cast_fu_548_p0),33));
    start_v_V_cast_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_324_p4),33));

    task_out_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state56, icmp_ln878_fu_800_p2, icmp_ln878_2_fu_805_p2, ap_CS_fsm_state57, icmp_ln878_2_reg_1123, icmp_ln878_3_fu_850_p2, ap_CS_fsm_state58, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state30, ap_CS_fsm_state31, icmp_ln878_4_reg_1040, ap_CS_fsm_state21, icmp_ln878_1_fu_600_p2, icmp_ln878_5_fu_619_p2, ap_CS_fsm_state32, task_out_V_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state58) or ((icmp_ln878_5_fu_619_p2 = ap_const_lv1_1) and (icmp_ln878_1_fu_600_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln878_4_reg_1040 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_const_logic_1 = ap_CS_fsm_state57) and (icmp_ln878_2_reg_1123 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln878_3_fu_850_p2 = ap_const_lv1_1) and (icmp_ln878_fu_800_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln878_2_fu_805_p2 = ap_const_lv1_1) and (icmp_ln878_fu_800_p2 = ap_const_lv1_1)))) then 
            task_out_V_TDATA_blk_n <= task_out_V_TREADY_int_regslice;
        else 
            task_out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    task_out_V_TDATA_int_regslice_assign_proc : process(ap_CS_fsm_state56, ap_CS_fsm_state43, ap_CS_fsm_state30, ap_CS_fsm_state21, l1_RVALID, or_ln174_4_fu_638_p2, or_ln174_2_fu_687_p2, or_ln174_fu_780_p2, or_ln174_1_fu_838_p2, p_s_fu_869_p5, ap_predicate_op266_write_state56, ap_predicate_op274_write_state56, ap_predicate_op175_write_state21, task_out_V_TREADY_int_regslice, undo_log_entry_V_TREADY_int_regslice)
    begin
        if ((not((((ap_predicate_op274_write_state56 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op266_write_state56 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)))) and (ap_predicate_op274_write_state56 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            task_out_V_TDATA_int_regslice <= p_s_fu_869_p5;
        elsif ((not((((ap_predicate_op274_write_state56 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op266_write_state56 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)))) and (ap_predicate_op266_write_state56 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            task_out_V_TDATA_int_regslice <= or_ln174_1_fu_838_p2;
        elsif ((not(((undo_log_entry_V_TREADY_int_regslice = ap_const_logic_0) or (task_out_V_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            task_out_V_TDATA_int_regslice <= or_ln174_fu_780_p2;
        elsif ((not(((l1_RVALID = ap_const_logic_0) or (task_out_V_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            task_out_V_TDATA_int_regslice <= or_ln174_2_fu_687_p2;
        elsif ((not(((ap_predicate_op175_write_state21 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0))) and (ap_predicate_op175_write_state21 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            task_out_V_TDATA_int_regslice <= or_ln174_4_fu_638_p2;
        else 
            task_out_V_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    task_out_V_TVALID <= regslice_both_task_out_V_U_vld_out;

    task_out_V_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state56, ap_CS_fsm_state43, ap_CS_fsm_state30, ap_CS_fsm_state21, l1_RVALID, ap_block_state43_io, ap_predicate_op266_write_state56, ap_predicate_op274_write_state56, ap_block_state56_io, ap_predicate_op175_write_state21, ap_block_state21_io, task_out_V_TREADY_int_regslice, undo_log_entry_V_TREADY_int_regslice)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state43_io) or (undo_log_entry_V_TREADY_int_regslice = ap_const_logic_0) or (task_out_V_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state43)) or (not(((ap_const_boolean_1 = ap_block_state56_io) or ((ap_predicate_op274_write_state56 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op266_write_state56 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)))) and (ap_predicate_op274_write_state56 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state56)) or (not(((ap_const_boolean_1 = ap_block_state56_io) or ((ap_predicate_op274_write_state56 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op266_write_state56 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)))) and (ap_predicate_op266_write_state56 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state56)) or (not(((l1_RVALID = ap_const_logic_0) or (task_out_V_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state30)) or (not(((ap_const_boolean_1 = ap_block_state21_io) or ((ap_predicate_op175_write_state21 = ap_const_boolean_1) and (task_out_V_TREADY_int_regslice = ap_const_logic_0)))) and (ap_predicate_op175_write_state21 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            task_out_V_TVALID_int_regslice <= ap_const_logic_1;
        else 
            task_out_V_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_768_p6 <= ((((task_in_object_V_reg_895 & ap_const_lv32_0) & reg_355) & ap_const_lv4_0) & trunc_ln174_1_reg_1092);
    tmp4_fu_674_p6 <= ((((p_Result_2_fu_662_p5 & reg_355) & ap_const_lv4_0) & l1_RDATA) & trunc_ln174_reg_1032);
    tmp5_fu_626_p6 <= ((((i_reg_985 & ngh_cnt_V_reg_1026) & reg_355) & ap_const_lv4_0) & trunc_ln174_3_fu_623_p1);
    tmp_1_fu_737_p4 <= task_in(157 downto 128);
    trunc_ln174_1_fu_729_p1 <= task_in(64 - 1 downto 0);
    trunc_ln174_2_fu_866_p1 <= task_in(64 - 1 downto 0);
    trunc_ln174_3_fu_623_p1 <= task_in(64 - 1 downto 0);
    trunc_ln174_fu_593_p1 <= task_in(32 - 1 downto 0);
    trunc_ln213_1_fu_710_p4 <= task_in(61 downto 32);
    trunc_ln213_2_fu_719_p1 <= lhs_1_reg_284(30 - 1 downto 0);
    trunc_ln213_fu_746_p1 <= lhs_1_reg_284(30 - 1 downto 0);
    ulog_addr_V_fu_756_p3 <= (add_ln213_1_reg_1087 & ap_const_lv2_0);

    undo_log_entry_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state51, undo_log_entry_V_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            undo_log_entry_V_TDATA_blk_n <= undo_log_entry_V_TREADY_int_regslice;
        else 
            undo_log_entry_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    undo_log_entry_V_TDATA_int_regslice_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state50, zext_ln174_fu_763_p1, p_0_fu_787_p4, task_out_V_TREADY_int_regslice, undo_log_entry_V_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) and (undo_log_entry_V_TREADY_int_regslice = ap_const_logic_1))) then 
            undo_log_entry_V_TDATA_int_regslice <= p_0_fu_787_p4;
        elsif ((not(((undo_log_entry_V_TREADY_int_regslice = ap_const_logic_0) or (task_out_V_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            undo_log_entry_V_TDATA_int_regslice <= zext_ln174_fu_763_p1;
        else 
            undo_log_entry_V_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    undo_log_entry_V_TVALID <= regslice_both_undo_log_entry_V_U_vld_out;

    undo_log_entry_V_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state50, ap_block_state43_io, ap_block_state50_io, task_out_V_TREADY_int_regslice, undo_log_entry_V_TREADY_int_regslice)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state50_io) or (undo_log_entry_V_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state50)) or (not(((ap_const_boolean_1 = ap_block_state43_io) or (undo_log_entry_V_TREADY_int_regslice = ap_const_logic_0) or (task_out_V_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state43)))) then 
            undo_log_entry_V_TVALID_int_regslice <= ap_const_logic_1;
        else 
            undo_log_entry_V_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    v_V_2_fu_519_p2 <= std_logic_vector(unsigned(grp_fu_324_p4) + unsigned(ap_const_lv32_7));
    zext_ln174_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ulog_addr_V_fu_756_p3),64));
    zext_ln215_1_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(task_in_object_V_reg_895),34));
    zext_ln215_2_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(task_in_object_V_reg_895),34));
    zext_ln215_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_324_p4),34));
    zext_ln878_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_V_4_reg_314),33));
end behav;
