// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mis_hls_mis_hls,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.920000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=2231,HLS_SYN_LUT=2679,HLS_VERSION=2020_2}" *)

module mis_hls (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        task_in,
        task_out_V_TDATA,
        task_out_V_TVALID,
        task_out_V_TREADY,
        m_axi_l1_AWVALID,
        m_axi_l1_AWREADY,
        m_axi_l1_AWADDR,
        m_axi_l1_AWID,
        m_axi_l1_AWLEN,
        m_axi_l1_AWSIZE,
        m_axi_l1_AWBURST,
        m_axi_l1_AWLOCK,
        m_axi_l1_AWCACHE,
        m_axi_l1_AWPROT,
        m_axi_l1_AWQOS,
        m_axi_l1_AWREGION,
        m_axi_l1_AWUSER,
        m_axi_l1_WVALID,
        m_axi_l1_WREADY,
        m_axi_l1_WDATA,
        m_axi_l1_WSTRB,
        m_axi_l1_WLAST,
        m_axi_l1_WID,
        m_axi_l1_WUSER,
        m_axi_l1_ARVALID,
        m_axi_l1_ARREADY,
        m_axi_l1_ARADDR,
        m_axi_l1_ARID,
        m_axi_l1_ARLEN,
        m_axi_l1_ARSIZE,
        m_axi_l1_ARBURST,
        m_axi_l1_ARLOCK,
        m_axi_l1_ARCACHE,
        m_axi_l1_ARPROT,
        m_axi_l1_ARQOS,
        m_axi_l1_ARREGION,
        m_axi_l1_ARUSER,
        m_axi_l1_RVALID,
        m_axi_l1_RREADY,
        m_axi_l1_RDATA,
        m_axi_l1_RLAST,
        m_axi_l1_RID,
        m_axi_l1_RUSER,
        m_axi_l1_RRESP,
        m_axi_l1_BVALID,
        m_axi_l1_BREADY,
        m_axi_l1_BRESP,
        m_axi_l1_BID,
        m_axi_l1_BUSER,
        undo_log_entry_V_TDATA,
        undo_log_entry_V_TVALID,
        undo_log_entry_V_TREADY
);

parameter    ap_ST_fsm_state1 = 59'd1;
parameter    ap_ST_fsm_state2 = 59'd2;
parameter    ap_ST_fsm_state3 = 59'd4;
parameter    ap_ST_fsm_state4 = 59'd8;
parameter    ap_ST_fsm_state5 = 59'd16;
parameter    ap_ST_fsm_state6 = 59'd32;
parameter    ap_ST_fsm_state7 = 59'd64;
parameter    ap_ST_fsm_state8 = 59'd128;
parameter    ap_ST_fsm_state9 = 59'd256;
parameter    ap_ST_fsm_state10 = 59'd512;
parameter    ap_ST_fsm_state11 = 59'd1024;
parameter    ap_ST_fsm_state12 = 59'd2048;
parameter    ap_ST_fsm_state13 = 59'd4096;
parameter    ap_ST_fsm_state14 = 59'd8192;
parameter    ap_ST_fsm_state15 = 59'd16384;
parameter    ap_ST_fsm_state16 = 59'd32768;
parameter    ap_ST_fsm_state17 = 59'd65536;
parameter    ap_ST_fsm_state18 = 59'd131072;
parameter    ap_ST_fsm_state19 = 59'd262144;
parameter    ap_ST_fsm_state20 = 59'd524288;
parameter    ap_ST_fsm_state21 = 59'd1048576;
parameter    ap_ST_fsm_state22 = 59'd2097152;
parameter    ap_ST_fsm_state23 = 59'd4194304;
parameter    ap_ST_fsm_state24 = 59'd8388608;
parameter    ap_ST_fsm_state25 = 59'd16777216;
parameter    ap_ST_fsm_state26 = 59'd33554432;
parameter    ap_ST_fsm_state27 = 59'd67108864;
parameter    ap_ST_fsm_state28 = 59'd134217728;
parameter    ap_ST_fsm_state29 = 59'd268435456;
parameter    ap_ST_fsm_state30 = 59'd536870912;
parameter    ap_ST_fsm_state31 = 59'd1073741824;
parameter    ap_ST_fsm_state32 = 59'd2147483648;
parameter    ap_ST_fsm_state33 = 59'd4294967296;
parameter    ap_ST_fsm_state34 = 59'd8589934592;
parameter    ap_ST_fsm_state35 = 59'd17179869184;
parameter    ap_ST_fsm_state36 = 59'd34359738368;
parameter    ap_ST_fsm_state37 = 59'd68719476736;
parameter    ap_ST_fsm_state38 = 59'd137438953472;
parameter    ap_ST_fsm_state39 = 59'd274877906944;
parameter    ap_ST_fsm_state40 = 59'd549755813888;
parameter    ap_ST_fsm_state41 = 59'd1099511627776;
parameter    ap_ST_fsm_state42 = 59'd2199023255552;
parameter    ap_ST_fsm_state43 = 59'd4398046511104;
parameter    ap_ST_fsm_state44 = 59'd8796093022208;
parameter    ap_ST_fsm_state45 = 59'd17592186044416;
parameter    ap_ST_fsm_state46 = 59'd35184372088832;
parameter    ap_ST_fsm_state47 = 59'd70368744177664;
parameter    ap_ST_fsm_state48 = 59'd140737488355328;
parameter    ap_ST_fsm_state49 = 59'd281474976710656;
parameter    ap_ST_fsm_state50 = 59'd562949953421312;
parameter    ap_ST_fsm_state51 = 59'd1125899906842624;
parameter    ap_ST_fsm_state52 = 59'd2251799813685248;
parameter    ap_ST_fsm_state53 = 59'd4503599627370496;
parameter    ap_ST_fsm_state54 = 59'd9007199254740992;
parameter    ap_ST_fsm_state55 = 59'd18014398509481984;
parameter    ap_ST_fsm_state56 = 59'd36028797018963968;
parameter    ap_ST_fsm_state57 = 59'd72057594037927936;
parameter    ap_ST_fsm_state58 = 59'd144115188075855872;
parameter    ap_ST_fsm_state59 = 59'd288230376151711744;
parameter    C_M_AXI_L1_ID_WIDTH = 1;
parameter    C_M_AXI_L1_ADDR_WIDTH = 64;
parameter    C_M_AXI_L1_DATA_WIDTH = 32;
parameter    C_M_AXI_L1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_L1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_L1_WUSER_WIDTH = 1;
parameter    C_M_AXI_L1_RUSER_WIDTH = 1;
parameter    C_M_AXI_L1_BUSER_WIDTH = 1;
parameter    C_M_AXI_L1_TARGET_ADDR = 0;
parameter    C_M_AXI_L1_USER_VALUE = 0;
parameter    C_M_AXI_L1_PROT_VALUE = 0;
parameter    C_M_AXI_L1_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_M_AXI_L1_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter    ap_const_lv64_0 = 64'd0;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [191:0] task_in;
output  [191:0] task_out_V_TDATA;
output   task_out_V_TVALID;
input   task_out_V_TREADY;
output   m_axi_l1_AWVALID;
input   m_axi_l1_AWREADY;
output  [C_M_AXI_L1_ADDR_WIDTH - 1:0] m_axi_l1_AWADDR;
output  [C_M_AXI_L1_ID_WIDTH - 1:0] m_axi_l1_AWID;
output  [7:0] m_axi_l1_AWLEN;
output  [2:0] m_axi_l1_AWSIZE;
output  [1:0] m_axi_l1_AWBURST;
output  [1:0] m_axi_l1_AWLOCK;
output  [3:0] m_axi_l1_AWCACHE;
output  [2:0] m_axi_l1_AWPROT;
output  [3:0] m_axi_l1_AWQOS;
output  [3:0] m_axi_l1_AWREGION;
output  [C_M_AXI_L1_AWUSER_WIDTH - 1:0] m_axi_l1_AWUSER;
output   m_axi_l1_WVALID;
input   m_axi_l1_WREADY;
output  [C_M_AXI_L1_DATA_WIDTH - 1:0] m_axi_l1_WDATA;
output  [C_M_AXI_L1_WSTRB_WIDTH - 1:0] m_axi_l1_WSTRB;
output   m_axi_l1_WLAST;
output  [C_M_AXI_L1_ID_WIDTH - 1:0] m_axi_l1_WID;
output  [C_M_AXI_L1_WUSER_WIDTH - 1:0] m_axi_l1_WUSER;
output   m_axi_l1_ARVALID;
input   m_axi_l1_ARREADY;
output  [C_M_AXI_L1_ADDR_WIDTH - 1:0] m_axi_l1_ARADDR;
output  [C_M_AXI_L1_ID_WIDTH - 1:0] m_axi_l1_ARID;
output  [7:0] m_axi_l1_ARLEN;
output  [2:0] m_axi_l1_ARSIZE;
output  [1:0] m_axi_l1_ARBURST;
output  [1:0] m_axi_l1_ARLOCK;
output  [3:0] m_axi_l1_ARCACHE;
output  [2:0] m_axi_l1_ARPROT;
output  [3:0] m_axi_l1_ARQOS;
output  [3:0] m_axi_l1_ARREGION;
output  [C_M_AXI_L1_ARUSER_WIDTH - 1:0] m_axi_l1_ARUSER;
input   m_axi_l1_RVALID;
output   m_axi_l1_RREADY;
input  [C_M_AXI_L1_DATA_WIDTH - 1:0] m_axi_l1_RDATA;
input   m_axi_l1_RLAST;
input  [C_M_AXI_L1_ID_WIDTH - 1:0] m_axi_l1_RID;
input  [C_M_AXI_L1_RUSER_WIDTH - 1:0] m_axi_l1_RUSER;
input  [1:0] m_axi_l1_RRESP;
input   m_axi_l1_BVALID;
output   m_axi_l1_BREADY;
input  [1:0] m_axi_l1_BRESP;
input  [C_M_AXI_L1_ID_WIDTH - 1:0] m_axi_l1_BID;
input  [C_M_AXI_L1_BUSER_WIDTH - 1:0] m_axi_l1_BUSER;
output  [63:0] undo_log_entry_V_TDATA;
output   undo_log_entry_V_TVALID;
input   undo_log_entry_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [58:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] initialized_V;
reg   [31:0] base_flags_V;
reg   [31:0] total_v_V;
reg   [31:0] base_neighbor_V;
reg   [31:0] base_degree_V;
reg    task_out_V_TDATA_blk_n;
wire    ap_CS_fsm_state56;
wire   [0:0] icmp_ln878_fu_800_p2;
wire   [0:0] icmp_ln878_2_fu_805_p2;
wire    ap_CS_fsm_state57;
reg   [0:0] icmp_ln878_2_reg_1123;
wire   [0:0] icmp_ln878_3_fu_850_p2;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
reg   [0:0] icmp_ln878_4_reg_1040;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln878_1_fu_600_p2;
wire   [0:0] icmp_ln878_5_fu_619_p2;
wire    ap_CS_fsm_state32;
reg    l1_blk_n_AR;
wire   [0:0] initialized_V_load_load_fu_379_p1;
reg    l1_blk_n_R;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state33;
reg   [3:0] task_in_ttype_V_reg_902;
wire    ap_CS_fsm_state40;
reg    l1_blk_n_AW;
wire    ap_CS_fsm_state49;
reg    l1_blk_n_W;
wire    ap_CS_fsm_state50;
reg    l1_blk_n_B;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state23;
reg    undo_log_entry_V_TDATA_blk_n;
wire    ap_CS_fsm_state51;
reg    l1_AWVALID;
wire    l1_AWREADY;
reg   [63:0] l1_AWADDR;
reg    l1_WVALID;
wire    l1_WREADY;
reg   [31:0] l1_WDATA;
reg    l1_ARVALID;
wire    l1_ARREADY;
reg   [63:0] l1_ARADDR;
reg   [31:0] l1_ARLEN;
wire    l1_RVALID;
reg    l1_RREADY;
wire   [31:0] l1_RDATA;
wire    l1_RLAST;
wire   [0:0] l1_RID;
wire   [0:0] l1_RUSER;
wire   [1:0] l1_RRESP;
wire    l1_BVALID;
reg    l1_BREADY;
wire   [1:0] l1_BRESP;
wire   [0:0] l1_BID;
wire   [0:0] l1_BUSER;
wire   [31:0] grp_fu_324_p4;
reg   [31:0] reg_349;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state19;
wire   [59:0] grp_fu_333_p4;
reg   [59:0] reg_355;
wire    ap_CS_fsm_state41;
wire   [0:0] icmp_ln870_fu_705_p2;
reg   [31:0] task_in_object_V_reg_895;
reg   [0:0] initialized_V_load_reg_906;
reg   [31:0] l1_addr_read_reg_932;
reg   [31:0] l1_addr_1_read_reg_937;
reg   [63:0] l1_addr_4_reg_948;
reg   [63:0] l1_addr_3_reg_954;
reg   [63:0] l1_addr_2_reg_961;
wire   [32:0] ret_fu_513_p2;
reg   [32:0] ret_reg_974;
wire   [31:0] v_V_2_fu_519_p2;
reg   [31:0] v_V_2_reg_979;
wire   [31:0] i_fu_525_p4;
reg   [31:0] i_reg_985;
wire    ap_CS_fsm_state14;
wire   [32:0] ret_4_fu_552_p2;
reg   [32:0] ret_4_reg_1000;
reg   [31:0] n_reg_1005;
wire   [33:0] ret_4_cast_fu_558_p1;
reg   [33:0] ret_4_cast_reg_1011;
wire   [63:0] grp_fu_542_p2;
reg   [63:0] mul_i_reg_1016;
wire  signed [32:0] sext_ln1346_fu_565_p1;
reg  signed [32:0] sext_ln1346_reg_1021;
wire   [31:0] ngh_cnt_V_fu_585_p3;
reg   [31:0] ngh_cnt_V_reg_1026;
wire   [31:0] trunc_ln174_fu_593_p1;
reg   [31:0] trunc_ln174_reg_1032;
wire   [0:0] icmp_ln878_4_fu_605_p2;
wire   [32:0] add_ln534_fu_614_p2;
reg   [32:0] add_ln534_reg_1044;
wire   [191:0] or_ln174_4_fu_638_p2;
reg   [63:0] l1_addr_5_reg_1057;
wire    ap_CS_fsm_state22;
wire   [191:0] or_ln174_2_fu_687_p2;
wire   [31:0] ngh_cnt_V_3_fu_699_p2;
reg   [31:0] cur_flag_V_reg_1073;
reg   [31:0] current_flag_reg_1078;
wire   [29:0] add_ln213_1_fu_723_p2;
reg   [29:0] add_ln213_1_reg_1087;
wire   [63:0] trunc_ln174_1_fu_729_p1;
reg   [63:0] trunc_ln174_1_reg_1092;
wire   [29:0] add_ln213_fu_750_p2;
reg   [29:0] add_ln213_reg_1100;
wire   [0:0] icmp_ln874_fu_732_p2;
wire   [63:0] zext_ln174_fu_763_p1;
wire   [191:0] or_ln174_fu_780_p2;
wire   [63:0] p_0_fu_787_p4;
wire   [191:0] or_ln174_1_fu_838_p2;
wire   [191:0] p_s_fu_869_p5;
wire   [31:0] grp_fu_342_p2;
reg  signed [31:0] ap_phi_mux_lhs_1_phi_fu_287_p4;
reg  signed [31:0] lhs_1_reg_284;
reg    ap_block_state1_io;
reg   [31:0] total_v_V_loc_0_reg_294;
reg  signed [31:0] ngh_cnt_V_1_reg_304;
reg    ap_block_state31;
reg    ap_block_state31_io;
wire   [31:0] ap_phi_mux_v_V_4_phi_fu_317_p4;
reg   [31:0] v_V_4_reg_314;
reg    ap_block_state57;
reg    ap_block_state57_io;
wire  signed [63:0] sext_ln534_2_fu_452_p1;
wire  signed [63:0] sext_ln534_1_fu_475_p1;
wire  signed [63:0] sext_ln534_fu_499_p1;
wire   [63:0] add_ln534_1_fu_648_p2;
reg    ap_block_state30;
reg    ap_block_state33_io;
reg    ap_block_state40;
reg    ap_block_state43;
reg    ap_block_state43_io;
reg    ap_block_state50_io;
reg   [63:0] p_Val2_1_fu_162;
wire   [63:0] p_Result_2_fu_662_p5;
reg   [63:0] p_Val2_s_fu_166;
wire   [63:0] p_Result_s_fu_814_p5;
reg    ap_predicate_op266_write_state56;
reg    ap_predicate_op274_write_state56;
reg    ap_block_state56;
reg    ap_block_state56_io;
reg    ap_predicate_op175_write_state21;
reg    ap_block_state21;
reg    ap_block_state21_io;
reg   [31:0] grp_fu_342_p0;
wire  signed [33:0] sext_ln215_2_fu_439_p1;
wire   [33:0] zext_ln215_2_fu_443_p1;
wire   [33:0] ret_3_fu_446_p2;
wire  signed [33:0] sext_ln215_1_fu_462_p1;
wire   [33:0] zext_ln215_1_fu_466_p1;
wire   [33:0] ret_2_fu_469_p2;
wire  signed [33:0] sext_ln215_fu_485_p1;
wire   [33:0] zext_ln215_fu_489_p1;
wire   [33:0] ret_1_fu_493_p2;
wire   [32:0] start_v_V_cast_fu_509_p1;
wire   [31:0] grp_fu_542_p0;
wire   [31:0] grp_fu_542_p1;
wire  signed [31:0] start_n_cast_fu_548_p0;
wire   [32:0] start_n_cast_fu_548_p1;
wire  signed [31:0] start_n_cast8_fu_569_p0;
wire  signed [33:0] start_n_cast8_fu_569_p1;
wire  signed [31:0] empty_18_fu_579_p0;
wire   [0:0] empty_17_fu_573_p2;
wire   [31:0] empty_18_fu_579_p2;
wire  signed [31:0] ngh_cnt_V_fu_585_p2;
wire  signed [33:0] sext_ln878_fu_596_p1;
wire  signed [32:0] sext_ln534_3_fu_610_p1;
wire   [63:0] trunc_ln174_3_fu_623_p1;
wire   [191:0] tmp5_fu_626_p6;
wire  signed [63:0] sext_ln534_4_fu_645_p1;
wire   [191:0] tmp4_fu_674_p6;
wire   [29:0] trunc_ln213_2_fu_719_p1;
wire   [29:0] trunc_ln213_1_fu_710_p4;
wire   [29:0] trunc_ln213_fu_746_p1;
wire   [29:0] tmp_1_fu_737_p4;
wire   [31:0] ulog_addr_V_fu_756_p3;
wire   [191:0] tmp1_fu_768_p6;
wire   [32:0] zext_ln878_fu_796_p1;
wire   [191:0] or_ln174_3_fu_826_p5;
wire   [63:0] p_Result_1_fu_855_p5;
wire   [63:0] trunc_ln174_2_fu_866_p1;
reg    grp_fu_542_ce;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state59;
wire    regslice_both_task_out_V_U_apdone_blk;
wire    regslice_both_undo_log_entry_V_U_apdone_blk;
reg    ap_block_state59;
reg   [58:0] ap_NS_fsm;
reg    ap_block_state44;
reg    ap_block_state44_io;
reg   [191:0] task_out_V_TDATA_int_regslice;
reg    task_out_V_TVALID_int_regslice;
wire    task_out_V_TREADY_int_regslice;
wire    regslice_both_task_out_V_U_vld_out;
reg   [63:0] undo_log_entry_V_TDATA_int_regslice;
reg    undo_log_entry_V_TVALID_int_regslice;
wire    undo_log_entry_V_TREADY_int_regslice;
wire    regslice_both_undo_log_entry_V_U_vld_out;
wire   [63:0] grp_fu_542_p00;
wire   [63:0] grp_fu_542_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 59'd1;
#0 initialized_V = 1'd0;
#0 base_flags_V = 32'd0;
#0 total_v_V = 32'd0;
#0 base_neighbor_V = 32'd0;
#0 base_degree_V = 32'd0;
end

mis_hls_l1_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_L1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_L1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_L1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_L1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_L1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_L1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_L1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_L1_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_L1_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_L1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_L1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_L1_CACHE_VALUE ))
l1_m_axi_U(
    .AWVALID(m_axi_l1_AWVALID),
    .AWREADY(m_axi_l1_AWREADY),
    .AWADDR(m_axi_l1_AWADDR),
    .AWID(m_axi_l1_AWID),
    .AWLEN(m_axi_l1_AWLEN),
    .AWSIZE(m_axi_l1_AWSIZE),
    .AWBURST(m_axi_l1_AWBURST),
    .AWLOCK(m_axi_l1_AWLOCK),
    .AWCACHE(m_axi_l1_AWCACHE),
    .AWPROT(m_axi_l1_AWPROT),
    .AWQOS(m_axi_l1_AWQOS),
    .AWREGION(m_axi_l1_AWREGION),
    .AWUSER(m_axi_l1_AWUSER),
    .WVALID(m_axi_l1_WVALID),
    .WREADY(m_axi_l1_WREADY),
    .WDATA(m_axi_l1_WDATA),
    .WSTRB(m_axi_l1_WSTRB),
    .WLAST(m_axi_l1_WLAST),
    .WID(m_axi_l1_WID),
    .WUSER(m_axi_l1_WUSER),
    .ARVALID(m_axi_l1_ARVALID),
    .ARREADY(m_axi_l1_ARREADY),
    .ARADDR(m_axi_l1_ARADDR),
    .ARID(m_axi_l1_ARID),
    .ARLEN(m_axi_l1_ARLEN),
    .ARSIZE(m_axi_l1_ARSIZE),
    .ARBURST(m_axi_l1_ARBURST),
    .ARLOCK(m_axi_l1_ARLOCK),
    .ARCACHE(m_axi_l1_ARCACHE),
    .ARPROT(m_axi_l1_ARPROT),
    .ARQOS(m_axi_l1_ARQOS),
    .ARREGION(m_axi_l1_ARREGION),
    .ARUSER(m_axi_l1_ARUSER),
    .RVALID(m_axi_l1_RVALID),
    .RREADY(m_axi_l1_RREADY),
    .RDATA(m_axi_l1_RDATA),
    .RLAST(m_axi_l1_RLAST),
    .RID(m_axi_l1_RID),
    .RUSER(m_axi_l1_RUSER),
    .RRESP(m_axi_l1_RRESP),
    .BVALID(m_axi_l1_BVALID),
    .BREADY(m_axi_l1_BREADY),
    .BRESP(m_axi_l1_BRESP),
    .BID(m_axi_l1_BID),
    .BUSER(m_axi_l1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(l1_ARVALID),
    .I_ARREADY(l1_ARREADY),
    .I_ARADDR(l1_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(l1_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(l1_RVALID),
    .I_RREADY(l1_RREADY),
    .I_RDATA(l1_RDATA),
    .I_RID(l1_RID),
    .I_RUSER(l1_RUSER),
    .I_RRESP(l1_RRESP),
    .I_RLAST(l1_RLAST),
    .I_AWVALID(l1_AWVALID),
    .I_AWREADY(l1_AWREADY),
    .I_AWADDR(l1_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(l1_WVALID),
    .I_WREADY(l1_WREADY),
    .I_WDATA(l1_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(l1_BVALID),
    .I_BREADY(l1_BREADY),
    .I_BRESP(l1_BRESP),
    .I_BID(l1_BID),
    .I_BUSER(l1_BUSER)
);

mis_hls_mul_32ns_32ns_64_7_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_7_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_542_p0),
    .din1(grp_fu_542_p1),
    .ce(grp_fu_542_ce),
    .dout(grp_fu_542_p2)
);

mis_hls_regslice_both #(
    .DataWidth( 192 ))
regslice_both_task_out_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(task_out_V_TDATA_int_regslice),
    .vld_in(task_out_V_TVALID_int_regslice),
    .ack_in(task_out_V_TREADY_int_regslice),
    .data_out(task_out_V_TDATA),
    .vld_out(regslice_both_task_out_V_U_vld_out),
    .ack_out(task_out_V_TREADY),
    .apdone_blk(regslice_both_task_out_V_U_apdone_blk)
);

mis_hls_regslice_both #(
    .DataWidth( 64 ))
regslice_both_undo_log_entry_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(undo_log_entry_V_TDATA_int_regslice),
    .vld_in(undo_log_entry_V_TVALID_int_regslice),
    .ack_in(undo_log_entry_V_TREADY_int_regslice),
    .data_out(undo_log_entry_V_TDATA),
    .vld_out(regslice_both_undo_log_entry_V_U_vld_out),
    .ack_out(undo_log_entry_V_TREADY),
    .apdone_blk(regslice_both_undo_log_entry_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((initialized_V_load_reg_906 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        lhs_1_reg_284 <= l1_addr_read_reg_932;
    end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (initialized_V_load_load_fu_379_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        lhs_1_reg_284 <= base_flags_V;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state31_io) | ((icmp_ln878_4_reg_1040 == 1'd1) & (task_out_V_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state31))) begin
        ngh_cnt_V_1_reg_304 <= ngh_cnt_V_3_fu_699_p2;
    end else if (((l1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        ngh_cnt_V_1_reg_304 <= reg_349;
    end
end

always @ (posedge ap_clk) begin
    if (((initialized_V_load_reg_906 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        total_v_V_loc_0_reg_294 <= l1_addr_1_read_reg_937;
    end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (initialized_V_load_load_fu_379_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        total_v_V_loc_0_reg_294 <= total_v_V;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state57_io) | ((icmp_ln878_2_reg_1123 == 1'd1) & (task_out_V_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state57))) begin
        v_V_4_reg_314 <= grp_fu_342_p2;
    end else if (((task_in_ttype_V_reg_902 == 4'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        v_V_4_reg_314 <= {{task_in[159:128]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln870_fu_705_p2 == 1'd1) & (task_in_ttype_V_reg_902 == 4'd2) & (1'b1 == ap_CS_fsm_state41))) begin
        add_ln213_1_reg_1087 <= add_ln213_1_fu_723_p2;
        trunc_ln174_1_reg_1092 <= trunc_ln174_1_fu_729_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln874_fu_732_p2 == 1'd0) & (task_in_ttype_V_reg_902 == 4'd1) & (1'b1 == ap_CS_fsm_state41))) begin
        add_ln213_reg_1100 <= add_ln213_fu_750_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_4_fu_605_p2 == 1'd1) & (icmp_ln878_1_fu_600_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        add_ln534_reg_1044 <= add_ln534_fu_614_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((l1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        base_degree_V <= l1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((l1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        base_flags_V <= l1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((l1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        base_neighbor_V <= l1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((task_in_ttype_V_reg_902 == 4'd2) & (1'b1 == ap_CS_fsm_state40))) begin
        cur_flag_V_reg_1073 <= l1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((task_in_ttype_V_reg_902 == 4'd1) & (1'b1 == ap_CS_fsm_state40))) begin
        current_flag_reg_1078 <= l1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_reg_985 <= {{task_in[191:160]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) & (icmp_ln878_fu_800_p2 == 1'd1))) begin
        icmp_ln878_2_reg_1123 <= icmp_ln878_2_fu_805_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_1_fu_600_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        icmp_ln878_4_reg_1040 <= icmp_ln878_4_fu_605_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((initialized_V_load_reg_906 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        initialized_V <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        initialized_V_load_reg_906 <= initialized_V;
        task_in_object_V_reg_895 <= {{task_in[63:32]}};
        task_in_ttype_V_reg_902 <= {{task_in[67:64]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        l1_addr_1_read_reg_937 <= l1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((task_in_ttype_V_reg_902 == 4'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        l1_addr_2_reg_961 <= sext_ln534_fu_499_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((task_in_ttype_V_reg_902 == 4'd2) & (1'b1 == ap_CS_fsm_state12))) begin
        l1_addr_3_reg_954 <= sext_ln534_1_fu_475_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((task_in_ttype_V_reg_902 == 4'd4) & (1'b1 == ap_CS_fsm_state12))) begin
        l1_addr_4_reg_948 <= sext_ln534_2_fu_452_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        l1_addr_5_reg_1057 <= add_ln534_1_fu_648_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        l1_addr_read_reg_932 <= l1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        mul_i_reg_1016 <= grp_fu_542_p2;
        n_reg_1005 <= l1_RDATA;
        ngh_cnt_V_reg_1026 <= ngh_cnt_V_fu_585_p3;
        ret_4_cast_reg_1011[32 : 0] <= ret_4_cast_fu_558_p1[32 : 0];
        sext_ln1346_reg_1021 <= sext_ln1346_fu_565_p1;
        trunc_ln174_reg_1032 <= trunc_ln174_fu_593_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((l1_RVALID == 1'b0) | (task_out_V_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state30))) begin
        p_Val2_1_fu_162 <= p_Result_2_fu_662_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state56_io) | ((ap_predicate_op274_write_state56 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op266_write_state56 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state56) & (icmp_ln878_2_fu_805_p2 == 1'd1) & (icmp_ln878_fu_800_p2 == 1'd1))) begin
        p_Val2_s_fu_166 <= p_Result_s_fu_814_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) | ((task_in_ttype_V_reg_902 == 4'd0) & (1'b1 == ap_CS_fsm_state12)))) begin
        reg_349 <= {{task_in[159:128]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((icmp_ln870_fu_705_p2 == 1'd1) & (task_in_ttype_V_reg_902 == 4'd2) & (1'b1 == ap_CS_fsm_state41)))) begin
        reg_355 <= {{task_in[127:68]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ret_4_reg_1000 <= ret_4_fu_552_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((task_in_ttype_V_reg_902 == 4'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        ret_reg_974 <= ret_fu_513_p2;
        v_V_2_reg_979 <= v_V_2_fu_519_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((l1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        total_v_V <= l1_RDATA;
    end
end

always @ (*) begin
    if ((~((regslice_both_undo_log_entry_V_U_apdone_blk == 1'b1) | (regslice_both_task_out_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state59))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((initialized_V_load_reg_906 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_phi_mux_lhs_1_phi_fu_287_p4 = l1_addr_read_reg_932;
    end else begin
        ap_phi_mux_lhs_1_phi_fu_287_p4 = lhs_1_reg_284;
    end
end

always @ (*) begin
    if ((~((regslice_both_undo_log_entry_V_U_apdone_blk == 1'b1) | (regslice_both_task_out_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state59))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_342_p0 = v_V_4_reg_314;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        grp_fu_342_p0 = ap_phi_mux_v_V_4_phi_fu_317_p4;
    end else begin
        grp_fu_342_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state19) | ((l1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20)))) begin
        grp_fu_542_ce = 1'b1;
    end else begin
        grp_fu_542_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state33_io) & (task_in_ttype_V_reg_902 == 4'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        l1_ARADDR = l1_addr_2_reg_961;
    end else if (((1'b0 == ap_block_state33_io) & (task_in_ttype_V_reg_902 == 4'd2) & (1'b1 == ap_CS_fsm_state33))) begin
        l1_ARADDR = l1_addr_3_reg_954;
    end else if (((l1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        l1_ARADDR = l1_addr_5_reg_1057;
    end else if (((l1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        l1_ARADDR = l1_addr_4_reg_948;
    end else if (((l1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        l1_ARADDR = 64'd1;
    end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (initialized_V == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        l1_ARADDR = 64'd3;
    end else begin
        l1_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state33_io) & (task_in_ttype_V_reg_902 == 4'd2) & (1'b1 == ap_CS_fsm_state33)) | ((1'b0 == ap_block_state33_io) & (task_in_ttype_V_reg_902 == 4'd1) & (1'b1 == ap_CS_fsm_state33)) | ((l1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((l1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((l1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        l1_ARLEN = 32'd1;
    end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (initialized_V == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        l1_ARLEN = 32'd3;
    end else begin
        l1_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state33_io) & (task_in_ttype_V_reg_902 == 4'd2) & (1'b1 == ap_CS_fsm_state33)) | ((1'b0 == ap_block_state33_io) & (task_in_ttype_V_reg_902 == 4'd1) & (1'b1 == ap_CS_fsm_state33)) | ((l1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((l1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((l1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | (~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (initialized_V == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        l1_ARVALID = 1'b1;
    end else begin
        l1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((l1_AWREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state49)) begin
            l1_AWADDR = l1_addr_2_reg_961;
        end else if ((1'b1 == ap_CS_fsm_state42)) begin
            l1_AWADDR = l1_addr_3_reg_954;
        end else begin
            l1_AWADDR = 'bx;
        end
    end else begin
        l1_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((l1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((l1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state49)))) begin
        l1_AWVALID = 1'b1;
    end else begin
        l1_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((l1_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state48)) | ((l1_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state55)))) begin
        l1_BREADY = 1'b1;
    end else begin
        l1_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((~(((l1_RVALID == 1'b0) & (task_in_ttype_V_reg_902 == 4'd2)) | ((l1_RVALID == 1'b0) & (task_in_ttype_V_reg_902 == 4'd1))) & (task_in_ttype_V_reg_902 == 4'd2) & (1'b1 == ap_CS_fsm_state40)) | (~(((l1_RVALID == 1'b0) & (task_in_ttype_V_reg_902 == 4'd2)) | ((l1_RVALID == 1'b0) & (task_in_ttype_V_reg_902 == 4'd1))) & (task_in_ttype_V_reg_902 == 4'd1) & (1'b1 == ap_CS_fsm_state40)) | ((l1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((l1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((l1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((l1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((l1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | (~((l1_RVALID == 1'b0) | (task_out_V_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state30)))) begin
        l1_RREADY = 1'b1;
    end else begin
        l1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) & (undo_log_entry_V_TREADY_int_regslice == 1'b1))) begin
        l1_WDATA = 32'd2;
    end else if ((~((undo_log_entry_V_TREADY_int_regslice == 1'b0) | (task_out_V_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state43))) begin
        l1_WDATA = 32'd1;
    end else begin
        l1_WDATA = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state50_io) | (undo_log_entry_V_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state50)) | (~((1'b1 == ap_block_state43_io) | (undo_log_entry_V_TREADY_int_regslice == 1'b0) | (task_out_V_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state43)))) begin
        l1_WVALID = 1'b1;
    end else begin
        l1_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state4) | ((task_in_ttype_V_reg_902 == 4'd2) & (1'b1 == ap_CS_fsm_state33)) | ((task_in_ttype_V_reg_902 == 4'd1) & (1'b1 == ap_CS_fsm_state33)) | ((ap_start == 1'b1) & (initialized_V == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        l1_blk_n_AR = m_axi_l1_ARREADY;
    end else begin
        l1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state49))) begin
        l1_blk_n_AW = m_axi_l1_AWREADY;
    end else begin
        l1_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state55))) begin
        l1_blk_n_B = m_axi_l1_BVALID;
    end else begin
        l1_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state30) | ((task_in_ttype_V_reg_902 == 4'd2) & (1'b1 == ap_CS_fsm_state40)) | ((task_in_ttype_V_reg_902 == 4'd1) & (1'b1 == ap_CS_fsm_state40)))) begin
        l1_blk_n_R = m_axi_l1_RVALID;
    end else begin
        l1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state43))) begin
        l1_blk_n_W = m_axi_l1_WREADY;
    end else begin
        l1_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state58) | ((icmp_ln878_5_fu_619_p2 == 1'd1) & (icmp_ln878_1_fu_600_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)) | ((icmp_ln878_4_reg_1040 == 1'd1) & (1'b1 == ap_CS_fsm_state31)) | ((1'b1 == ap_CS_fsm_state57) & (icmp_ln878_2_reg_1123 == 1'd1)) | ((1'b1 == ap_CS_fsm_state56) & (icmp_ln878_3_fu_850_p2 == 1'd1) & (icmp_ln878_fu_800_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state56) & (icmp_ln878_2_fu_805_p2 == 1'd1) & (icmp_ln878_fu_800_p2 == 1'd1)))) begin
        task_out_V_TDATA_blk_n = task_out_V_TREADY_int_regslice;
    end else begin
        task_out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((ap_predicate_op274_write_state56 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op266_write_state56 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0))) & (ap_predicate_op274_write_state56 == 1'b1) & (1'b1 == ap_CS_fsm_state56))) begin
        task_out_V_TDATA_int_regslice = p_s_fu_869_p5;
    end else if ((~(((ap_predicate_op274_write_state56 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op266_write_state56 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0))) & (ap_predicate_op266_write_state56 == 1'b1) & (1'b1 == ap_CS_fsm_state56))) begin
        task_out_V_TDATA_int_regslice = or_ln174_1_fu_838_p2;
    end else if ((~((undo_log_entry_V_TREADY_int_regslice == 1'b0) | (task_out_V_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state43))) begin
        task_out_V_TDATA_int_regslice = or_ln174_fu_780_p2;
    end else if ((~((l1_RVALID == 1'b0) | (task_out_V_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state30))) begin
        task_out_V_TDATA_int_regslice = or_ln174_2_fu_687_p2;
    end else if ((~((ap_predicate_op175_write_state21 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0)) & (ap_predicate_op175_write_state21 == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        task_out_V_TDATA_int_regslice = or_ln174_4_fu_638_p2;
    end else begin
        task_out_V_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state43_io) | (undo_log_entry_V_TREADY_int_regslice == 1'b0) | (task_out_V_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state43)) | (~((1'b1 == ap_block_state56_io) | ((ap_predicate_op274_write_state56 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op266_write_state56 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0))) & (ap_predicate_op274_write_state56 == 1'b1) & (1'b1 == ap_CS_fsm_state56)) | (~((1'b1 == ap_block_state56_io) | ((ap_predicate_op274_write_state56 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op266_write_state56 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0))) & (ap_predicate_op266_write_state56 == 1'b1) & (1'b1 == ap_CS_fsm_state56)) | (~((l1_RVALID == 1'b0) | (task_out_V_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state30)) | (~((1'b1 == ap_block_state21_io) | ((ap_predicate_op175_write_state21 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0))) & (ap_predicate_op175_write_state21 == 1'b1) & (1'b1 == ap_CS_fsm_state21)))) begin
        task_out_V_TVALID_int_regslice = 1'b1;
    end else begin
        task_out_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43))) begin
        undo_log_entry_V_TDATA_blk_n = undo_log_entry_V_TREADY_int_regslice;
    end else begin
        undo_log_entry_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) & (undo_log_entry_V_TREADY_int_regslice == 1'b1))) begin
        undo_log_entry_V_TDATA_int_regslice = p_0_fu_787_p4;
    end else if ((~((undo_log_entry_V_TREADY_int_regslice == 1'b0) | (task_out_V_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state43))) begin
        undo_log_entry_V_TDATA_int_regslice = zext_ln174_fu_763_p1;
    end else begin
        undo_log_entry_V_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state50_io) | (undo_log_entry_V_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state50)) | (~((1'b1 == ap_block_state43_io) | (undo_log_entry_V_TREADY_int_regslice == 1'b0) | (task_out_V_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state43)))) begin
        undo_log_entry_V_TVALID_int_regslice = 1'b1;
    end else begin
        undo_log_entry_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (initialized_V_load_load_fu_379_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (initialized_V == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((l1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((l1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((l1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((l1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((l1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((task_in_ttype_V_reg_902 == 4'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else if ((~(task_in_ttype_V_reg_902 == 4'd4) & ~(task_in_ttype_V_reg_902 == 4'd0) & ~(task_in_ttype_V_reg_902 == 4'd2) & ~(task_in_ttype_V_reg_902 == 4'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else if (((1'b1 == ap_CS_fsm_state12) & ((task_in_ttype_V_reg_902 == 4'd2) | (task_in_ttype_V_reg_902 == 4'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((l1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((l1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if ((~((1'b1 == ap_block_state21_io) | ((ap_predicate_op175_write_state21 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0))) & (icmp_ln878_5_fu_619_p2 == 1'd0) & (icmp_ln878_1_fu_600_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else if ((~((1'b1 == ap_block_state21_io) | ((ap_predicate_op175_write_state21 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0))) & (icmp_ln878_5_fu_619_p2 == 1'd1) & (icmp_ln878_1_fu_600_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else if ((~((1'b1 == ap_block_state21_io) | ((ap_predicate_op175_write_state21 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0))) & (icmp_ln878_4_fu_605_p2 == 1'd0) & (icmp_ln878_1_fu_600_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else if ((~((1'b1 == ap_block_state21_io) | ((ap_predicate_op175_write_state21 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0))) & (icmp_ln878_4_fu_605_p2 == 1'd1) & (icmp_ln878_1_fu_600_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((l1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if ((~((l1_RVALID == 1'b0) | (task_out_V_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if ((~((1'b1 == ap_block_state31_io) | ((icmp_ln878_4_reg_1040 == 1'd1) & (task_out_V_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (task_out_V_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b0 == ap_block_state33_io) & (1'b1 == ap_CS_fsm_state33) & ((task_in_ttype_V_reg_902 == 4'd2) | (task_in_ttype_V_reg_902 == 4'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if ((~(((l1_RVALID == 1'b0) & (task_in_ttype_V_reg_902 == 4'd2)) | ((l1_RVALID == 1'b0) & (task_in_ttype_V_reg_902 == 4'd1))) & (1'b1 == ap_CS_fsm_state40) & ((task_in_ttype_V_reg_902 == 4'd2) | (task_in_ttype_V_reg_902 == 4'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((icmp_ln874_fu_732_p2 == 1'd0) & (task_in_ttype_V_reg_902 == 4'd1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else if (((1'b1 == ap_CS_fsm_state41) & (((icmp_ln874_fu_732_p2 == 1'd1) & (task_in_ttype_V_reg_902 == 4'd1)) | ((icmp_ln870_fu_705_p2 == 1'd0) & (task_in_ttype_V_reg_902 == 4'd2))))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((l1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if ((~((1'b1 == ap_block_state43_io) | (undo_log_entry_V_TREADY_int_regslice == 1'b0) | (task_out_V_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if ((~((1'b1 == ap_block_state44_io) | (undo_log_entry_V_TREADY_int_regslice == 1'b0) | (task_out_V_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            if (((l1_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((l1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            if ((~((1'b1 == ap_block_state50_io) | (undo_log_entry_V_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((1'b1 == ap_CS_fsm_state51) & (undo_log_entry_V_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            if (((l1_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            if ((~((1'b1 == ap_block_state56_io) | ((ap_predicate_op274_write_state56 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op266_write_state56 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state56) & (icmp_ln878_3_fu_850_p2 == 1'd0) & (icmp_ln878_fu_800_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else if ((~((1'b1 == ap_block_state56_io) | ((ap_predicate_op274_write_state56 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op266_write_state56 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state56) & (icmp_ln878_3_fu_850_p2 == 1'd1) & (icmp_ln878_fu_800_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else if ((~((1'b1 == ap_block_state56_io) | ((ap_predicate_op274_write_state56 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op266_write_state56 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state56) & (icmp_ln878_fu_800_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            if ((~((1'b1 == ap_block_state57_io) | ((icmp_ln878_2_reg_1123 == 1'd1) & (task_out_V_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((1'b1 == ap_CS_fsm_state58) & (task_out_V_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if ((~((regslice_both_undo_log_entry_V_U_apdone_blk == 1'b1) | (regslice_both_task_out_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln213_1_fu_723_p2 = (trunc_ln213_2_fu_719_p1 + trunc_ln213_1_fu_710_p4);

assign add_ln213_fu_750_p2 = (trunc_ln213_fu_746_p1 + tmp_1_fu_737_p4);

assign add_ln534_1_fu_648_p2 = ($signed(sext_ln534_4_fu_645_p1) + $signed(mul_i_reg_1016));

assign add_ln534_fu_614_p2 = ($signed(sext_ln1346_reg_1021) + $signed(sext_ln534_3_fu_610_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1_io = ((l1_ARREADY == 1'b0) & (initialized_V == 1'd0));
end

always @ (*) begin
    ap_block_state21 = ((ap_predicate_op175_write_state21 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state21_io = ((ap_predicate_op175_write_state21 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state30 = ((l1_RVALID == 1'b0) | (task_out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state31 = ((icmp_ln878_4_reg_1040 == 1'd1) & (task_out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state31_io = ((icmp_ln878_4_reg_1040 == 1'd1) & (task_out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state33_io = (((l1_ARREADY == 1'b0) & (task_in_ttype_V_reg_902 == 4'd2)) | ((l1_ARREADY == 1'b0) & (task_in_ttype_V_reg_902 == 4'd1)));
end

always @ (*) begin
    ap_block_state40 = (((l1_RVALID == 1'b0) & (task_in_ttype_V_reg_902 == 4'd2)) | ((l1_RVALID == 1'b0) & (task_in_ttype_V_reg_902 == 4'd1)));
end

always @ (*) begin
    ap_block_state43 = ((undo_log_entry_V_TREADY_int_regslice == 1'b0) | (task_out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state43_io = ((l1_WREADY == 1'b0) | (undo_log_entry_V_TREADY_int_regslice == 1'b0) | (task_out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state44 = ((undo_log_entry_V_TREADY_int_regslice == 1'b0) | (task_out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state44_io = ((undo_log_entry_V_TREADY_int_regslice == 1'b0) | (task_out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state50_io = ((l1_WREADY == 1'b0) | (undo_log_entry_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state56 = (((ap_predicate_op274_write_state56 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op266_write_state56 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state56_io = (((ap_predicate_op274_write_state56 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op266_write_state56 == 1'b1) & (task_out_V_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state57 = ((icmp_ln878_2_reg_1123 == 1'd1) & (task_out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state57_io = ((icmp_ln878_2_reg_1123 == 1'd1) & (task_out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state59 = ((regslice_both_undo_log_entry_V_U_apdone_blk == 1'b1) | (regslice_both_task_out_V_U_apdone_blk == 1'b1));
end

assign ap_phi_mux_v_V_4_phi_fu_317_p4 = v_V_4_reg_314;

always @ (*) begin
    ap_predicate_op175_write_state21 = ((icmp_ln878_5_fu_619_p2 == 1'd1) & (icmp_ln878_1_fu_600_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op266_write_state56 = ((icmp_ln878_2_fu_805_p2 == 1'd1) & (icmp_ln878_fu_800_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op274_write_state56 = ((icmp_ln878_3_fu_850_p2 == 1'd1) & (icmp_ln878_fu_800_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_17_fu_573_p2 = (($signed(ret_4_cast_fu_558_p1) > $signed(start_n_cast8_fu_569_p1)) ? 1'b1 : 1'b0);

assign empty_18_fu_579_p0 = reg_349;

assign empty_18_fu_579_p2 = ($signed(empty_18_fu_579_p0) + $signed(32'd7));

assign grp_fu_324_p4 = {{task_in[159:128]}};

assign grp_fu_333_p4 = {{task_in[127:68]}};

assign grp_fu_342_p2 = (grp_fu_342_p0 + 32'd1);

assign grp_fu_542_p0 = grp_fu_542_p00;

assign grp_fu_542_p00 = total_v_V_loc_0_reg_294;

assign grp_fu_542_p1 = grp_fu_542_p10;

assign grp_fu_542_p10 = i_fu_525_p4;

assign i_fu_525_p4 = {{task_in[191:160]}};

assign icmp_ln870_fu_705_p2 = ((cur_flag_V_reg_1073 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln874_fu_732_p2 = ((current_flag_reg_1078 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln878_1_fu_600_p2 = (($signed(sext_ln878_fu_596_p1) < $signed(ret_4_cast_reg_1011)) ? 1'b1 : 1'b0);

assign icmp_ln878_2_fu_805_p2 = ((v_V_4_reg_314 < total_v_V_loc_0_reg_294) ? 1'b1 : 1'b0);

assign icmp_ln878_3_fu_850_p2 = ((v_V_2_reg_979 < total_v_V_loc_0_reg_294) ? 1'b1 : 1'b0);

assign icmp_ln878_4_fu_605_p2 = (($signed(ngh_cnt_V_1_reg_304) < $signed(n_reg_1005)) ? 1'b1 : 1'b0);

assign icmp_ln878_5_fu_619_p2 = (($signed(ngh_cnt_V_reg_1026) < $signed(n_reg_1005)) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_800_p2 = ((zext_ln878_fu_796_p1 < ret_reg_974) ? 1'b1 : 1'b0);

assign initialized_V_load_load_fu_379_p1 = initialized_V;

assign ngh_cnt_V_3_fu_699_p2 = ($signed(ngh_cnt_V_1_reg_304) + $signed(32'd1));

assign ngh_cnt_V_fu_585_p2 = reg_349;

assign ngh_cnt_V_fu_585_p3 = ((empty_17_fu_573_p2[0:0] == 1'b1) ? empty_18_fu_579_p2 : ngh_cnt_V_fu_585_p2);

assign or_ln174_1_fu_838_p2 = (or_ln174_3_fu_826_p5 | 192'd36893488147419103232);

assign or_ln174_2_fu_687_p2 = (tmp4_fu_674_p6 | 192'd18446744073709551616);

assign or_ln174_3_fu_826_p5 = {{{{p_Result_s_fu_814_p5}, {64'd0}}, {v_V_4_reg_314}}, {grp_fu_342_p2}};

assign or_ln174_4_fu_638_p2 = (tmp5_fu_626_p6 | 192'd73786976294838206464);

assign or_ln174_fu_780_p2 = (tmp1_fu_768_p6 | 192'd73786976294838206464);

assign p_0_fu_787_p4 = {{{current_flag_reg_1078}, {add_ln213_reg_1100}}, {2'd0}};

assign p_Result_1_fu_855_p5 = {{ap_const_lv64_0[63:32]}, {v_V_2_reg_979}};

assign p_Result_2_fu_662_p5 = {{p_Val2_1_fu_162[63:32]}, {l1_RDATA}};

assign p_Result_s_fu_814_p5 = {{p_Val2_s_fu_166[63:32]}, {v_V_4_reg_314}};

assign p_s_fu_869_p5 = {{{{p_Result_1_fu_855_p5}, {grp_fu_333_p4}}, {4'd0}}, {trunc_ln174_2_fu_866_p1}};

assign ret_1_fu_493_p2 = ($signed(sext_ln215_fu_485_p1) + $signed(zext_ln215_fu_489_p1));

assign ret_2_fu_469_p2 = ($signed(sext_ln215_1_fu_462_p1) + $signed(zext_ln215_1_fu_466_p1));

assign ret_3_fu_446_p2 = ($signed(sext_ln215_2_fu_439_p1) + $signed(zext_ln215_2_fu_443_p1));

assign ret_4_cast_fu_558_p1 = ret_4_reg_1000;

assign ret_4_fu_552_p2 = (start_n_cast_fu_548_p1 + 33'd7);

assign ret_fu_513_p2 = (start_v_V_cast_fu_509_p1 + 33'd7);

assign sext_ln1346_fu_565_p1 = $signed(base_neighbor_V);

assign sext_ln215_1_fu_462_p1 = ap_phi_mux_lhs_1_phi_fu_287_p4;

assign sext_ln215_2_fu_439_p1 = $signed(base_degree_V);

assign sext_ln215_fu_485_p1 = ap_phi_mux_lhs_1_phi_fu_287_p4;

assign sext_ln534_1_fu_475_p1 = $signed(ret_2_fu_469_p2);

assign sext_ln534_2_fu_452_p1 = $signed(ret_3_fu_446_p2);

assign sext_ln534_3_fu_610_p1 = ngh_cnt_V_1_reg_304;

assign sext_ln534_4_fu_645_p1 = $signed(add_ln534_reg_1044);

assign sext_ln534_fu_499_p1 = $signed(ret_1_fu_493_p2);

assign sext_ln878_fu_596_p1 = ngh_cnt_V_1_reg_304;

assign start_n_cast8_fu_569_p0 = reg_349;

assign start_n_cast8_fu_569_p1 = start_n_cast8_fu_569_p0;

assign start_n_cast_fu_548_p0 = grp_fu_324_p4;

assign start_n_cast_fu_548_p1 = $unsigned(start_n_cast_fu_548_p0);

assign start_v_V_cast_fu_509_p1 = grp_fu_324_p4;

assign task_out_V_TVALID = regslice_both_task_out_V_U_vld_out;

assign tmp1_fu_768_p6 = {{{{{task_in_object_V_reg_895}, {32'd0}}, {reg_355}}, {4'd0}}, {trunc_ln174_1_reg_1092}};

assign tmp4_fu_674_p6 = {{{{{p_Result_2_fu_662_p5}, {reg_355}}, {4'd0}}, {l1_RDATA}}, {trunc_ln174_reg_1032}};

assign tmp5_fu_626_p6 = {{{{{i_reg_985}, {ngh_cnt_V_reg_1026}}, {reg_355}}, {4'd0}}, {trunc_ln174_3_fu_623_p1}};

assign tmp_1_fu_737_p4 = {{task_in[157:128]}};

assign trunc_ln174_1_fu_729_p1 = task_in[63:0];

assign trunc_ln174_2_fu_866_p1 = task_in[63:0];

assign trunc_ln174_3_fu_623_p1 = task_in[63:0];

assign trunc_ln174_fu_593_p1 = task_in[31:0];

assign trunc_ln213_1_fu_710_p4 = {{task_in[61:32]}};

assign trunc_ln213_2_fu_719_p1 = lhs_1_reg_284[29:0];

assign trunc_ln213_fu_746_p1 = lhs_1_reg_284[29:0];

assign ulog_addr_V_fu_756_p3 = {{add_ln213_1_reg_1087}, {2'd0}};

assign undo_log_entry_V_TVALID = regslice_both_undo_log_entry_V_U_vld_out;

assign v_V_2_fu_519_p2 = (grp_fu_324_p4 + 32'd7);

assign zext_ln174_fu_763_p1 = ulog_addr_V_fu_756_p3;

assign zext_ln215_1_fu_466_p1 = task_in_object_V_reg_895;

assign zext_ln215_2_fu_443_p1 = task_in_object_V_reg_895;

assign zext_ln215_fu_489_p1 = grp_fu_324_p4;

assign zext_ln878_fu_796_p1 = v_V_4_reg_314;

always @ (posedge ap_clk) begin
    ret_4_cast_reg_1011[33] <= 1'b0;
end

endmodule //mis_hls
