// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mis_enqueue,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=4,HLS_SYN_FF=1388,HLS_SYN_LUT=1367,HLS_VERSION=2019_2}" *)

module mis_enqueue (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        task_in,
        task_out_V_TDATA,
        task_out_V_TVALID,
        task_out_V_TREADY,
        m_axi_l1_V_AWVALID,
        m_axi_l1_V_AWREADY,
        m_axi_l1_V_AWADDR,
        m_axi_l1_V_AWID,
        m_axi_l1_V_AWLEN,
        m_axi_l1_V_AWSIZE,
        m_axi_l1_V_AWBURST,
        m_axi_l1_V_AWLOCK,
        m_axi_l1_V_AWCACHE,
        m_axi_l1_V_AWPROT,
        m_axi_l1_V_AWQOS,
        m_axi_l1_V_AWREGION,
        m_axi_l1_V_AWUSER,
        m_axi_l1_V_WVALID,
        m_axi_l1_V_WREADY,
        m_axi_l1_V_WDATA,
        m_axi_l1_V_WSTRB,
        m_axi_l1_V_WLAST,
        m_axi_l1_V_WID,
        m_axi_l1_V_WUSER,
        m_axi_l1_V_ARVALID,
        m_axi_l1_V_ARREADY,
        m_axi_l1_V_ARADDR,
        m_axi_l1_V_ARID,
        m_axi_l1_V_ARLEN,
        m_axi_l1_V_ARSIZE,
        m_axi_l1_V_ARBURST,
        m_axi_l1_V_ARLOCK,
        m_axi_l1_V_ARCACHE,
        m_axi_l1_V_ARPROT,
        m_axi_l1_V_ARQOS,
        m_axi_l1_V_ARREGION,
        m_axi_l1_V_ARUSER,
        m_axi_l1_V_RVALID,
        m_axi_l1_V_RREADY,
        m_axi_l1_V_RDATA,
        m_axi_l1_V_RLAST,
        m_axi_l1_V_RID,
        m_axi_l1_V_RUSER,
        m_axi_l1_V_RRESP,
        m_axi_l1_V_BVALID,
        m_axi_l1_V_BREADY,
        m_axi_l1_V_BRESP,
        m_axi_l1_V_BID,
        m_axi_l1_V_BUSER,
        undo_log_entry_V_TDATA,
        undo_log_entry_V_TVALID,
        undo_log_entry_V_TREADY
);

parameter    ap_ST_fsm_state1 = 46'd1;
parameter    ap_ST_fsm_state2 = 46'd2;
parameter    ap_ST_fsm_state3 = 46'd4;
parameter    ap_ST_fsm_state4 = 46'd8;
parameter    ap_ST_fsm_state5 = 46'd16;
parameter    ap_ST_fsm_state6 = 46'd32;
parameter    ap_ST_fsm_state7 = 46'd64;
parameter    ap_ST_fsm_state8 = 46'd128;
parameter    ap_ST_fsm_state9 = 46'd256;
parameter    ap_ST_fsm_state10 = 46'd512;
parameter    ap_ST_fsm_state11 = 46'd1024;
parameter    ap_ST_fsm_state12 = 46'd2048;
parameter    ap_ST_fsm_state13 = 46'd4096;
parameter    ap_ST_fsm_state14 = 46'd8192;
parameter    ap_ST_fsm_state15 = 46'd16384;
parameter    ap_ST_fsm_state16 = 46'd32768;
parameter    ap_ST_fsm_state17 = 46'd65536;
parameter    ap_ST_fsm_state18 = 46'd131072;
parameter    ap_ST_fsm_state19 = 46'd262144;
parameter    ap_ST_fsm_state20 = 46'd524288;
parameter    ap_ST_fsm_state21 = 46'd1048576;
parameter    ap_ST_fsm_state22 = 46'd2097152;
parameter    ap_ST_fsm_state23 = 46'd4194304;
parameter    ap_ST_fsm_state24 = 46'd8388608;
parameter    ap_ST_fsm_state25 = 46'd16777216;
parameter    ap_ST_fsm_state26 = 46'd33554432;
parameter    ap_ST_fsm_state27 = 46'd67108864;
parameter    ap_ST_fsm_state28 = 46'd134217728;
parameter    ap_ST_fsm_state29 = 46'd268435456;
parameter    ap_ST_fsm_state30 = 46'd536870912;
parameter    ap_ST_fsm_state31 = 46'd1073741824;
parameter    ap_ST_fsm_state32 = 46'd2147483648;
parameter    ap_ST_fsm_state33 = 46'd4294967296;
parameter    ap_ST_fsm_state34 = 46'd8589934592;
parameter    ap_ST_fsm_state35 = 46'd17179869184;
parameter    ap_ST_fsm_state36 = 46'd34359738368;
parameter    ap_ST_fsm_state37 = 46'd68719476736;
parameter    ap_ST_fsm_state38 = 46'd137438953472;
parameter    ap_ST_fsm_state39 = 46'd274877906944;
parameter    ap_ST_fsm_state40 = 46'd549755813888;
parameter    ap_ST_fsm_state41 = 46'd1099511627776;
parameter    ap_ST_fsm_state42 = 46'd2199023255552;
parameter    ap_ST_fsm_state43 = 46'd4398046511104;
parameter    ap_ST_fsm_state44 = 46'd8796093022208;
parameter    ap_ST_fsm_state45 = 46'd17592186044416;
parameter    ap_ST_fsm_state46 = 46'd35184372088832;
parameter    C_M_AXI_L1_V_ID_WIDTH = 1;
parameter    C_M_AXI_L1_V_ADDR_WIDTH = 32;
parameter    C_M_AXI_L1_V_DATA_WIDTH = 32;
parameter    C_M_AXI_L1_V_AWUSER_WIDTH = 1;
parameter    C_M_AXI_L1_V_ARUSER_WIDTH = 1;
parameter    C_M_AXI_L1_V_WUSER_WIDTH = 1;
parameter    C_M_AXI_L1_V_RUSER_WIDTH = 1;
parameter    C_M_AXI_L1_V_BUSER_WIDTH = 1;
parameter    C_M_AXI_L1_V_TARGET_ADDR = 0;
parameter    C_M_AXI_L1_V_USER_VALUE = 0;
parameter    C_M_AXI_L1_V_PROT_VALUE = 0;
parameter    C_M_AXI_L1_V_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_M_AXI_L1_V_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [131:0] task_in;
output  [135:0] task_out_V_TDATA;
output   task_out_V_TVALID;
input   task_out_V_TREADY;
output   m_axi_l1_V_AWVALID;
input   m_axi_l1_V_AWREADY;
output  [C_M_AXI_L1_V_ADDR_WIDTH - 1:0] m_axi_l1_V_AWADDR;
output  [C_M_AXI_L1_V_ID_WIDTH - 1:0] m_axi_l1_V_AWID;
output  [7:0] m_axi_l1_V_AWLEN;
output  [2:0] m_axi_l1_V_AWSIZE;
output  [1:0] m_axi_l1_V_AWBURST;
output  [1:0] m_axi_l1_V_AWLOCK;
output  [3:0] m_axi_l1_V_AWCACHE;
output  [2:0] m_axi_l1_V_AWPROT;
output  [3:0] m_axi_l1_V_AWQOS;
output  [3:0] m_axi_l1_V_AWREGION;
output  [C_M_AXI_L1_V_AWUSER_WIDTH - 1:0] m_axi_l1_V_AWUSER;
output   m_axi_l1_V_WVALID;
input   m_axi_l1_V_WREADY;
output  [C_M_AXI_L1_V_DATA_WIDTH - 1:0] m_axi_l1_V_WDATA;
output  [C_M_AXI_L1_V_WSTRB_WIDTH - 1:0] m_axi_l1_V_WSTRB;
output   m_axi_l1_V_WLAST;
output  [C_M_AXI_L1_V_ID_WIDTH - 1:0] m_axi_l1_V_WID;
output  [C_M_AXI_L1_V_WUSER_WIDTH - 1:0] m_axi_l1_V_WUSER;
output   m_axi_l1_V_ARVALID;
input   m_axi_l1_V_ARREADY;
output  [C_M_AXI_L1_V_ADDR_WIDTH - 1:0] m_axi_l1_V_ARADDR;
output  [C_M_AXI_L1_V_ID_WIDTH - 1:0] m_axi_l1_V_ARID;
output  [7:0] m_axi_l1_V_ARLEN;
output  [2:0] m_axi_l1_V_ARSIZE;
output  [1:0] m_axi_l1_V_ARBURST;
output  [1:0] m_axi_l1_V_ARLOCK;
output  [3:0] m_axi_l1_V_ARCACHE;
output  [2:0] m_axi_l1_V_ARPROT;
output  [3:0] m_axi_l1_V_ARQOS;
output  [3:0] m_axi_l1_V_ARREGION;
output  [C_M_AXI_L1_V_ARUSER_WIDTH - 1:0] m_axi_l1_V_ARUSER;
input   m_axi_l1_V_RVALID;
output   m_axi_l1_V_RREADY;
input  [C_M_AXI_L1_V_DATA_WIDTH - 1:0] m_axi_l1_V_RDATA;
input   m_axi_l1_V_RLAST;
input  [C_M_AXI_L1_V_ID_WIDTH - 1:0] m_axi_l1_V_RID;
input  [C_M_AXI_L1_V_RUSER_WIDTH - 1:0] m_axi_l1_V_RUSER;
input  [1:0] m_axi_l1_V_RRESP;
input   m_axi_l1_V_BVALID;
output   m_axi_l1_V_BREADY;
input  [1:0] m_axi_l1_V_BRESP;
input  [C_M_AXI_L1_V_ID_WIDTH - 1:0] m_axi_l1_V_BID;
input  [C_M_AXI_L1_V_BUSER_WIDTH - 1:0] m_axi_l1_V_BUSER;
input  [63:0] undo_log_entry_V_TDATA;
input   undo_log_entry_V_TVALID;
output   undo_log_entry_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg undo_log_entry_V_TREADY;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [45:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] initialized_V;
reg   [31:0] base_neighbor_V;
reg   [31:0] base_degree_V;
reg   [31:0] total_v_V;
reg    task_out_V_TDATA_blk_n;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
reg   [0:0] icmp_ln887_1_reg_624;
wire    ap_CS_fsm_state24;
wire   [0:0] icmp_ln887_fu_396_p2;
wire   [0:0] icmp_ln887_2_fu_422_p2;
wire    ap_CS_fsm_state40;
reg   [0:0] icmp_ln887_2_reg_638;
reg    l1_V_blk_n_AR;
wire   [0:0] initialized_V_load_load_fu_237_p1;
reg    l1_V_blk_n_R;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state10;
reg   [0:0] initialized_V_load_reg_534;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state18;
reg    l1_V_blk_n_AW;
wire    ap_CS_fsm_state17;
reg    l1_V_blk_n_W;
reg    l1_V_blk_n_B;
wire    ap_CS_fsm_state23;
wire   [0:0] icmp_ln887_1_fu_401_p2;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state46;
reg    l1_V_AWVALID;
wire    l1_V_AWREADY;
reg   [31:0] l1_V_AWADDR;
reg    l1_V_WVALID;
wire    l1_V_WREADY;
reg   [31:0] l1_V_WDATA;
reg    l1_V_ARVALID;
wire    l1_V_ARREADY;
reg   [31:0] l1_V_ARADDR;
wire    l1_V_RVALID;
reg    l1_V_RREADY;
wire   [31:0] l1_V_RDATA;
wire    l1_V_RLAST;
wire   [0:0] l1_V_RID;
wire   [0:0] l1_V_RUSER;
wire   [1:0] l1_V_RRESP;
wire    l1_V_BVALID;
reg    l1_V_BREADY;
wire   [1:0] l1_V_BRESP;
wire   [0:0] l1_V_BID;
wire   [0:0] l1_V_BUSER;
reg    ap_block_state1_io;
reg   [31:0] l1_V_addr_3_reg_562;
reg    ap_block_state10;
reg  signed [31:0] start_n_V_reg_574;
reg   [31:0] n_V_reg_583;
wire   [32:0] ret_V_1_fu_343_p2;
reg   [32:0] ret_V_1_reg_589;
wire    ap_CS_fsm_state22;
wire   [31:0] i_V_fu_349_p4;
reg   [31:0] i_V_reg_594;
wire   [33:0] zext_ln119_1_fu_358_p1;
reg   [33:0] zext_ln119_1_reg_599;
wire   [31:0] ngh_cnt_V_fu_375_p3;
reg   [31:0] ngh_cnt_V_reg_604;
wire   [63:0] lhs_V_2_fu_388_p1;
reg   [63:0] lhs_V_2_reg_616;
reg    ap_predicate_op132_writereq_state24;
reg    ap_predicate_op142_write_state24;
reg    ap_block_state24_io;
wire   [31:0] child_ts_V_fu_419_p1;
reg   [31:0] child_ts_V_reg_633;
wire  signed [135:0] sext_ln177_1_fu_439_p1;
wire   [63:0] grp_fu_414_p2;
reg   [63:0] ret_V_2_reg_647;
wire    ap_CS_fsm_state28;
wire   [32:0] add_ln544_fu_456_p2;
reg   [32:0] add_ln544_reg_652;
reg   [31:0] l1_V_addr_6_reg_657;
wire    ap_CS_fsm_state29;
wire  signed [135:0] sext_ln177_fu_502_p1;
wire   [31:0] ngh_cnt_V_1_fu_512_p2;
reg    ap_block_state39_io;
reg    ap_block_state40_io;
reg  signed [31:0] t_V_reg_226;
wire  signed [63:0] sext_ln544_fu_313_p1;
wire   [63:0] add_ln544_1_fu_465_p2;
wire    regslice_both_task_out_V_U_apdone_blk;
reg    ap_block_state46;
reg   [63:0] p_Val2_s_fu_100;
wire   [63:0] p_Result_s_fu_479_p5;
wire   [31:0] vid_V_fu_286_p4;
wire  signed [33:0] lhs_V_fu_299_p1;
wire   [33:0] rhs_V_fu_303_p1;
wire   [33:0] ret_V_fu_307_p2;
wire   [32:0] zext_ln119_fu_340_p1;
wire  signed [33:0] empty_fu_361_p1;
wire   [0:0] empty_8_fu_364_p2;
wire   [31:0] empty_9_fu_370_p2;
wire  signed [33:0] sext_ln887_fu_392_p1;
wire   [31:0] grp_fu_414_p0;
wire   [31:0] grp_fu_414_p1;
wire   [63:0] trunc_ln176_fu_426_p1;
wire   [131:0] tmp_1_fu_429_p5;
wire  signed [32:0] sext_ln544_1_fu_448_p1;
wire  signed [32:0] sext_ln544_2_fu_452_p1;
wire  signed [63:0] sext_ln544_3_fu_462_p1;
wire   [131:0] tmp_fu_491_p5;
reg    grp_fu_414_ce;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
reg   [45:0] ap_NS_fsm;
reg   [135:0] task_out_V_TDATA_int;
reg    task_out_V_TVALID_int;
wire    task_out_V_TREADY_int;
wire    regslice_both_task_out_V_U_vld_out;
wire    regslice_both_undo_log_entry_V_U_apdone_blk;
wire   [63:0] undo_log_entry_V_TDATA_int;
wire    undo_log_entry_V_TVALID_int;
wire    regslice_both_undo_log_entry_V_U_ack_in;
wire   [63:0] grp_fu_414_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 46'd1;
#0 initialized_V = 1'd0;
#0 base_neighbor_V = 32'd0;
#0 base_degree_V = 32'd0;
#0 total_v_V = 32'd0;
end

mis_enqueue_l1_V_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_L1_V_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_L1_V_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_L1_V_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_L1_V_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_L1_V_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_L1_V_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_L1_V_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_L1_V_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_L1_V_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_L1_V_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_L1_V_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_L1_V_CACHE_VALUE ))
mis_enqueue_l1_V_m_axi_U(
    .AWVALID(m_axi_l1_V_AWVALID),
    .AWREADY(m_axi_l1_V_AWREADY),
    .AWADDR(m_axi_l1_V_AWADDR),
    .AWID(m_axi_l1_V_AWID),
    .AWLEN(m_axi_l1_V_AWLEN),
    .AWSIZE(m_axi_l1_V_AWSIZE),
    .AWBURST(m_axi_l1_V_AWBURST),
    .AWLOCK(m_axi_l1_V_AWLOCK),
    .AWCACHE(m_axi_l1_V_AWCACHE),
    .AWPROT(m_axi_l1_V_AWPROT),
    .AWQOS(m_axi_l1_V_AWQOS),
    .AWREGION(m_axi_l1_V_AWREGION),
    .AWUSER(m_axi_l1_V_AWUSER),
    .WVALID(m_axi_l1_V_WVALID),
    .WREADY(m_axi_l1_V_WREADY),
    .WDATA(m_axi_l1_V_WDATA),
    .WSTRB(m_axi_l1_V_WSTRB),
    .WLAST(m_axi_l1_V_WLAST),
    .WID(m_axi_l1_V_WID),
    .WUSER(m_axi_l1_V_WUSER),
    .ARVALID(m_axi_l1_V_ARVALID),
    .ARREADY(m_axi_l1_V_ARREADY),
    .ARADDR(m_axi_l1_V_ARADDR),
    .ARID(m_axi_l1_V_ARID),
    .ARLEN(m_axi_l1_V_ARLEN),
    .ARSIZE(m_axi_l1_V_ARSIZE),
    .ARBURST(m_axi_l1_V_ARBURST),
    .ARLOCK(m_axi_l1_V_ARLOCK),
    .ARCACHE(m_axi_l1_V_ARCACHE),
    .ARPROT(m_axi_l1_V_ARPROT),
    .ARQOS(m_axi_l1_V_ARQOS),
    .ARREGION(m_axi_l1_V_ARREGION),
    .ARUSER(m_axi_l1_V_ARUSER),
    .RVALID(m_axi_l1_V_RVALID),
    .RREADY(m_axi_l1_V_RREADY),
    .RDATA(m_axi_l1_V_RDATA),
    .RLAST(m_axi_l1_V_RLAST),
    .RID(m_axi_l1_V_RID),
    .RUSER(m_axi_l1_V_RUSER),
    .RRESP(m_axi_l1_V_RRESP),
    .BVALID(m_axi_l1_V_BVALID),
    .BREADY(m_axi_l1_V_BREADY),
    .BRESP(m_axi_l1_V_BRESP),
    .BID(m_axi_l1_V_BID),
    .BUSER(m_axi_l1_V_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(l1_V_ARVALID),
    .I_ARREADY(l1_V_ARREADY),
    .I_ARADDR(l1_V_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(l1_V_RVALID),
    .I_RREADY(l1_V_RREADY),
    .I_RDATA(l1_V_RDATA),
    .I_RID(l1_V_RID),
    .I_RUSER(l1_V_RUSER),
    .I_RRESP(l1_V_RRESP),
    .I_RLAST(l1_V_RLAST),
    .I_AWVALID(l1_V_AWVALID),
    .I_AWREADY(l1_V_AWREADY),
    .I_AWADDR(l1_V_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(l1_V_WVALID),
    .I_WREADY(l1_V_WREADY),
    .I_WDATA(l1_V_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(l1_V_BVALID),
    .I_BREADY(l1_V_BREADY),
    .I_BRESP(l1_V_BRESP),
    .I_BID(l1_V_BID),
    .I_BUSER(l1_V_BUSER)
);

mis_enqueue_mul_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mis_enqueue_mul_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_414_p0),
    .din1(grp_fu_414_p1),
    .ce(grp_fu_414_ce),
    .dout(grp_fu_414_p2)
);

regslice_both #(
    .DataWidth( 136 ))
regslice_both_task_out_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(task_out_V_TDATA_int),
    .vld_in(task_out_V_TVALID_int),
    .ack_in(task_out_V_TREADY_int),
    .data_out(task_out_V_TDATA),
    .vld_out(regslice_both_task_out_V_U_vld_out),
    .ack_out(task_out_V_TREADY),
    .apdone_blk(regslice_both_task_out_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_undo_log_entry_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(undo_log_entry_V_TDATA),
    .vld_in(undo_log_entry_V_TVALID),
    .ack_in(regslice_both_undo_log_entry_V_U_ack_in),
    .data_out(undo_log_entry_V_TDATA_int),
    .vld_out(undo_log_entry_V_TVALID_int),
    .ack_out(1'b0),
    .apdone_blk(regslice_both_undo_log_entry_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state39_io) & (1'b1 == ap_CS_fsm_state39))) begin
        t_V_reg_226 <= ngh_cnt_V_1_fu_512_p2;
    end else if (((l1_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        t_V_reg_226 <= start_n_V_reg_574;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        add_ln544_reg_652 <= add_ln544_fu_456_p2;
        ret_V_2_reg_647 <= grp_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        base_degree_V <= l1_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        base_neighbor_V <= l1_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state24_io) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln887_1_fu_401_p2 == 1'd1) & (icmp_ln887_fu_396_p2 == 1'd1))) begin
        child_ts_V_reg_633 <= child_ts_V_fu_419_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((l1_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        i_V_reg_594 <= {{task_in[131:100]}};
        lhs_V_2_reg_616[31 : 0] <= lhs_V_2_fu_388_p1[31 : 0];
        ngh_cnt_V_reg_604 <= ngh_cnt_V_fu_375_p3;
        zext_ln119_1_reg_599[32 : 0] <= zext_ln119_1_fu_358_p1[32 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state24_io) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln887_fu_396_p2 == 1'd1))) begin
        icmp_ln887_1_reg_624 <= icmp_ln887_1_fu_401_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state24_io) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln887_fu_396_p2 == 1'd0))) begin
        icmp_ln887_2_reg_638 <= icmp_ln887_2_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (initialized_V == 1'd0))) begin
        initialized_V <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        initialized_V_load_reg_534 <= initialized_V;
    end
end

always @ (posedge ap_clk) begin
    if ((~((l1_V_RVALID == 1'b0) & (initialized_V_load_reg_534 == 1'd0)) & (1'b1 == ap_CS_fsm_state10))) begin
        l1_V_addr_3_reg_562 <= sext_ln544_fu_313_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        l1_V_addr_6_reg_657 <= add_ln544_1_fu_465_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((l1_V_RVALID == 1'b0) | (l1_V_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
        n_V_reg_583 <= l1_V_RDATA;
        start_n_V_reg_574 <= {{task_in[99:68]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((task_out_V_TREADY_int == 1'b0) | (l1_V_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state38))) begin
        p_Val2_s_fu_100 <= p_Result_s_fu_479_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        ret_V_1_reg_589 <= ret_V_1_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((l1_V_RVALID == 1'b0) & (initialized_V_load_reg_534 == 1'd0)) & (1'b1 == ap_CS_fsm_state10) & (initialized_V_load_reg_534 == 1'd0))) begin
        total_v_V <= l1_V_RDATA;
    end
end

always @ (*) begin
    if ((~((l1_V_BVALID == 1'b0) | (regslice_both_task_out_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state46))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((l1_V_BVALID == 1'b0) | (regslice_both_task_out_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state46))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state28) | ((l1_V_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((1'b0 == ap_block_state24_io) & (1'b1 == ap_CS_fsm_state24)))) begin
        grp_fu_414_ce = 1'b1;
    end else begin
        grp_fu_414_ce = 1'b0;
    end
end

always @ (*) begin
    if (((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
        l1_V_ARADDR = l1_V_addr_6_reg_657;
    end else if (((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        l1_V_ARADDR = l1_V_addr_3_reg_562;
    end else if (((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        l1_V_ARADDR = 64'd1;
    end else if (((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        l1_V_ARADDR = 64'd5;
    end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (initialized_V == 1'd0))) begin
        l1_V_ARADDR = 64'd4;
    end else begin
        l1_V_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (initialized_V == 1'd0)) | ((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        l1_V_ARVALID = 1'b1;
    end else begin
        l1_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state40_io) & (1'b1 == ap_CS_fsm_state40))) begin
        l1_V_AWADDR = 64'd2057;
    end else if (((ap_predicate_op132_writereq_state24 == 1'b1) & (1'b0 == ap_block_state24_io) & (1'b1 == ap_CS_fsm_state24))) begin
        l1_V_AWADDR = 64'd2056;
    end else if (((l1_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        l1_V_AWADDR = 64'd2055;
    end else begin
        l1_V_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((l1_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((1'b0 == ap_block_state40_io) & (1'b1 == ap_CS_fsm_state40)) | ((ap_predicate_op132_writereq_state24 == 1'b1) & (1'b0 == ap_block_state24_io) & (1'b1 == ap_CS_fsm_state24)))) begin
        l1_V_AWVALID = 1'b1;
    end else begin
        l1_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((l1_V_BVALID == 1'b0) | (regslice_both_task_out_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state46)) | ((l1_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((l1_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23)))) begin
        l1_V_BREADY = 1'b1;
    end else begin
        l1_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((~((l1_V_RVALID == 1'b0) | (l1_V_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state18)) | (~((l1_V_RVALID == 1'b0) & (initialized_V_load_reg_534 == 1'd0)) & (1'b1 == ap_CS_fsm_state10) & (initialized_V_load_reg_534 == 1'd0)) | ((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | (~((task_out_V_TREADY_int == 1'b0) | (l1_V_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state38)))) begin
        l1_V_RREADY = 1'b1;
    end else begin
        l1_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        l1_V_WDATA = 32'd7;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        l1_V_WDATA = t_V_reg_226;
    end else if (((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        l1_V_WDATA = {{task_in[99:68]}};
    end else begin
        l1_V_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((l1_V_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((l1_V_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | (~((l1_V_RVALID == 1'b0) | (l1_V_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state18)))) begin
        l1_V_WVALID = 1'b1;
    end else begin
        l1_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (initialized_V == 1'd0)))) begin
        l1_V_blk_n_AR = m_axi_l1_V_ARREADY;
    end else begin
        l1_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state40) | ((1'b1 == ap_CS_fsm_state24) & (icmp_ln887_1_fu_401_p2 == 1'd1) & (icmp_ln887_fu_396_p2 == 1'd1)))) begin
        l1_V_blk_n_AW = m_axi_l1_V_AWREADY;
    end else begin
        l1_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state23))) begin
        l1_V_blk_n_B = m_axi_l1_V_BVALID;
    end else begin
        l1_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state38) | ((1'b1 == ap_CS_fsm_state10) & (initialized_V_load_reg_534 == 1'd0)))) begin
        l1_V_blk_n_R = m_axi_l1_V_RVALID;
    end else begin
        l1_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state18))) begin
        l1_V_blk_n_W = m_axi_l1_V_WREADY;
    end else begin
        l1_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | ((1'b1 == ap_CS_fsm_state40) & (icmp_ln887_2_reg_638 == 1'd1)) | ((1'b1 == ap_CS_fsm_state24) & (icmp_ln887_2_fu_422_p2 == 1'd1) & (icmp_ln887_fu_396_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state39) & (icmp_ln887_1_reg_624 == 1'd1)))) begin
        task_out_V_TDATA_blk_n = task_out_V_TREADY_int;
    end else begin
        task_out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        task_out_V_TDATA_int = sext_ln177_fu_502_p1;
    end else if (((ap_predicate_op142_write_state24 == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        task_out_V_TDATA_int = sext_ln177_1_fu_439_p1;
    end else begin
        task_out_V_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op142_write_state24 == 1'b1) & (1'b0 == ap_block_state24_io) & (1'b1 == ap_CS_fsm_state24)) | (~((task_out_V_TREADY_int == 1'b0) | (l1_V_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state38)))) begin
        task_out_V_TVALID_int = 1'b1;
    end else begin
        task_out_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_undo_log_entry_V_U_ack_in == 1'b1) & (undo_log_entry_V_TVALID == 1'b1))) begin
        undo_log_entry_V_TREADY = 1'b1;
    end else begin
        undo_log_entry_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (initialized_V_load_load_fu_237_p1 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (initialized_V == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((l1_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if ((~((l1_V_RVALID == 1'b0) & (initialized_V_load_reg_534 == 1'd0)) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((l1_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if ((~((l1_V_RVALID == 1'b0) | (l1_V_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((l1_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b0 == ap_block_state24_io) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln887_fu_396_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else if (((1'b0 == ap_block_state24_io) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln887_fu_396_p2 == 1'd1) & (icmp_ln887_1_fu_401_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else if (((1'b0 == ap_block_state24_io) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln887_1_fu_401_p2 == 1'd1) & (icmp_ln887_fu_396_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((l1_V_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((l1_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((l1_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            if ((~((task_out_V_TREADY_int == 1'b0) | (l1_V_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((1'b0 == ap_block_state39_io) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((1'b0 == ap_block_state40_io) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((l1_V_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if ((~((l1_V_BVALID == 1'b0) | (regslice_both_task_out_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln544_1_fu_465_p2 = ($signed(ret_V_2_reg_647) + $signed(sext_ln544_3_fu_462_p1));

assign add_ln544_fu_456_p2 = ($signed(sext_ln544_1_fu_448_p1) + $signed(sext_ln544_2_fu_452_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state10 = ((l1_V_RVALID == 1'b0) & (initialized_V_load_reg_534 == 1'd0));
end

always @ (*) begin
    ap_block_state1_io = ((l1_V_ARREADY == 1'b0) & (initialized_V == 1'd0));
end

always @ (*) begin
    ap_block_state24_io = (((ap_predicate_op142_write_state24 == 1'b1) & (task_out_V_TREADY_int == 1'b0)) | ((ap_predicate_op132_writereq_state24 == 1'b1) & (l1_V_AWREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state39_io = ((task_out_V_TREADY_int == 1'b0) & (icmp_ln887_1_reg_624 == 1'd1));
end

always @ (*) begin
    ap_block_state40_io = ((l1_V_AWREADY == 1'b0) | ((task_out_V_TREADY_int == 1'b0) & (icmp_ln887_2_reg_638 == 1'd1)));
end

always @ (*) begin
    ap_block_state46 = ((l1_V_BVALID == 1'b0) | (regslice_both_task_out_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_predicate_op132_writereq_state24 = ((icmp_ln887_1_fu_401_p2 == 1'd1) & (icmp_ln887_fu_396_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op142_write_state24 = ((icmp_ln887_2_fu_422_p2 == 1'd1) & (icmp_ln887_fu_396_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign child_ts_V_fu_419_p1 = task_in[31:0];

assign empty_8_fu_364_p2 = (($signed(zext_ln119_1_fu_358_p1) > $signed(empty_fu_361_p1)) ? 1'b1 : 1'b0);

assign empty_9_fu_370_p2 = ($signed(start_n_V_reg_574) + $signed(32'd7));

assign empty_fu_361_p1 = start_n_V_reg_574;

assign grp_fu_414_p0 = lhs_V_2_reg_616;

assign grp_fu_414_p1 = grp_fu_414_p10;

assign grp_fu_414_p10 = total_v_V;

assign i_V_fu_349_p4 = {{task_in[131:100]}};

assign icmp_ln887_1_fu_401_p2 = (($signed(t_V_reg_226) < $signed(n_V_reg_583)) ? 1'b1 : 1'b0);

assign icmp_ln887_2_fu_422_p2 = (($signed(ngh_cnt_V_reg_604) < $signed(n_V_reg_583)) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_396_p2 = (($signed(sext_ln887_fu_392_p1) < $signed(zext_ln119_1_reg_599)) ? 1'b1 : 1'b0);

assign initialized_V_load_load_fu_237_p1 = initialized_V;

assign lhs_V_2_fu_388_p1 = i_V_fu_349_p4;

assign lhs_V_fu_299_p1 = $signed(base_degree_V);

assign ngh_cnt_V_1_fu_512_p2 = ($signed(t_V_reg_226) + $signed(32'd1));

assign ngh_cnt_V_fu_375_p3 = ((empty_8_fu_364_p2[0:0] === 1'b1) ? empty_9_fu_370_p2 : start_n_V_reg_574);

assign p_Result_s_fu_479_p5 = {{p_Val2_s_fu_100[63:32]}, {l1_V_RDATA}};

assign ret_V_1_fu_343_p2 = (zext_ln119_fu_340_p1 + 33'd7);

assign ret_V_fu_307_p2 = ($signed(lhs_V_fu_299_p1) + $signed(rhs_V_fu_303_p1));

assign rhs_V_fu_303_p1 = vid_V_fu_286_p4;

assign sext_ln177_1_fu_439_p1 = $signed(tmp_1_fu_429_p5);

assign sext_ln177_fu_502_p1 = $signed(tmp_fu_491_p5);

assign sext_ln544_1_fu_448_p1 = $signed(base_neighbor_V);

assign sext_ln544_2_fu_452_p1 = t_V_reg_226;

assign sext_ln544_3_fu_462_p1 = $signed(add_ln544_reg_652);

assign sext_ln544_fu_313_p1 = $signed(ret_V_fu_307_p2);

assign sext_ln887_fu_392_p1 = t_V_reg_226;

assign task_out_V_TVALID = regslice_both_task_out_V_U_vld_out;

assign tmp_1_fu_429_p5 = {{{{i_V_reg_594}, {ngh_cnt_V_reg_604}}, {4'd4}}, {trunc_ln176_fu_426_p1}};

assign tmp_fu_491_p5 = {{{{p_Result_s_fu_479_p5}, {4'd1}}, {l1_V_RDATA}}, {child_ts_V_reg_633}};

assign trunc_ln176_fu_426_p1 = task_in[63:0];

assign vid_V_fu_286_p4 = {{task_in[63:32]}};

assign zext_ln119_1_fu_358_p1 = ret_V_1_reg_589;

assign zext_ln119_fu_340_p1 = $unsigned(start_n_V_reg_574);

always @ (posedge ap_clk) begin
    zext_ln119_1_reg_599[33] <= 1'b0;
    lhs_V_2_reg_616[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //mis_enqueue
