-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mis_enqueue is
generic (
    C_M_AXI_L1_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_L1_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_L1_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_L1_V_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_L1_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_L1_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_L1_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_L1_V_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_L1_V_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_L1_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_L1_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_L1_V_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    task_in : IN STD_LOGIC_VECTOR (131 downto 0);
    task_out_V_TDATA : OUT STD_LOGIC_VECTOR (135 downto 0);
    task_out_V_TVALID : OUT STD_LOGIC;
    task_out_V_TREADY : IN STD_LOGIC;
    m_axi_l1_V_AWVALID : OUT STD_LOGIC;
    m_axi_l1_V_AWREADY : IN STD_LOGIC;
    m_axi_l1_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_ADDR_WIDTH-1 downto 0);
    m_axi_l1_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_ID_WIDTH-1 downto 0);
    m_axi_l1_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_l1_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_l1_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_l1_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_AWUSER_WIDTH-1 downto 0);
    m_axi_l1_V_WVALID : OUT STD_LOGIC;
    m_axi_l1_V_WREADY : IN STD_LOGIC;
    m_axi_l1_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_DATA_WIDTH-1 downto 0);
    m_axi_l1_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_DATA_WIDTH/8-1 downto 0);
    m_axi_l1_V_WLAST : OUT STD_LOGIC;
    m_axi_l1_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_ID_WIDTH-1 downto 0);
    m_axi_l1_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_WUSER_WIDTH-1 downto 0);
    m_axi_l1_V_ARVALID : OUT STD_LOGIC;
    m_axi_l1_V_ARREADY : IN STD_LOGIC;
    m_axi_l1_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_ADDR_WIDTH-1 downto 0);
    m_axi_l1_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_ID_WIDTH-1 downto 0);
    m_axi_l1_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_l1_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_l1_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_l1_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_l1_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_L1_V_ARUSER_WIDTH-1 downto 0);
    m_axi_l1_V_RVALID : IN STD_LOGIC;
    m_axi_l1_V_RREADY : OUT STD_LOGIC;
    m_axi_l1_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_L1_V_DATA_WIDTH-1 downto 0);
    m_axi_l1_V_RLAST : IN STD_LOGIC;
    m_axi_l1_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_L1_V_ID_WIDTH-1 downto 0);
    m_axi_l1_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_L1_V_RUSER_WIDTH-1 downto 0);
    m_axi_l1_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_V_BVALID : IN STD_LOGIC;
    m_axi_l1_V_BREADY : OUT STD_LOGIC;
    m_axi_l1_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_l1_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_L1_V_ID_WIDTH-1 downto 0);
    m_axi_l1_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_L1_V_BUSER_WIDTH-1 downto 0);
    undo_log_entry_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    undo_log_entry_V_TVALID : IN STD_LOGIC;
    undo_log_entry_V_TREADY : OUT STD_LOGIC );
end;


architecture behav of mis_enqueue is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mis_enqueue,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=4,HLS_SYN_FF=1388,HLS_SYN_LUT=1367,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (45 downto 0) := "0000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (45 downto 0) := "0000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (45 downto 0) := "0000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (45 downto 0) := "0000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (45 downto 0) := "0000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (45 downto 0) := "0000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (45 downto 0) := "0001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (45 downto 0) := "0010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (45 downto 0) := "0100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (45 downto 0) := "1000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_807 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100000000111";
    constant ap_const_lv64_808 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100000001000";
    constant ap_const_lv64_809 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100000001001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv33_7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000111";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal initialized_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal base_neighbor_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal base_degree_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal total_v_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal task_out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal icmp_ln887_1_reg_624 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal icmp_ln887_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_2_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal icmp_ln887_2_reg_638 : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_V_blk_n_AR : STD_LOGIC;
    signal initialized_V_load_load_fu_237_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal initialized_V_load_reg_534 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal l1_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal l1_V_blk_n_W : STD_LOGIC;
    signal l1_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal icmp_ln887_1_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal l1_V_AWVALID : STD_LOGIC;
    signal l1_V_AWREADY : STD_LOGIC;
    signal l1_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal l1_V_WVALID : STD_LOGIC;
    signal l1_V_WREADY : STD_LOGIC;
    signal l1_V_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal l1_V_ARVALID : STD_LOGIC;
    signal l1_V_ARREADY : STD_LOGIC;
    signal l1_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal l1_V_RVALID : STD_LOGIC;
    signal l1_V_RREADY : STD_LOGIC;
    signal l1_V_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal l1_V_RLAST : STD_LOGIC;
    signal l1_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal l1_V_BVALID : STD_LOGIC;
    signal l1_V_BREADY : STD_LOGIC;
    signal l1_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal l1_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_io : BOOLEAN;
    signal l1_V_addr_3_reg_562 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state10 : BOOLEAN;
    signal start_n_V_reg_574 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_V_reg_583 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_1_fu_343_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_1_reg_589 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal i_V_fu_349_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_reg_594 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln119_1_fu_358_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln119_1_reg_599 : STD_LOGIC_VECTOR (33 downto 0);
    signal ngh_cnt_V_fu_375_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ngh_cnt_V_reg_604 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_2_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_V_2_reg_616 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_op132_writereq_state24 : BOOLEAN;
    signal ap_predicate_op142_write_state24 : BOOLEAN;
    signal ap_block_state24_io : BOOLEAN;
    signal child_ts_V_fu_419_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal child_ts_V_reg_633 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln177_1_fu_439_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal grp_fu_414_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_2_reg_647 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal add_ln544_fu_456_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln544_reg_652 : STD_LOGIC_VECTOR (32 downto 0);
    signal l1_V_addr_6_reg_657 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal sext_ln177_fu_502_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal ngh_cnt_V_1_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state39_io : BOOLEAN;
    signal ap_block_state40_io : BOOLEAN;
    signal t_V_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln544_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln544_1_fu_465_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_task_out_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state46 : BOOLEAN;
    signal p_Val2_s_fu_100 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_479_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal vid_V_fu_286_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_fu_299_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal rhs_V_fu_303_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal ret_V_fu_307_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln119_fu_340_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal empty_fu_361_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal empty_8_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_9_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln887_fu_392_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_414_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_414_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln176_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_429_p5 : STD_LOGIC_VECTOR (131 downto 0);
    signal sext_ln544_1_fu_448_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln544_2_fu_452_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln544_3_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_491_p5 : STD_LOGIC_VECTOR (131 downto 0);
    signal grp_fu_414_ce : STD_LOGIC;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (45 downto 0);
    signal task_out_V_TDATA_int : STD_LOGIC_VECTOR (135 downto 0);
    signal task_out_V_TVALID_int : STD_LOGIC;
    signal task_out_V_TREADY_int : STD_LOGIC;
    signal regslice_both_task_out_V_U_vld_out : STD_LOGIC;
    signal regslice_both_undo_log_entry_V_U_apdone_blk : STD_LOGIC;
    signal undo_log_entry_V_TDATA_int : STD_LOGIC_VECTOR (63 downto 0);
    signal undo_log_entry_V_TVALID_int : STD_LOGIC;
    signal regslice_both_undo_log_entry_V_U_ack_in : STD_LOGIC;
    signal grp_fu_414_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component mis_enqueue_mul_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component mis_enqueue_l1_V_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    mis_enqueue_l1_V_m_axi_U : component mis_enqueue_l1_V_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_L1_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_L1_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_L1_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_L1_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_L1_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_L1_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_L1_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_L1_V_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_L1_V_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_L1_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_L1_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_L1_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_l1_V_AWVALID,
        AWREADY => m_axi_l1_V_AWREADY,
        AWADDR => m_axi_l1_V_AWADDR,
        AWID => m_axi_l1_V_AWID,
        AWLEN => m_axi_l1_V_AWLEN,
        AWSIZE => m_axi_l1_V_AWSIZE,
        AWBURST => m_axi_l1_V_AWBURST,
        AWLOCK => m_axi_l1_V_AWLOCK,
        AWCACHE => m_axi_l1_V_AWCACHE,
        AWPROT => m_axi_l1_V_AWPROT,
        AWQOS => m_axi_l1_V_AWQOS,
        AWREGION => m_axi_l1_V_AWREGION,
        AWUSER => m_axi_l1_V_AWUSER,
        WVALID => m_axi_l1_V_WVALID,
        WREADY => m_axi_l1_V_WREADY,
        WDATA => m_axi_l1_V_WDATA,
        WSTRB => m_axi_l1_V_WSTRB,
        WLAST => m_axi_l1_V_WLAST,
        WID => m_axi_l1_V_WID,
        WUSER => m_axi_l1_V_WUSER,
        ARVALID => m_axi_l1_V_ARVALID,
        ARREADY => m_axi_l1_V_ARREADY,
        ARADDR => m_axi_l1_V_ARADDR,
        ARID => m_axi_l1_V_ARID,
        ARLEN => m_axi_l1_V_ARLEN,
        ARSIZE => m_axi_l1_V_ARSIZE,
        ARBURST => m_axi_l1_V_ARBURST,
        ARLOCK => m_axi_l1_V_ARLOCK,
        ARCACHE => m_axi_l1_V_ARCACHE,
        ARPROT => m_axi_l1_V_ARPROT,
        ARQOS => m_axi_l1_V_ARQOS,
        ARREGION => m_axi_l1_V_ARREGION,
        ARUSER => m_axi_l1_V_ARUSER,
        RVALID => m_axi_l1_V_RVALID,
        RREADY => m_axi_l1_V_RREADY,
        RDATA => m_axi_l1_V_RDATA,
        RLAST => m_axi_l1_V_RLAST,
        RID => m_axi_l1_V_RID,
        RUSER => m_axi_l1_V_RUSER,
        RRESP => m_axi_l1_V_RRESP,
        BVALID => m_axi_l1_V_BVALID,
        BREADY => m_axi_l1_V_BREADY,
        BRESP => m_axi_l1_V_BRESP,
        BID => m_axi_l1_V_BID,
        BUSER => m_axi_l1_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => l1_V_ARVALID,
        I_ARREADY => l1_V_ARREADY,
        I_ARADDR => l1_V_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => l1_V_RVALID,
        I_RREADY => l1_V_RREADY,
        I_RDATA => l1_V_RDATA,
        I_RID => l1_V_RID,
        I_RUSER => l1_V_RUSER,
        I_RRESP => l1_V_RRESP,
        I_RLAST => l1_V_RLAST,
        I_AWVALID => l1_V_AWVALID,
        I_AWREADY => l1_V_AWREADY,
        I_AWADDR => l1_V_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => l1_V_WVALID,
        I_WREADY => l1_V_WREADY,
        I_WDATA => l1_V_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => l1_V_BVALID,
        I_BREADY => l1_V_BREADY,
        I_BRESP => l1_V_BRESP,
        I_BID => l1_V_BID,
        I_BUSER => l1_V_BUSER);

    mis_enqueue_mul_3bkb_U1 : component mis_enqueue_mul_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_414_p0,
        din1 => grp_fu_414_p1,
        ce => grp_fu_414_ce,
        dout => grp_fu_414_p2);

    regslice_both_task_out_V_U : component regslice_both
    generic map (
        DataWidth => 136)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => task_out_V_TDATA_int,
        vld_in => task_out_V_TVALID_int,
        ack_in => task_out_V_TREADY_int,
        data_out => task_out_V_TDATA,
        vld_out => regslice_both_task_out_V_U_vld_out,
        ack_out => task_out_V_TREADY,
        apdone_blk => regslice_both_task_out_V_U_apdone_blk);

    regslice_both_undo_log_entry_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => undo_log_entry_V_TDATA,
        vld_in => undo_log_entry_V_TVALID,
        ack_in => regslice_both_undo_log_entry_V_U_ack_in,
        data_out => undo_log_entry_V_TDATA_int,
        vld_out => undo_log_entry_V_TVALID_int,
        ack_out => ap_const_logic_0,
        apdone_blk => regslice_both_undo_log_entry_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    t_V_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state39_io) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                t_V_reg_226 <= ngh_cnt_V_1_fu_512_p2;
            elsif (((l1_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                t_V_reg_226 <= start_n_V_reg_574;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                add_ln544_reg_652 <= add_ln544_fu_456_p2;
                ret_V_2_reg_647 <= grp_fu_414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                base_degree_V <= l1_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                base_neighbor_V <= l1_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state24_io) and (ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln887_1_fu_401_p2 = ap_const_lv1_1) and (icmp_ln887_fu_396_p2 = ap_const_lv1_1))) then
                child_ts_V_reg_633 <= child_ts_V_fu_419_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((l1_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                i_V_reg_594 <= task_in(131 downto 100);
                    lhs_V_2_reg_616(31 downto 0) <= lhs_V_2_fu_388_p1(31 downto 0);
                ngh_cnt_V_reg_604 <= ngh_cnt_V_fu_375_p3;
                    zext_ln119_1_reg_599(32 downto 0) <= zext_ln119_1_fu_358_p1(32 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state24_io) and (ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln887_fu_396_p2 = ap_const_lv1_1))) then
                icmp_ln887_1_reg_624 <= icmp_ln887_1_fu_401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state24_io) and (ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln887_fu_396_p2 = ap_const_lv1_0))) then
                icmp_ln887_2_reg_638 <= icmp_ln887_2_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (initialized_V = ap_const_lv1_0))) then
                initialized_V <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                initialized_V_load_reg_534 <= initialized_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((l1_V_RVALID = ap_const_logic_0) and (initialized_V_load_reg_534 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                l1_V_addr_3_reg_562 <= sext_ln544_fu_313_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                l1_V_addr_6_reg_657 <= add_ln544_1_fu_465_p2(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((l1_V_RVALID = ap_const_logic_0) or (l1_V_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                n_V_reg_583 <= l1_V_RDATA;
                start_n_V_reg_574 <= task_in(99 downto 68);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((task_out_V_TREADY_int = ap_const_logic_0) or (l1_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                p_Val2_s_fu_100 <= p_Result_s_fu_479_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                ret_V_1_reg_589 <= ret_V_1_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((l1_V_RVALID = ap_const_logic_0) and (initialized_V_load_reg_534 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (initialized_V_load_reg_534 = ap_const_lv1_0))) then
                total_v_V <= l1_V_RDATA;
            end if;
        end if;
    end process;
    zext_ln119_1_reg_599(33) <= '0';
    lhs_V_2_reg_616(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, initialized_V, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state24, icmp_ln887_fu_396_p2, ap_CS_fsm_state40, initialized_V_load_load_fu_237_p1, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state10, initialized_V_load_reg_534, ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state17, ap_CS_fsm_state23, icmp_ln887_1_fu_401_p2, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state41, ap_CS_fsm_state46, l1_V_AWREADY, l1_V_WREADY, l1_V_ARREADY, l1_V_RVALID, l1_V_BVALID, ap_block_state1_io, ap_block_state24_io, ap_block_state39_io, ap_block_state40_io, regslice_both_task_out_V_U_apdone_blk, task_out_V_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (initialized_V_load_load_fu_237_p1 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (initialized_V = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if ((not(((l1_V_RVALID = ap_const_logic_0) and (initialized_V_load_reg_534 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((l1_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if ((not(((l1_V_RVALID = ap_const_logic_0) or (l1_V_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((l1_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_boolean_0 = ap_block_state24_io) and (ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln887_fu_396_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                elsif (((ap_const_boolean_0 = ap_block_state24_io) and (ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln887_fu_396_p2 = ap_const_lv1_1) and (icmp_ln887_1_fu_401_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                elsif (((ap_const_boolean_0 = ap_block_state24_io) and (ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln887_1_fu_401_p2 = ap_const_lv1_1) and (icmp_ln887_fu_396_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((l1_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((l1_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if ((not(((task_out_V_TREADY_int = ap_const_logic_0) or (l1_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if (((ap_const_boolean_0 = ap_block_state39_io) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                if (((ap_const_boolean_0 = ap_block_state40_io) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                if (((l1_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if ((not(((l1_V_BVALID = ap_const_logic_0) or (regslice_both_task_out_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln544_1_fu_465_p2 <= std_logic_vector(unsigned(ret_V_2_reg_647) + unsigned(sext_ln544_3_fu_462_p1));
    add_ln544_fu_456_p2 <= std_logic_vector(signed(sext_ln544_1_fu_448_p1) + signed(sext_ln544_2_fu_452_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state10_assign_proc : process(initialized_V_load_reg_534, l1_V_RVALID)
    begin
                ap_block_state10 <= ((l1_V_RVALID = ap_const_logic_0) and (initialized_V_load_reg_534 = ap_const_lv1_0));
    end process;


    ap_block_state1_io_assign_proc : process(initialized_V, l1_V_ARREADY)
    begin
                ap_block_state1_io <= ((l1_V_ARREADY = ap_const_logic_0) and (initialized_V = ap_const_lv1_0));
    end process;


    ap_block_state24_io_assign_proc : process(l1_V_AWREADY, ap_predicate_op132_writereq_state24, ap_predicate_op142_write_state24, task_out_V_TREADY_int)
    begin
                ap_block_state24_io <= (((ap_predicate_op142_write_state24 = ap_const_boolean_1) and (task_out_V_TREADY_int = ap_const_logic_0)) or ((ap_predicate_op132_writereq_state24 = ap_const_boolean_1) and (l1_V_AWREADY = ap_const_logic_0)));
    end process;


    ap_block_state39_io_assign_proc : process(icmp_ln887_1_reg_624, task_out_V_TREADY_int)
    begin
                ap_block_state39_io <= ((task_out_V_TREADY_int = ap_const_logic_0) and (icmp_ln887_1_reg_624 = ap_const_lv1_1));
    end process;


    ap_block_state40_io_assign_proc : process(icmp_ln887_2_reg_638, l1_V_AWREADY, task_out_V_TREADY_int)
    begin
                ap_block_state40_io <= ((l1_V_AWREADY = ap_const_logic_0) or ((task_out_V_TREADY_int = ap_const_logic_0) and (icmp_ln887_2_reg_638 = ap_const_lv1_1)));
    end process;


    ap_block_state46_assign_proc : process(l1_V_BVALID, regslice_both_task_out_V_U_apdone_blk)
    begin
                ap_block_state46 <= ((l1_V_BVALID = ap_const_logic_0) or (regslice_both_task_out_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state46, l1_V_BVALID, regslice_both_task_out_V_U_apdone_blk)
    begin
        if ((not(((l1_V_BVALID = ap_const_logic_0) or (regslice_both_task_out_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op132_writereq_state24_assign_proc : process(icmp_ln887_fu_396_p2, icmp_ln887_1_fu_401_p2)
    begin
                ap_predicate_op132_writereq_state24 <= ((icmp_ln887_1_fu_401_p2 = ap_const_lv1_1) and (icmp_ln887_fu_396_p2 = ap_const_lv1_1));
    end process;


    ap_predicate_op142_write_state24_assign_proc : process(icmp_ln887_fu_396_p2, icmp_ln887_2_fu_422_p2)
    begin
                ap_predicate_op142_write_state24 <= ((icmp_ln887_2_fu_422_p2 = ap_const_lv1_1) and (icmp_ln887_fu_396_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state46, l1_V_BVALID, regslice_both_task_out_V_U_apdone_blk)
    begin
        if ((not(((l1_V_BVALID = ap_const_logic_0) or (regslice_both_task_out_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    child_ts_V_fu_419_p1 <= task_in(32 - 1 downto 0);
    empty_8_fu_364_p2 <= "1" when (signed(zext_ln119_1_fu_358_p1) > signed(empty_fu_361_p1)) else "0";
    empty_9_fu_370_p2 <= std_logic_vector(signed(start_n_V_reg_574) + signed(ap_const_lv32_7));
        empty_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(start_n_V_reg_574),34));


    grp_fu_414_ce_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, l1_V_WREADY, ap_block_state24_io, ap_CS_fsm_state28, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((l1_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_const_boolean_0 = ap_block_state24_io) and (ap_const_logic_1 = ap_CS_fsm_state24)))) then 
            grp_fu_414_ce <= ap_const_logic_1;
        else 
            grp_fu_414_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_414_p0 <= lhs_V_2_reg_616(32 - 1 downto 0);
    grp_fu_414_p1 <= grp_fu_414_p10(32 - 1 downto 0);
    grp_fu_414_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(total_v_V),64));
    i_V_fu_349_p4 <= task_in(131 downto 100);
    icmp_ln887_1_fu_401_p2 <= "1" when (signed(t_V_reg_226) < signed(n_V_reg_583)) else "0";
    icmp_ln887_2_fu_422_p2 <= "1" when (signed(ngh_cnt_V_reg_604) < signed(n_V_reg_583)) else "0";
    icmp_ln887_fu_396_p2 <= "1" when (signed(sext_ln887_fu_392_p1) < signed(zext_ln119_1_reg_599)) else "0";
    initialized_V_load_load_fu_237_p1 <= initialized_V;

    l1_V_ARADDR_assign_proc : process(ap_start, ap_CS_fsm_state1, initialized_V, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state11, ap_CS_fsm_state31, l1_V_ARREADY, ap_block_state1_io, l1_V_addr_3_reg_562, l1_V_addr_6_reg_657)
    begin
        if (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            l1_V_ARADDR <= l1_V_addr_6_reg_657;
        elsif (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            l1_V_ARADDR <= l1_V_addr_3_reg_562;
        elsif (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            l1_V_ARADDR <= ap_const_lv64_1(32 - 1 downto 0);
        elsif (((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            l1_V_ARADDR <= ap_const_lv64_5(32 - 1 downto 0);
        elsif ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (initialized_V = ap_const_lv1_0))) then 
            l1_V_ARADDR <= ap_const_lv64_4(32 - 1 downto 0);
        else 
            l1_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    l1_V_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, initialized_V, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state11, ap_CS_fsm_state31, l1_V_ARREADY, ap_block_state1_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (initialized_V = ap_const_lv1_0)) or ((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((l1_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            l1_V_ARVALID <= ap_const_logic_1;
        else 
            l1_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    l1_V_AWADDR_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state40, ap_CS_fsm_state17, l1_V_AWREADY, ap_predicate_op132_writereq_state24, ap_block_state24_io, ap_block_state40_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state40_io) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            l1_V_AWADDR <= ap_const_lv64_809(32 - 1 downto 0);
        elsif (((ap_predicate_op132_writereq_state24 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state24_io) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            l1_V_AWADDR <= ap_const_lv64_808(32 - 1 downto 0);
        elsif (((l1_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            l1_V_AWADDR <= ap_const_lv64_807(32 - 1 downto 0);
        else 
            l1_V_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    l1_V_AWVALID_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state40, ap_CS_fsm_state17, l1_V_AWREADY, ap_predicate_op132_writereq_state24, ap_block_state24_io, ap_block_state40_io)
    begin
        if ((((l1_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_boolean_0 = ap_block_state40_io) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_predicate_op132_writereq_state24 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state24_io) and (ap_const_logic_1 = ap_CS_fsm_state24)))) then 
            l1_V_AWVALID <= ap_const_logic_1;
        else 
            l1_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    l1_V_BREADY_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state46, l1_V_BVALID, regslice_both_task_out_V_U_apdone_blk)
    begin
        if (((not(((l1_V_BVALID = ap_const_logic_0) or (regslice_both_task_out_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((l1_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((l1_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            l1_V_BREADY <= ap_const_logic_1;
        else 
            l1_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    l1_V_RREADY_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, initialized_V_load_reg_534, ap_CS_fsm_state18, l1_V_WREADY, l1_V_RVALID, task_out_V_TREADY_int)
    begin
        if (((not(((l1_V_RVALID = ap_const_logic_0) or (l1_V_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((l1_V_RVALID = ap_const_logic_0) and (initialized_V_load_reg_534 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (initialized_V_load_reg_534 = ap_const_lv1_0)) or ((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((task_out_V_TREADY_int = ap_const_logic_0) or (l1_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            l1_V_RREADY <= ap_const_logic_1;
        else 
            l1_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    l1_V_WDATA_assign_proc : process(task_in, ap_CS_fsm_state18, ap_CS_fsm_state25, ap_CS_fsm_state41, l1_V_RVALID, t_V_reg_226)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            l1_V_WDATA <= ap_const_lv32_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            l1_V_WDATA <= t_V_reg_226;
        elsif (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            l1_V_WDATA <= task_in(99 downto 68);
        else 
            l1_V_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    l1_V_WVALID_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state25, ap_CS_fsm_state41, l1_V_WREADY, l1_V_RVALID)
    begin
        if ((((l1_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((l1_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or (not(((l1_V_RVALID = ap_const_logic_0) or (l1_V_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            l1_V_WVALID <= ap_const_logic_1;
        else 
            l1_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    l1_V_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_l1_V_ARREADY, initialized_V, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state11, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (initialized_V = ap_const_lv1_0)))) then 
            l1_V_blk_n_AR <= m_axi_l1_V_ARREADY;
        else 
            l1_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    l1_V_blk_n_AW_assign_proc : process(m_axi_l1_V_AWREADY, ap_CS_fsm_state24, icmp_ln887_fu_396_p2, ap_CS_fsm_state40, ap_CS_fsm_state17, icmp_ln887_1_fu_401_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state40) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln887_1_fu_401_p2 = ap_const_lv1_1) and (icmp_ln887_fu_396_p2 = ap_const_lv1_1)))) then 
            l1_V_blk_n_AW <= m_axi_l1_V_AWREADY;
        else 
            l1_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    l1_V_blk_n_B_assign_proc : process(m_axi_l1_V_BVALID, ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            l1_V_blk_n_B <= m_axi_l1_V_BVALID;
        else 
            l1_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    l1_V_blk_n_R_assign_proc : process(m_axi_l1_V_RVALID, ap_CS_fsm_state38, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, initialized_V_load_reg_534, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (initialized_V_load_reg_534 = ap_const_lv1_0)))) then 
            l1_V_blk_n_R <= m_axi_l1_V_RVALID;
        else 
            l1_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    l1_V_blk_n_W_assign_proc : process(m_axi_l1_V_WREADY, ap_CS_fsm_state18, ap_CS_fsm_state25, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            l1_V_blk_n_W <= m_axi_l1_V_WREADY;
        else 
            l1_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    lhs_V_2_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_V_fu_349_p4),64));
        lhs_V_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(base_degree_V),34));

    ngh_cnt_V_1_fu_512_p2 <= std_logic_vector(signed(t_V_reg_226) + signed(ap_const_lv32_1));
    ngh_cnt_V_fu_375_p3 <= 
        empty_9_fu_370_p2 when (empty_8_fu_364_p2(0) = '1') else 
        start_n_V_reg_574;
    p_Result_s_fu_479_p5 <= (p_Val2_s_fu_100(63 downto 32) & l1_V_RDATA);
    ret_V_1_fu_343_p2 <= std_logic_vector(unsigned(zext_ln119_fu_340_p1) + unsigned(ap_const_lv33_7));
    ret_V_fu_307_p2 <= std_logic_vector(signed(lhs_V_fu_299_p1) + signed(rhs_V_fu_303_p1));
    rhs_V_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vid_V_fu_286_p4),34));
        sext_ln177_1_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_429_p5),136));

        sext_ln177_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_491_p5),136));

        sext_ln544_1_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(base_neighbor_V),33));

        sext_ln544_2_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t_V_reg_226),33));

        sext_ln544_3_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln544_reg_652),64));

        sext_ln544_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_307_p2),64));

        sext_ln887_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t_V_reg_226),34));


    task_out_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state39, icmp_ln887_1_reg_624, ap_CS_fsm_state24, icmp_ln887_fu_396_p2, icmp_ln887_2_fu_422_p2, ap_CS_fsm_state40, icmp_ln887_2_reg_638, task_out_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln887_2_reg_638 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln887_2_fu_422_p2 = ap_const_lv1_1) and (icmp_ln887_fu_396_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state39) and (icmp_ln887_1_reg_624 = ap_const_lv1_1)))) then 
            task_out_V_TDATA_blk_n <= task_out_V_TREADY_int;
        else 
            task_out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    task_out_V_TDATA_int_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state24, l1_V_RVALID, ap_predicate_op142_write_state24, sext_ln177_1_fu_439_p1, sext_ln177_fu_502_p1)
    begin
        if (((l1_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            task_out_V_TDATA_int <= sext_ln177_fu_502_p1;
        elsif (((ap_predicate_op142_write_state24 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            task_out_V_TDATA_int <= sext_ln177_1_fu_439_p1;
        else 
            task_out_V_TDATA_int <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    task_out_V_TVALID <= regslice_both_task_out_V_U_vld_out;

    task_out_V_TVALID_int_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state24, l1_V_RVALID, ap_predicate_op142_write_state24, ap_block_state24_io, task_out_V_TREADY_int)
    begin
        if ((((ap_predicate_op142_write_state24 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state24_io) and (ap_const_logic_1 = ap_CS_fsm_state24)) or (not(((task_out_V_TREADY_int = ap_const_logic_0) or (l1_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            task_out_V_TVALID_int <= ap_const_logic_1;
        else 
            task_out_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_429_p5 <= (((i_V_reg_594 & ngh_cnt_V_reg_604) & ap_const_lv4_4) & trunc_ln176_fu_426_p1);
    tmp_fu_491_p5 <= (((p_Result_s_fu_479_p5 & ap_const_lv4_1) & l1_V_RDATA) & child_ts_V_reg_633);
    trunc_ln176_fu_426_p1 <= task_in(64 - 1 downto 0);

    undo_log_entry_V_TREADY_assign_proc : process(undo_log_entry_V_TVALID, regslice_both_undo_log_entry_V_U_ack_in)
    begin
        if (((regslice_both_undo_log_entry_V_U_ack_in = ap_const_logic_1) and (undo_log_entry_V_TVALID = ap_const_logic_1))) then 
            undo_log_entry_V_TREADY <= ap_const_logic_1;
        else 
            undo_log_entry_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    vid_V_fu_286_p4 <= task_in(63 downto 32);
    zext_ln119_1_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_reg_589),34));
    zext_ln119_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_n_V_reg_574),33));
end behav;
