// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mis_task_HH_
#define _mis_task_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mis_task_l1_V_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_L1_V_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_L1_V_ID_WIDTH = 1,
         unsigned int C_M_AXI_L1_V_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_L1_V_DATA_WIDTH = 32,
         unsigned int C_M_AXI_L1_V_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_L1_V_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_L1_V_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_L1_V_BUSER_WIDTH = 1>
struct mis_task : public sc_module {
    // Port declarations 58
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<132> > task_in;
    sc_out< sc_lv<136> > task_out_V_TDATA;
    sc_out< sc_logic > task_out_V_TVALID;
    sc_in< sc_logic > task_out_V_TREADY;
    sc_out< sc_logic > m_axi_l1_V_AWVALID;
    sc_in< sc_logic > m_axi_l1_V_AWREADY;
    sc_out< sc_uint<C_M_AXI_L1_V_ADDR_WIDTH> > m_axi_l1_V_AWADDR;
    sc_out< sc_uint<C_M_AXI_L1_V_ID_WIDTH> > m_axi_l1_V_AWID;
    sc_out< sc_lv<8> > m_axi_l1_V_AWLEN;
    sc_out< sc_lv<3> > m_axi_l1_V_AWSIZE;
    sc_out< sc_lv<2> > m_axi_l1_V_AWBURST;
    sc_out< sc_lv<2> > m_axi_l1_V_AWLOCK;
    sc_out< sc_lv<4> > m_axi_l1_V_AWCACHE;
    sc_out< sc_lv<3> > m_axi_l1_V_AWPROT;
    sc_out< sc_lv<4> > m_axi_l1_V_AWQOS;
    sc_out< sc_lv<4> > m_axi_l1_V_AWREGION;
    sc_out< sc_uint<C_M_AXI_L1_V_AWUSER_WIDTH> > m_axi_l1_V_AWUSER;
    sc_out< sc_logic > m_axi_l1_V_WVALID;
    sc_in< sc_logic > m_axi_l1_V_WREADY;
    sc_out< sc_uint<C_M_AXI_L1_V_DATA_WIDTH> > m_axi_l1_V_WDATA;
    sc_out< sc_uint<C_M_AXI_L1_V_DATA_WIDTH/8> > m_axi_l1_V_WSTRB;
    sc_out< sc_logic > m_axi_l1_V_WLAST;
    sc_out< sc_uint<C_M_AXI_L1_V_ID_WIDTH> > m_axi_l1_V_WID;
    sc_out< sc_uint<C_M_AXI_L1_V_WUSER_WIDTH> > m_axi_l1_V_WUSER;
    sc_out< sc_logic > m_axi_l1_V_ARVALID;
    sc_in< sc_logic > m_axi_l1_V_ARREADY;
    sc_out< sc_uint<C_M_AXI_L1_V_ADDR_WIDTH> > m_axi_l1_V_ARADDR;
    sc_out< sc_uint<C_M_AXI_L1_V_ID_WIDTH> > m_axi_l1_V_ARID;
    sc_out< sc_lv<8> > m_axi_l1_V_ARLEN;
    sc_out< sc_lv<3> > m_axi_l1_V_ARSIZE;
    sc_out< sc_lv<2> > m_axi_l1_V_ARBURST;
    sc_out< sc_lv<2> > m_axi_l1_V_ARLOCK;
    sc_out< sc_lv<4> > m_axi_l1_V_ARCACHE;
    sc_out< sc_lv<3> > m_axi_l1_V_ARPROT;
    sc_out< sc_lv<4> > m_axi_l1_V_ARQOS;
    sc_out< sc_lv<4> > m_axi_l1_V_ARREGION;
    sc_out< sc_uint<C_M_AXI_L1_V_ARUSER_WIDTH> > m_axi_l1_V_ARUSER;
    sc_in< sc_logic > m_axi_l1_V_RVALID;
    sc_out< sc_logic > m_axi_l1_V_RREADY;
    sc_in< sc_uint<C_M_AXI_L1_V_DATA_WIDTH> > m_axi_l1_V_RDATA;
    sc_in< sc_logic > m_axi_l1_V_RLAST;
    sc_in< sc_uint<C_M_AXI_L1_V_ID_WIDTH> > m_axi_l1_V_RID;
    sc_in< sc_uint<C_M_AXI_L1_V_RUSER_WIDTH> > m_axi_l1_V_RUSER;
    sc_in< sc_lv<2> > m_axi_l1_V_RRESP;
    sc_in< sc_logic > m_axi_l1_V_BVALID;
    sc_out< sc_logic > m_axi_l1_V_BREADY;
    sc_in< sc_lv<2> > m_axi_l1_V_BRESP;
    sc_in< sc_uint<C_M_AXI_L1_V_ID_WIDTH> > m_axi_l1_V_BID;
    sc_in< sc_uint<C_M_AXI_L1_V_BUSER_WIDTH> > m_axi_l1_V_BUSER;
    sc_out< sc_lv<64> > undo_log_entry_V_TDATA;
    sc_out< sc_logic > undo_log_entry_V_TVALID;
    sc_in< sc_logic > undo_log_entry_V_TREADY;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const6;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<3> > ap_var_for_const3;
    sc_signal< sc_lv<2> > ap_var_for_const4;
    sc_signal< sc_lv<4> > ap_var_for_const5;
    sc_signal< sc_lv<4> > ap_var_for_const7;


    // Module declarations
    mis_task(sc_module_name name);
    SC_HAS_PROCESS(mis_task);

    ~mis_task();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    mis_task_l1_V_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_L1_V_ID_WIDTH,C_M_AXI_L1_V_ADDR_WIDTH,C_M_AXI_L1_V_DATA_WIDTH,C_M_AXI_L1_V_AWUSER_WIDTH,C_M_AXI_L1_V_ARUSER_WIDTH,C_M_AXI_L1_V_WUSER_WIDTH,C_M_AXI_L1_V_RUSER_WIDTH,C_M_AXI_L1_V_BUSER_WIDTH,C_M_AXI_L1_V_TARGET_ADDR,C_M_AXI_L1_V_USER_VALUE,C_M_AXI_L1_V_PROT_VALUE,C_M_AXI_L1_V_CACHE_VALUE>* mis_task_l1_V_m_axi_U;
    regslice_both<136>* regslice_both_task_out_V_U;
    regslice_both<64>* regslice_both_undo_log_entry_V_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<28> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > initialized_V;
    sc_signal< sc_lv<32> > base_flags_V;
    sc_signal< sc_logic > task_out_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state23;
    sc_signal< sc_logic > ap_CS_fsm_state24;
    sc_signal< sc_logic > l1_V_blk_n_AR;
    sc_signal< sc_lv<1> > initialized_V_load_load_fu_149_p1;
    sc_signal< sc_logic > l1_V_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > ap_CS_fsm_state17;
    sc_signal< sc_logic > l1_V_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state22;
    sc_signal< sc_lv<1> > icmp_ln879_reg_310;
    sc_signal< sc_logic > l1_V_blk_n_W;
    sc_signal< sc_logic > l1_V_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state28;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_logic > undo_log_entry_V_TDATA_blk_n;
    sc_signal< sc_logic > l1_V_AWVALID;
    sc_signal< sc_logic > l1_V_AWREADY;
    sc_signal< sc_lv<32> > l1_V_AWADDR;
    sc_signal< sc_logic > l1_V_WVALID;
    sc_signal< sc_logic > l1_V_WREADY;
    sc_signal< sc_lv<32> > l1_V_WDATA;
    sc_signal< sc_logic > l1_V_ARVALID;
    sc_signal< sc_logic > l1_V_ARREADY;
    sc_signal< sc_lv<32> > l1_V_ARADDR;
    sc_signal< sc_logic > l1_V_RVALID;
    sc_signal< sc_logic > l1_V_RREADY;
    sc_signal< sc_lv<32> > l1_V_RDATA;
    sc_signal< sc_logic > l1_V_RLAST;
    sc_signal< sc_lv<1> > l1_V_RID;
    sc_signal< sc_lv<1> > l1_V_RUSER;
    sc_signal< sc_lv<2> > l1_V_RRESP;
    sc_signal< sc_logic > l1_V_BVALID;
    sc_signal< sc_logic > l1_V_BREADY;
    sc_signal< sc_lv<2> > l1_V_BRESP;
    sc_signal< sc_lv<1> > l1_V_BID;
    sc_signal< sc_lv<1> > l1_V_BUSER;
    sc_signal< bool > ap_block_state1_io;
    sc_signal< sc_lv<32> > vid_V_fu_172_p4;
    sc_signal< sc_lv<32> > vid_V_reg_281;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<32> > base_flags_V_load_reg_287;
    sc_signal< sc_lv<32> > l1_V_addr_1_reg_292;
    sc_signal< sc_lv<32> > cur_flag_V_reg_305;
    sc_signal< sc_lv<1> > icmp_ln879_fu_216_p2;
    sc_signal< sc_logic > ap_CS_fsm_state18;
    sc_signal< sc_lv<30> > add_ln1503_fu_233_p2;
    sc_signal< sc_lv<30> > add_ln1503_reg_314;
    sc_signal< bool > ap_block_state22_io;
    sc_signal< sc_lv<64> > trunc_ln176_fu_239_p1;
    sc_signal< sc_lv<64> > trunc_ln176_reg_319;
    sc_signal< bool > ap_block_state23_io;
    sc_signal< sc_lv<64> > sext_ln544_fu_199_p1;
    sc_signal< sc_logic > regslice_both_task_out_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_undo_log_entry_V_U_apdone_blk;
    sc_signal< bool > ap_block_state28;
    sc_signal< sc_lv<32> > lhs_V_fu_185_p0;
    sc_signal< sc_lv<34> > lhs_V_fu_185_p1;
    sc_signal< sc_lv<34> > rhs_V_fu_189_p1;
    sc_signal< sc_lv<34> > ret_V_fu_193_p2;
    sc_signal< sc_lv<30> > trunc_ln1503_fu_221_p1;
    sc_signal< sc_lv<30> > tmp_2_fu_224_p4;
    sc_signal< sc_lv<132> > tmp_1_fu_252_p4;
    sc_signal< sc_lv<28> > ap_NS_fsm;
    sc_signal< bool > ap_block_state24_io;
    sc_signal< sc_lv<136> > task_out_V_TDATA_int;
    sc_signal< sc_logic > task_out_V_TVALID_int;
    sc_signal< sc_logic > task_out_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_task_out_V_U_vld_out;
    sc_signal< sc_lv<64> > undo_log_entry_V_TDATA_int;
    sc_signal< sc_logic > undo_log_entry_V_TVALID_int;
    sc_signal< sc_logic > undo_log_entry_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_undo_log_entry_V_U_vld_out;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<28> ap_ST_fsm_state1;
    static const sc_lv<28> ap_ST_fsm_state2;
    static const sc_lv<28> ap_ST_fsm_state3;
    static const sc_lv<28> ap_ST_fsm_state4;
    static const sc_lv<28> ap_ST_fsm_state5;
    static const sc_lv<28> ap_ST_fsm_state6;
    static const sc_lv<28> ap_ST_fsm_state7;
    static const sc_lv<28> ap_ST_fsm_state8;
    static const sc_lv<28> ap_ST_fsm_state9;
    static const sc_lv<28> ap_ST_fsm_state10;
    static const sc_lv<28> ap_ST_fsm_state11;
    static const sc_lv<28> ap_ST_fsm_state12;
    static const sc_lv<28> ap_ST_fsm_state13;
    static const sc_lv<28> ap_ST_fsm_state14;
    static const sc_lv<28> ap_ST_fsm_state15;
    static const sc_lv<28> ap_ST_fsm_state16;
    static const sc_lv<28> ap_ST_fsm_state17;
    static const sc_lv<28> ap_ST_fsm_state18;
    static const sc_lv<28> ap_ST_fsm_state19;
    static const sc_lv<28> ap_ST_fsm_state20;
    static const sc_lv<28> ap_ST_fsm_state21;
    static const sc_lv<28> ap_ST_fsm_state22;
    static const sc_lv<28> ap_ST_fsm_state23;
    static const sc_lv<28> ap_ST_fsm_state24;
    static const sc_lv<28> ap_ST_fsm_state25;
    static const sc_lv<28> ap_ST_fsm_state26;
    static const sc_lv<28> ap_ST_fsm_state27;
    static const sc_lv<28> ap_ST_fsm_state28;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_16;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_15;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1B;
    static const sc_lv<32> ap_const_lv32_F;
    static const int C_M_AXI_L1_V_TARGET_ADDR;
    static const int C_M_AXI_L1_V_USER_VALUE;
    static const int C_M_AXI_L1_V_PROT_VALUE;
    static const int C_M_AXI_L1_V_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_11;
    static const bool ap_const_boolean_0;
    static const sc_lv<64> ap_const_lv64_3;
    static const sc_lv<64> ap_const_lv64_80B;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<32> ap_const_lv32_3D;
    static const sc_lv<36> ap_const_lv36_4;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const7();
    void thread_ap_clk_no_reset_();
    void thread_add_ln1503_fu_233_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state17();
    void thread_ap_CS_fsm_state18();
    void thread_ap_CS_fsm_state22();
    void thread_ap_CS_fsm_state23();
    void thread_ap_CS_fsm_state24();
    void thread_ap_CS_fsm_state28();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_state1_io();
    void thread_ap_block_state22_io();
    void thread_ap_block_state23_io();
    void thread_ap_block_state24_io();
    void thread_ap_block_state28();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_icmp_ln879_fu_216_p2();
    void thread_initialized_V_load_load_fu_149_p1();
    void thread_l1_V_ARADDR();
    void thread_l1_V_ARVALID();
    void thread_l1_V_AWADDR();
    void thread_l1_V_AWVALID();
    void thread_l1_V_BREADY();
    void thread_l1_V_RREADY();
    void thread_l1_V_WDATA();
    void thread_l1_V_WVALID();
    void thread_l1_V_blk_n_AR();
    void thread_l1_V_blk_n_AW();
    void thread_l1_V_blk_n_B();
    void thread_l1_V_blk_n_R();
    void thread_l1_V_blk_n_W();
    void thread_lhs_V_fu_185_p0();
    void thread_lhs_V_fu_185_p1();
    void thread_ret_V_fu_193_p2();
    void thread_rhs_V_fu_189_p1();
    void thread_sext_ln544_fu_199_p1();
    void thread_task_out_V_TDATA_blk_n();
    void thread_task_out_V_TDATA_int();
    void thread_task_out_V_TVALID();
    void thread_task_out_V_TVALID_int();
    void thread_tmp_1_fu_252_p4();
    void thread_tmp_2_fu_224_p4();
    void thread_trunc_ln1503_fu_221_p1();
    void thread_trunc_ln176_fu_239_p1();
    void thread_undo_log_entry_V_TDATA_blk_n();
    void thread_undo_log_entry_V_TDATA_int();
    void thread_undo_log_entry_V_TVALID();
    void thread_undo_log_entry_V_TVALID_int();
    void thread_vid_V_fu_172_p4();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
